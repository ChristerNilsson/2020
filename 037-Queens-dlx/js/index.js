// Generated by CoffeeScript 2.4.1
// /**
//  * Knuth's Dancing Links
//  * Original paper: https://arxiv.org/pdf/cs/0011047.pdf
//  * Implementation ported from: https://github.com/shreevatsa/knuth-literate-programs/blob/master/programs/dance.pdf
//  *
//  * Code runs in a state machine in order to avoid recursion
//  * and in order to work around the lack of `goto` in JS
//  */
var SearchConfig, SearchState, search;

({SearchConfig} = require('./interfaces'));

SearchState = {
  FORWARD: 0,
  ADVANCE: 1,
  BACKUP: 2,
  RECOVER: 3,
  DONE: 4
};

search = function(config) {
  var advance, backup, bestCol, choice, colArray, cover, currentNode, currentSearchState, currentStateMethod, done, forward, level, nodeArray, numPrimary, numSecondary, numSolutions, pickBestColum, readColumnNames, readRows, recordSolution, recover, root, rows, running, solutions, stateMethods, uncover;
  ({numSolutions, numPrimary, numSecondary, rows} = config);
  root = {};
  colArray = [root];
  nodeArray = [];
  solutions = [];
  currentSearchState = SearchState.FORWARD;
  running = true;
  level = 0;
  choice = [];
  bestCol = null;
  currentNode = null;
  readColumnNames = function() {
    var column, curColIndex, head, i, j, k, lastCol, len, len1, ref, ref1, results1;
    // Skip root node
    curColIndex = 1;
    ref = range(numPrimary);
    //(let i = 0; i < numPrimary; i++) {
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      head = {};
      head.up = head;
      head.down = head;
      column = {
        len: 0,
        head
      };
      column.prev = colArray[curColIndex - 1];
      colArray[curColIndex - 1].next = column;
      colArray[curColIndex] = column;
      curColIndex = curColIndex + 1;
    }
    lastCol = colArray[curColIndex - 1];
    // Link the last primary constraint to wrap back into the root
    lastCol.next = root;
    root.prev = lastCol;
    ref1 = range(numSecondary);
    results1 = [];
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      i = ref1[k];
      head = {};
      head.up = head;
      head.down = head;
      column = {
        head,
        len: 0
      };
      column.prev = column;
      column.next = column;
      colArray[curColIndex] = column;
      results1.push(curColIndex = curColIndex + 1);
    }
    return results1;
  };
  readRows = function() {
    var col, columnIndex, curNodeIndex, i, j, len, node, ref, results1, row, rowStart;
    curNodeIndex = 0;
    ref = range(rows.length);
    results1 = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      row = rows[i];
      rowStart = void 0;
      for (columnIndex in row.coveredColumns) {
        node = {};
        node.left = node;
        node.right = node;
        node.down = node;
        node.up = node;
        node.index = i;
        node.data = row.data;
        nodeArray[curNodeIndex] = node;
        if (!rowStart) {
          rowStart = node;
        } else {
          node.left = nodeArray[curNodeIndex - 1];
          nodeArray[curNodeIndex - 1].right = node;
        }
        col = colArray[columnIndex + 1];
        node.col = col;
        node.up = col.head.up;
        col.head.up.down = node;
        col.head.up = node;
        node.down = col.head;
        col.len = col.len + 1;
        curNodeIndex = curNodeIndex + 1;
      }
      rowStart.left = nodeArray[curNodeIndex - 1];
      results1.push(nodeArray[curNodeIndex - 1].right = rowStart);
    }
    return results1;
  };
  cover = function(c) {
    var dd, l, nn, r, results1, rr, uu;
    l = c.prev;
    r = c.next;
    // Unlink column
    l.next = r;
    r.prev = l;
    // From to to bottom, left to right unlink every row node from its column
    rr = c.head.down;
    results1 = [];
    while (rr !== c.head) {
      nn = rr.right;
      while (nn !== rr) {
        uu = nn.up;
        dd = nn.down;
        uu.down = dd;
        dd.up = uu;
        nn.col.len -= 1;
        nn = nn.right;
      }
      results1.push(rr = rr.down);
    }
    return results1;
  };
  uncover = function(c) {
    var dd, l, nn, r, rr, uu;
    // From bottom to top, right to left relink every row node to its column
    rr = c.head.up;
    while (rr !== c.head) {
      nn = rr.left;
      while (nn !== rr) {
        uu = nn.up;
        dd = nn.down;
        uu.down = nn;
        dd.up = nn;
        nn.col.len += 1;
        nn = nn.left;
      }
      rr = rr.up;
    }
    l = c.prev;
    r = c.next;
    // Unlink column
    l.next = c;
    return r.prev = c;
  };
  pickBestColum = function() {
    var curCol, length, lowest, lowestLen;
    lowestLen = root.next.len;
    lowest = root.next;
    curCol = root.next;
    while (curCol !== root) {
      length = curCol.len;
      if (length < lowestLen) {
        lowestLen = length;
        lowest = curCol;
      }
      curCol = curCol.next;
    }
    return bestCol = lowest;
  };
  forward = function() {
    pickBestColum();
    cover(bestCol);
    currentNode = bestCol.head.down;
    choice[level] = currentNode;
    return currentSearchState = SearchState.ADVANCE;
  };
  recordSolution = function() {
    var j, l, len, node, ref, results;
    results = [];
    ref = range(level);
    //(let l = 0; l <= level; l++) {
    for (j = 0, len = ref.length; j < len; j++) {
      l = ref[j];
      node = choice[l];
      results.push({
        index: node.index,
        data: node.data
      });
    }
    return solutions.push(results);
  };
  advance = function() {
    var pp;
    if (currentNode === bestCol.head) {
      currentSearchState = SearchState.BACKUP;
      return;
    }
    pp = currentNode.right;
    while (pp !== currentNode) {
      cover(pp.col);
      pp = pp.right;
    }
    if (root.next === root) {
      recordSolution();
      if (solutions.length === numSolutions) {
        currentSearchState = SearchState.DONE;
      } else {
        currentSearchState = SearchState.RECOVER;
      }
      return;
    }
    level = level + 1;
    return currentSearchState = SearchState.FORWARD;
  };
  backup = function() {
    uncover(bestCol);
    if (level === 0) {
      currentSearchState = SearchState.DONE;
      return;
    }
    level = level - 1;
    currentNode = choice[level];
    bestCol = currentNode.col;
    return currentSearchState = SearchState.RECOVER;
  };
  recover = function() {
    var pp;
    pp = currentNode.left;
    while (pp !== currentNode) {
      uncover(pp.col);
      pp = pp.left;
    }
    currentNode = currentNode.down;
    choice[level] = currentNode;
    return currentSearchState = SearchState.ADVANCE;
  };
  done = function() {
    return running = false;
  };
  stateMethods = {
    [SearchState.FORWARD]: forward,
    [SearchState.ADVANCE]: advance,
    [SearchState.BACKUP]: backup,
    [SearchState.RECOVER]: recover,
    [SearchState.DONE]: done
  };
  readColumnNames();
  readRows();
  while (running) {
    currentStateMethod = stateMethods[currentSearchState];
    currentStateMethod();
  }
  return solutions;
};

module.exports = {search};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcaW5kZXguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7QUFBQSxJQUFBLFlBQUEsRUFBQSxXQUFBLEVBQUE7O0FBU0EsQ0FBQSxDQUFFLFlBQUYsQ0FBQSxHQUFtQixPQUFBLENBQVEsY0FBUixDQUFuQjs7QUFFQSxXQUFBLEdBQ0M7RUFBQSxPQUFBLEVBQVUsQ0FBVjtFQUNBLE9BQUEsRUFBVSxDQURWO0VBRUEsTUFBQSxFQUFTLENBRlQ7RUFHQSxPQUFBLEVBQVUsQ0FIVjtFQUlBLElBQUEsRUFBTztBQUpQOztBQU1ELE1BQUEsR0FBUyxRQUFBLENBQUMsTUFBRCxDQUFBO0FBQ1IsTUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsUUFBQSxFQUFBLEtBQUEsRUFBQSxXQUFBLEVBQUEsa0JBQUEsRUFBQSxrQkFBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBLFNBQUEsRUFBQSxVQUFBLEVBQUEsWUFBQSxFQUFBLFlBQUEsRUFBQSxhQUFBLEVBQUEsZUFBQSxFQUFBLFFBQUEsRUFBQSxjQUFBLEVBQUEsT0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLFNBQUEsRUFBQSxZQUFBLEVBQUE7RUFBQSxDQUFBLENBQUUsWUFBRixFQUFnQixVQUFoQixFQUE0QixZQUE1QixFQUEwQyxJQUExQyxDQUFBLEdBQW1ELE1BQW5EO0VBQ0EsSUFBQSxHQUFPLENBQUE7RUFFUCxRQUFBLEdBQVcsQ0FBQyxJQUFEO0VBQ1gsU0FBQSxHQUFZO0VBQ1osU0FBQSxHQUFZO0VBRVosa0JBQUEsR0FBcUIsV0FBVyxDQUFDO0VBQ2pDLE9BQUEsR0FBVTtFQUNWLEtBQUEsR0FBUTtFQUNSLE1BQUEsR0FBUztFQUNULE9BQUEsR0FBVTtFQUNWLFdBQUEsR0FBYztFQUVkLGVBQUEsR0FBa0IsUUFBQSxD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TSxFQUFBLEtBQU0sV0FBWjtNQUNDLE9BQUEsQ0FBUSxFQUFFLENBQUMsR0FBWDtNQUNBLEVBQUEsR0FBSyxFQUFFLENBQUM7SUFGVDtJQUdBLFdBQUEsR0FBYyxXQUFXLENBQUM7SUFDMUIsTUFBTyxDQUFBLEtBQUEsQ0FBUCxHQUFnQjtXQUNoQixrQkFBQSxHQUFxQixXQUFXLENBQUM7RUFQeEI7RUFTVixJQUFBLEdBQU8sUUFBQSxDQUFBLENBQUE7V0FDTixPQUFBLEdBQVU7RUFESjtFQUdQLFlBQUEsR0FBZTtJQUNkLENBQUMsV0FBVyxDQUFDLE9BQWIsQ0FBQSxFQUF1QixPQURUO0lBRWQsQ0FBQyxXQUFXLENBQUMsT0FBYixDQUFBLEVBQXVCLE9BRlQ7SUFHZCxDQUFDLFdBQVcsQ0FBQyxNQUFiLENBQUEsRUFBc0IsTUFIUjtJQUlkLENBQUMsV0FBVyxDQUFDLE9BQWIsQ0FBQSxFQUF1QixPQUpUO0lBS2QsQ0FBQyxXQUFXLENBQUMsSUFBYixDQUFBLEVBQW9CO0VBTE47RUFRZixlQUFBLENBQUE7RUFDQSxRQUFBLENBQUE7QUFFQSxTQUFPLE9BQVA7SUFDQyxrQkFBQSxHQUFxQixZQUFhLENBQUEsa0JBQUE7SUFDbEMsa0JBQUEsQ0FBQTtFQUZEO0FBSUEsU0FBTztBQTFPQzs7QUE0T1QsTUFBTSxDQUFDLE9BQVAsR0FBaUIsQ0FBRSxNQUFGIiwic291cmNlc0NvbnRlbnQiOlsiIyAvKipcclxuIyAgKiBLbnV0aCdzIERhbmNpbmcgTGlua3NcclxuIyAgKiBPcmlnaW5hbCBwYXBlcjogaHR0cHM6Ly9hcnhpdi5vcmcvcGRmL2NzLzAwMTEwNDcucGRmXHJcbiMgICogSW1wbGVtZW50YXRpb24gcG9ydGVkIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9zaHJlZXZhdHNhL2tudXRoLWxpdGVyYXRlLXByb2dyYW1zL2Jsb2IvbWFzdGVyL3Byb2dyYW1zL2RhbmNlLnBkZlxyXG4jICAqXHJcbiMgICogQ29kZSBydW5zIGluIGEgc3RhdGUgbWFjaGluZSBpbiBvcmRlciB0byBhdm9pZCByZWN1cnNpb25cclxuIyAgKiBhbmQgaW4gb3JkZXIgdG8gd29yayBhcm91bmQgdGhlIGxhY2sgb2YgYGdvdG9gIGluIEpTXHJcbiMgICovXHJcblxyXG57IFNlYXJjaENvbmZpZyB9ID0gcmVxdWlyZSAnLi9pbnRlcmZhY2VzJ1xyXG4gIFxyXG5TZWFyY2hTdGF0ZSA9IFxyXG5cdEZPUldBUkQgOiAwXHJcblx0QURWQU5DRSA6IDFcclxuXHRCQUNLVVAgOiAyXHJcblx0UkVDT1ZFUiA6IDNcclxuXHRET05FIDogNFxyXG5cclxuc2VhcmNoID0gKGNvbmZpZykgLT5cclxuXHR7IG51bVNvbHV0aW9ucywgbnVtUHJpbWFyeSwgbnVtU2Vjb25kYXJ5LCByb3dzIH0gPSBjb25maWdcclxuXHRyb290ID0ge31cclxuXHJcblx0Y29sQXJyYXkgPSBbcm9vdF1cclxuXHRub2RlQXJyYXkgPSBbXVxyXG5cdHNvbHV0aW9ucyA9IFtdXHJcblxyXG5cdGN1cnJlbnRTZWFyY2hTdGF0ZSA9IFNlYXJjaFN0YXRlLkZPUldBUkRcclxuXHRydW5uaW5nID0gdHJ1ZVxyXG5cdGxldmVsID0gMFxyXG5cdGNob2ljZSA9IFtdXHJcblx0YmVzdENvbCA9IG51bGxcclxuXHRjdXJyZW50Tm9kZSA9IG51bGxcclxuXHJcblx0cmVhZENvbHVtbk5hbWVzID0gKCkgLT5cclxuXHRcdCMgU2tpcCByb290IG5vZGVcclxuXHRcdGN1ckNvbEluZGV4ID0gMVxyXG5cclxuXHRcdGZvciBpIGluIHJhbmdlIG51bVByaW1hcnkgIyhsZXQgaSA9IDA7IGkgPCBudW1QcmltYXJ5OyBpKyspIHtcclxuXHRcdFx0aGVhZCA9IHt9XHJcblx0XHRcdGhlYWQudXAgPSBoZWFkXHJcblx0XHRcdGhlYWQuZG93biA9IGhlYWRcclxuXHJcblx0XHRcdGNvbHVtbiA9IHtcclxuXHRcdFx0XHRsZW46IDAsXHJcblx0XHRcdFx0aGVhZFxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRjb2x1bW4ucHJldiA9IGNvbEFycmF5W2N1ckNvbEluZGV4IC0gMV1cclxuXHRcdFx0Y29sQXJyYXlbY3VyQ29sSW5kZXggLSAxXS5uZXh0ID0gY29sdW1uXHJcblxyXG5cdFx0XHRjb2xBcnJheVtjdXJDb2xJbmRleF0gPSBjb2x1bW5cclxuXHRcdFx0Y3VyQ29sSW5kZXggPSBjdXJDb2xJbmRleCArIDFcclxuXHJcblx0XHRsYXN0Q29sID0gY29sQXJyYXlbY3VyQ29sSW5kZXggLSAxXVxyXG5cdFx0IyBMaW5rIHRoZSBsYXN0IHByaW1hcnkgY29uc3RyYWludCB0byB3cmFwIGJhY2sgaW50byB0aGUgcm9vdFxyXG5cdFx0bGFzdENvbC5uZXh0ID0gcm9vdFxyXG5cdFx0cm9vdC5wcmV2ID0gbGFzdENvbFxyXG5cclxuXHRcdGZvciBpIGluIHJhbmdlIG51bVNlY29uZGFyeVxyXG5cdFx0XHRoZWFkID0ge31cclxuXHRcdFx0aGVhZC51cCA9IGhlYWRcclxuXHRcdFx0aGVhZC5kb3duID0gaGVhZFxyXG5cclxuXHRcdFx0Y29sdW1uID0ge1xyXG5cdFx0XHRcdGhlYWQsXHJcblx0XHRcdFx0bGVuOiAwXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNvbHVtbi5wcmV2ID0gY29sdW1uXHJcblx0XHRcdGNvbHVtbi5uZXh0ID0gY29sdW1uXHJcblxyXG5cdFx0XHRjb2xBcnJheVtjdXJDb2xJbmRleF0gPSBjb2x1bW5cclxuXHRcdFx0Y3VyQ29sSW5kZXggPSBjdXJDb2xJbmRleCArIDFcclxuXHJcblx0cmVhZFJvd3MgID0gKCkgLT5cclxuXHRcdGN1ck5vZGVJbmRleCA9IDBcclxuXHJcblx0XHRmb3IgaSBpbiByYW5nZSByb3dzLmxlbmd0aFxyXG5cdFx0XHRyb3cgPSByb3dzW2ldXHJcblx0XHRcdHJvd1N0YXJ0ID0gdW5kZWZpbmVkXHJcblxyXG5cdFx0XHRmb3IgY29sdW1uSW5kZXggb2Ygcm93LmNvdmVyZWRDb2x1bW5zXHJcblx0XHRcdFx0bm9kZSA9IHt9XHJcblx0XHRcdFx0bm9kZS5sZWZ0ID0gbm9kZVxyXG5cdFx0XHRcdG5vZGUucmlnaHQgPSBub2RlXHJcblx0XHRcdFx0bm9kZS5kb3duID0gbm9kZVxyXG5cdFx0XHRcdG5vZGUudXAgPSBub2RlXHJcblx0XHRcdFx0bm9kZS5pbmRleCA9IGlcclxuXHRcdFx0XHRub2RlLmRhdGEgPSByb3cuZGF0YVxyXG5cclxuXHRcdFx0XHRub2RlQXJyYXlbY3VyTm9kZUluZGV4XSA9IG5vZGVcclxuXHJcblx0XHRcdFx0aWYgKCFyb3dTdGFydCkgXHJcblx0XHRcdFx0XHRyb3dTdGFydCA9IG5vZGVcclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRub2RlLmxlZnQgPSBub2RlQXJyYXlbY3VyTm9kZUluZGV4IC0gMV1cclxuXHRcdFx0XHRcdG5vZGVBcnJheVtjdXJOb2RlSW5kZXggLSAxXS5yaWdodCA9IG5vZGVcclxuXHJcblx0XHRcdFx0Y29sID0gY29sQXJyYXlbY29sdW1uSW5kZXggKyAxXVxyXG5cdFx0XHRcdG5vZGUuY29sID0gY29sXHJcblxyXG5cdFx0XHRcdG5vZGUudXAgPSBjb2wuaGVhZC51cFxyXG5cdFx0XHRcdGNvbC5oZWFkLnVwLmRvd24gPSBub2RlXHJcblxyXG5cdFx0XHRcdGNvbC5oZWFkLnVwID0gbm9kZVxyXG5cdFx0XHRcdG5vZGUuZG93biA9IGNvbC5oZWFkXHJcblxyXG5cdFx0XHRcdGNvbC5sZW4gPSBjb2wubGVuICsgMVxyXG5cdFx0XHRcdGN1ck5vZGVJbmRleCA9IGN1ck5vZGVJbmRleCArIDFcclxuXHJcblx0XHRcdHJvd1N0YXJ0LmxlZnQgPSBub2RlQXJyYXlbY3VyTm9kZUluZGV4IC0gMV1cclxuXHRcdFx0bm9kZUFycmF5W2N1ck5vZGVJbmRleCAtIDFdLnJpZ2h0ID0gcm93U3RhcnRcclxuXHJcblx0Y292ZXIgPSAoYykgLT5cclxuXHRcdGwgPSBjLnByZXZcclxuXHRcdHIgPSBjLm5leHRcclxuXHJcblx0XHQjIFVubGluayBjb2x1bW5cclxuXHRcdGwubmV4dCA9IHJcclxuXHRcdHIucHJldiA9IGxcclxuXHJcblx0XHQjIEZyb20gdG8gdG8gYm90dG9tLCBsZWZ0IHRvIHJpZ2h0IHVubGluayBldmVyeSByb3cgbm9kZSBmcm9tIGl0cyBjb2x1bW5cclxuXHRcdHJyID0gYy5oZWFkLmRvd247IFxyXG5cdFx0d2hpbGUgcnIgIT0gYy5oZWFkXHJcblx0XHRcdG5uID0gcnIucmlnaHRcclxuXHRcdFx0d2hpbGUgbm4gIT0gcnJcclxuXHRcdFx0XHR1dSA9IG5uLnVwXHJcblx0XHRcdFx0ZGQgPSBubi5kb3duXHJcblxyXG5cdFx0XHRcdHV1LmRvd24gPSBkZFxyXG5cdFx0XHRcdGRkLnVwID0gdXVcclxuXHJcblx0XHRcdFx0bm4uY29sLmxlbiAtPSAxXHJcblx0XHRcdFx0bm4gPSBubi5yaWdodFxyXG5cdFx0XHRyciA9IHJyLmRvd25cclxuXHJcblx0dW5jb3ZlciAgPSAoYykgLT5cclxuXHRcdCMgRnJvbSBib3R0b20gdG8gdG9wLCByaWdodCB0byBsZWZ0IHJlbGluayBldmVyeSByb3cgbm9kZSB0byBpdHMgY29sdW1uXHJcblx0XHRyciA9IGMuaGVhZC51cFxyXG5cdFx0d2hpbGUgcnIgIT0gYy5oZWFkXHJcblx0XHRcdG5uID0gcnIubGVmdFxyXG5cdFx0XHR3aGlsZSBubiAhPSByclxyXG5cdFx0XHRcdHV1ID0gbm4udXBcclxuXHRcdFx0XHRkZCA9IG5uLmRvd25cclxuXHJcblx0XHRcdFx0dXUuZG93biA9IG5uXHJcblx0XHRcdFx0ZGQudXAgPSBublxyXG5cclxuXHRcdFx0XHRubi5jb2wubGVuICs9IDFcclxuXHRcdFx0XHRubiA9IG5uLmxlZnRcclxuXHRcdFx0cnIgPSByci51cFxyXG5cclxuXHRcdGwgPSBjLnByZXZcclxuXHRcdHIgPSBjLm5leHRcclxuXHJcblx0XHQjIFVubGluayBjb2x1bW5cclxuXHRcdGwubmV4dCA9IGNcclxuXHRcdHIucHJldiA9IGNcclxuXHJcblx0cGlja0Jlc3RDb2x1bSA9ICgpIC0+XHJcblx0XHRsb3dlc3RMZW4gPSByb290Lm5leHQubGVuXHJcblx0XHRsb3dlc3QgPSByb290Lm5leHRcclxuXHRcdGN1ckNvbCA9IHJvb3QubmV4dFxyXG5cdFx0d2hpbGUgY3VyQ29sICE9IHJvb3RcclxuXHRcdFx0bGVuZ3RoID0gY3VyQ29sLmxlblxyXG5cdFx0XHRpZiBsZW5ndGggPCBsb3dlc3RMZW5cclxuXHRcdFx0XHRsb3dlc3RMZW4gPSBsZW5ndGhcclxuXHRcdFx0XHRsb3dlc3QgPSBjdXJDb2xcclxuXHRcdFx0Y3VyQ29sID0gY3VyQ29sLm5leHRcclxuXHRcdGJlc3RDb2wgPSBsb3dlc3RcclxuXHJcblx0Zm9yd2FyZCA9ICgpIC0+XHJcblx0XHRwaWNrQmVzdENvbHVtKClcclxuXHRcdGNvdmVyKGJlc3RDb2wpXHJcblxyXG5cdFx0Y3VycmVudE5vZGUgPSBiZXN0Q29sLmhlYWQuZG93blxyXG5cdFx0Y2hvaWNlW2xldmVsXSA9IGN1cnJlbnROb2RlXHJcblxyXG5cdFx0Y3VycmVudFNlYXJjaFN0YXRlID0gU2VhcmNoU3RhdGUuQURWQU5DRVxyXG5cclxuXHRyZWNvcmRTb2x1dGlvbiA9ICgpIC0+XHJcblx0XHRyZXN1bHRzID0gW11cclxuXHRcdGZvciBsIGluIHJhbmdlIGxldmVsICMobGV0IGwgPSAwOyBsIDw9IGxldmVsOyBsKyspIHtcclxuXHRcdFx0bm9kZSA9IGNob2ljZVtsXVxyXG5cdFx0XHRyZXN1bHRzLnB1c2gge1xyXG5cdFx0XHRcdGluZGV4OiBub2RlLmluZGV4LFxyXG5cdFx0XHRcdGRhdGE6IG5vZGUuZGF0YVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0c29sdXRpb25zLnB1c2gocmVzdWx0cylcclxuXHJcblx0YWR2YW5jZSA9ICgpIC0+XHJcblx0XHRpZiAoY3VycmVudE5vZGUgPT0gYmVzdENvbC5oZWFkKSBcclxuXHRcdFx0Y3VycmVudFNlYXJjaFN0YXRlID0gU2VhcmNoU3RhdGUuQkFDS1VQXHJcblx0XHRcdHJldHVyblxyXG5cdFx0cHAgPSBjdXJyZW50Tm9kZS5yaWdodFxyXG5cdFx0d2hpbGUgcHAgIT0gY3VycmVudE5vZGVcclxuXHRcdFx0Y292ZXIocHAuY29sKVxyXG5cdFx0XHRwcCA9IHBwLnJpZ2h0XHJcblxyXG5cdFx0aWYgKHJvb3QubmV4dCA9PSByb290KSBcclxuXHRcdFx0cmVjb3JkU29sdXRpb24oKVxyXG5cdFx0XHRpZiAoc29sdXRpb25zLmxlbmd0aCA9PSBudW1Tb2x1dGlvbnMpIFxyXG5cdFx0XHRcdGN1cnJlbnRTZWFyY2hTdGF0ZSA9IFNlYXJjaFN0YXRlLkRPTkVcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdGN1cnJlbnRTZWFyY2hTdGF0ZSA9IFNlYXJjaFN0YXRlLlJFQ09WRVJcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0bGV2ZWwgPSBsZXZlbCArIDFcclxuXHRcdGN1cnJlbnRTZWFyY2hTdGF0ZSA9IFNlYXJjaFN0YXRlLkZPUldBUkRcclxuXHJcblx0YmFja3VwID0gKCkgLT5cclxuXHRcdHVuY292ZXIoYmVzdENvbClcclxuXHJcblx0XHRpZiAobGV2ZWwgPT0gMCkgXHJcblx0XHRcdGN1cnJlbnRTZWFyY2hTdGF0ZSA9IFNlYXJjaFN0YXRlLkRPTkVcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0bGV2ZWwgPSBsZXZlbCAtIDFcclxuXHJcblx0XHRjdXJyZW50Tm9kZSA9IGNob2ljZVtsZXZlbF1cclxuXHRcdGJlc3RDb2wgPSBjdXJyZW50Tm9kZS5jb2xcclxuXHJcblx0XHRjdXJyZW50U2VhcmNoU3RhdGUgPSBTZWFyY2hTdGF0ZS5SRUNPVkVSXHJcblxyXG5cdHJlY292ZXIgPSAoKSAtPlxyXG5cdFx0cHAgPSBjdXJyZW50Tm9kZS5sZWZ0XHJcblx0XHR3aGlsZSBwcCAhPSBjdXJyZW50Tm9kZVxyXG5cdFx0XHR1bmNvdmVyKHBwLmNvbClcclxuXHRcdFx0cHAgPSBwcC5sZWZ0XHJcblx0XHRjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLmRvd25cclxuXHRcdGNob2ljZVtsZXZlbF0gPSBjdXJyZW50Tm9kZVxyXG5cdFx0Y3VycmVudFNlYXJjaFN0YXRlID0gU2VhcmNoU3RhdGUuQURWQU5DRVxyXG5cclxuXHRkb25lID0gKCkgLT5cclxuXHRcdHJ1bm5pbmcgPSBmYWxzZVxyXG5cclxuXHRzdGF0ZU1ldGhvZHMgPSB7XHJcblx0XHRbU2VhcmNoU3RhdGUuRk9SV0FSRF06IGZvcndhcmQsXHJcblx0XHRbU2VhcmNoU3RhdGUuQURWQU5DRV06IGFkdmFuY2UsXHJcblx0XHRbU2VhcmNoU3RhdGUuQkFDS1VQXTogYmFja3VwLFxyXG5cdFx0W1NlYXJjaFN0YXRlLlJFQ09WRVJdOiByZWNvdmVyLFxyXG5cdFx0W1NlYXJjaFN0YXRlLkRPTkVdOiBkb25lXHJcblx0fVxyXG5cclxuXHRyZWFkQ29sdW1uTmFtZXMoKVxyXG5cdHJlYWRSb3dzKClcclxuXHJcblx0d2hpbGUgKHJ1bm5pbmcpXHJcblx0XHRjdXJyZW50U3RhdGVNZXRob2QgPSBzdGF0ZU1ldGhvZHNbY3VycmVudFNlYXJjaFN0YXRlXVxyXG5cdFx0Y3VycmVudFN0YXRlTWV0aG9kKClcclxuXHJcblx0cmV0dXJuIHNvbHV0aW9uc1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7IHNlYXJjaCB9Il19
//# sourceURL=c:\github\2020\037-Queens-dlx\coffee\index.coffee