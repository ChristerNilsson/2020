// Generated by CoffeeScript 2.4.1
//import Constraint  from './interfaces'
//import Row from './interfaces'
// import isSimpleConstraint from './interfaces'
// import isComplexConstraint from './interfaces'
//import SearchConfig  from './interfaces'
var binaryToSparseRow, getParams, getSearchConfig, isComplexConstraint, isSimpleConstraint;

isSimpleConstraint = function(arg) {
  return arg.row !== void 0;
};

isComplexConstraint = function(arg) {
  return arg.primaryRow !== void 0 && arg.secondaryRow !== void 0;
};

// type BinaryInt = 0 | 1 
binaryToSparseRow = function(binaryRow, offset = 0) {
  var i, j, len, ref, sparseRow;
  sparseRow = [];
  ref = range(binaryRow.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    if (binaryRow[i] === 1) {
      sparseRow.push(i + offset);
    }
  }
  return sparseRow;
};

getParams = function(constraint) {
  var numPrimary, numSecondary;
  numPrimary = 0;
  numSecondary = 0;
  if (isSimpleConstraint(constraint)) {
    numPrimary = constraint.row.length;
  } else if (isComplexConstraint(constraint)) {
    numPrimary = constraint.primaryRow.length;
    numSecondary = constraint.secondaryRow.length;
  }
  return {numPrimary, numSecondary};
};

getSearchConfig = function(numSolutions, constraints) {
  var numPrimary, numSecondary;
  ({numPrimary, numSecondary} = getParams(constraints[0]));
  ({
    sparseConstraints: (Row < T && T > (constraints.map((c) => {
      var coveredColumns, data;
      data = c.data;
      coveredColumns = [];
      if (isSimpleConstraint(c)) {
        coveredColumns = binaryToSparseRow(c.row);
      } else if (isComplexConstraint(c)) {
        coveredColumns = binaryToSparseRow(c.primaryRow).concat(binaryToSparseRow(c.secondaryRow, numPrimary));
      }
      return {data, coveredColumns};
    })))
  });
  return {
    numPrimary,
    numSecondary,
    numSolutions,
    rows: sparseConstraints
  };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcdXRpbHMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7QUFBQSxJQUFBLGlCQUFBLEVBQUEsU0FBQSxFQUFBLGVBQUEsRUFBQSxtQkFBQSxFQUFBOztBQU1BLGtCQUFBLEdBQXFCLFFBQUEsQ0FBQyxHQUFELENBQUE7QUFBUyxTQUFPLEdBQUcsQ0FBQyxHQUFKLEtBQVc7QUFBM0I7O0FBQ3JCLG1CQUFBLEdBQXNCLFFBQUEsQ0FBQyxHQUFELENBQUE7QUFBUyxTQUFPLEdBQUcsQ0FBQyxVQUFKLEtBQWtCLE1BQWxCLElBQWdDLEdBQUcsQ0FBQyxZQUFKLEtBQW9CO0FBQXBFLEVBUHRCOzs7QUFXQSxpQkFBQSxHQUFxQixRQUFBLENBQUMsU0FBRCxFQUFZLFNBQVMsQ0FBckIsQ0FBQTtBQUNwQixNQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQTtFQUFBLFNBQUEsR0FBWTtBQUNaO0VBQUEsS0FBQSxxQ0FBQTs7SUFDQyxJQUFHLFNBQVUsQ0FBQSxDQUFBLENBQVYsS0FBZ0IsQ0FBbkI7TUFDQyxTQUFTLENBQUMsSUFBVixDQUFlLENBQUEsR0FBSSxNQUFuQixFQUREOztFQUREO0FBR0EsU0FBTztBQUxhOztBQU9yQixTQUFBLEdBQWEsUUFBQSxDQUFDLFVBQUQsQ0FBQTtBQUNaLE1BQUEsVUFBQSxFQUFBO0VBQUEsVUFBQSxHQUFhO0VBQ2IsWUFBQSxHQUFlO0VBRWYsSUFBSSxrQkFBQSxDQUFtQixVQUFuQixDQUFKO0lBQ0MsVUFBQSxHQUFhLFVBQVUsQ0FBQyxHQUFHLENBQUMsT0FEN0I7R0FBQSxNQUVLLElBQUksbUJBQUEsQ0FBb0IsVUFBcEIsQ0FBSjtJQUNKLFVBQUEsR0FBYSxVQUFVLENBQUMsVUFBVSxDQUFDO0lBQ25DLFlBQUEsR0FBZSxVQUFVLENBQUMsWUFBWSxDQUFDLE9BRm5DOztBQUlMLFNBQU8sQ0FDTixVQURNLEVBRU4sWUFGTTtBQVZLOztBQWViLGVBQUEsR0FBa0IsUUFBQSxDQUFDLFlBQUQsRUFBZSxXQUFmLENBQUE7QUFDakIsTUFBQSxVQUFBLEVBQUE7RUFBQSxDQUFBLENBQUUsVUFBRixFQUFjLFlBQWQsQ0FBQSxHQUErQixTQUFBLENBQVUsV0FBWSxDQUFBLENBQUEsQ0FBdEIsQ0FBL0I7RUFDQSxDQUFBO0lBQUEsaUJBQUEsRUFBbUIsQ0FBQSxHQUFBLEdBQUksQ0FBSixJQUFJLENBQUosR0FBTSxDQUFLLFdBQVcsQ0FBQyxHQUFaLENBQWdCLENBQUMsQ0FBRCxDQUFBLEdBQUE7QUFDN0MsVUFBQSxjQUFBLEVBQUE7TUFBQSxJQUFBLEdBQU8sQ0FBQyxDQUFDO01BQ1QsY0FBQSxHQUFnQjtNQUNoQixJQUFJLGtCQUFBLENBQW1CLENBQW5CLENBQUo7UUFDQyxjQUFBLEdBQWlCLGlCQUFBLENBQWtCLENBQUMsQ0FBQyxHQUFwQixFQURsQjtPQUFBLE1BRUssSUFBSSxtQkFBQSxDQUFvQixDQUFwQixDQUFKO1FBQ0osY0FBQSxHQUFpQixpQkFBQSxDQUFrQixDQUFDLENBQUMsVUFBcEIsQ0FBK0IsQ0FBQyxNQUFoQyxDQUF1QyxpQkFBQSxDQUFrQixDQUFDLENBQUMsWUFBcEIsRUFBa0MsVUFBbEMsQ0FBdkMsRUFEYjs7QUFHTCxhQUFPLENBQ04sSUFETSxFQUVOLGNBRk07SUFSc0MsQ0FBaEIsQ0FBTCxDQUFOO0VBQW5CLENBQUE7QUFjQSxTQUFPO0lBQ04sVUFETTtJQUVOLFlBRk07SUFHTixZQUhNO0lBSU4sSUFBQSxFQUFNO0VBSkE7QUFoQlUiLCJzb3VyY2VzQ29udGVudCI6WyIjaW1wb3J0IENvbnN0cmFpbnQgIGZyb20gJy4vaW50ZXJmYWNlcydcclxuI2ltcG9ydCBSb3cgZnJvbSAnLi9pbnRlcmZhY2VzJ1xyXG4jIGltcG9ydCBpc1NpbXBsZUNvbnN0cmFpbnQgZnJvbSAnLi9pbnRlcmZhY2VzJ1xyXG4jIGltcG9ydCBpc0NvbXBsZXhDb25zdHJhaW50IGZyb20gJy4vaW50ZXJmYWNlcydcclxuI2ltcG9ydCBTZWFyY2hDb25maWcgIGZyb20gJy4vaW50ZXJmYWNlcydcclxuXHJcbmlzU2ltcGxlQ29uc3RyYWludCA9IChhcmcpIC0+IHJldHVybiBhcmcucm93ICE9IHVuZGVmaW5lZCBcclxuaXNDb21wbGV4Q29uc3RyYWludCA9IChhcmcpIC0+IHJldHVybiBhcmcucHJpbWFyeVJvdyAhPSB1bmRlZmluZWQgYW5kIGFyZy5zZWNvbmRhcnlSb3cgIT0gdW5kZWZpbmVkXHJcblxyXG4jIHR5cGUgQmluYXJ5SW50ID0gMCB8IDEgXHJcblxyXG5iaW5hcnlUb1NwYXJzZVJvdyAgPSAoYmluYXJ5Um93LCBvZmZzZXQgPSAwKSAtPlxyXG5cdHNwYXJzZVJvdyA9IFtdXHJcblx0Zm9yIGkgaW4gcmFuZ2UgYmluYXJ5Um93Lmxlbmd0aFxyXG5cdFx0aWYgYmluYXJ5Um93W2ldID09IDFcclxuXHRcdFx0c3BhcnNlUm93LnB1c2goaSArIG9mZnNldClcclxuXHRyZXR1cm4gc3BhcnNlUm93XHJcblxyXG5nZXRQYXJhbXMgID0gKGNvbnN0cmFpbnQpIC0+XHJcblx0bnVtUHJpbWFyeSA9IDBcclxuXHRudW1TZWNvbmRhcnkgPSAwXHJcblxyXG5cdGlmIChpc1NpbXBsZUNvbnN0cmFpbnQoY29uc3RyYWludCkpIFxyXG5cdFx0bnVtUHJpbWFyeSA9IGNvbnN0cmFpbnQucm93Lmxlbmd0aFxyXG5cdGVsc2UgaWYgKGlzQ29tcGxleENvbnN0cmFpbnQoY29uc3RyYWludCkpIFxyXG5cdFx0bnVtUHJpbWFyeSA9IGNvbnN0cmFpbnQucHJpbWFyeVJvdy5sZW5ndGhcclxuXHRcdG51bVNlY29uZGFyeSA9IGNvbnN0cmFpbnQuc2Vjb25kYXJ5Um93Lmxlbmd0aFxyXG5cclxuXHRyZXR1cm4ge1xyXG5cdFx0bnVtUHJpbWFyeSxcclxuXHRcdG51bVNlY29uZGFyeVxyXG5cdH1cclxuXHJcbmdldFNlYXJjaENvbmZpZyA9IChudW1Tb2x1dGlvbnMsIGNvbnN0cmFpbnRzKSAtPlxyXG5cdHsgbnVtUHJpbWFyeSwgbnVtU2Vjb25kYXJ5IH0gPSBnZXRQYXJhbXMoY29uc3RyYWludHNbMF0pXHJcblx0c3BhcnNlQ29uc3RyYWludHM6IFJvdzxUPltdID0gY29uc3RyYWludHMubWFwKChjKSA9PiBcclxuXHRcdGRhdGEgPSBjLmRhdGFcclxuXHRcdGNvdmVyZWRDb2x1bW5zPSBbXVxyXG5cdFx0aWYgKGlzU2ltcGxlQ29uc3RyYWludChjKSkgXHJcblx0XHRcdGNvdmVyZWRDb2x1bW5zID0gYmluYXJ5VG9TcGFyc2VSb3coYy5yb3cpXHJcblx0XHRlbHNlIGlmIChpc0NvbXBsZXhDb25zdHJhaW50KGMpKSBcclxuXHRcdFx0Y292ZXJlZENvbHVtbnMgPSBiaW5hcnlUb1NwYXJzZVJvdyhjLnByaW1hcnlSb3cpLmNvbmNhdChiaW5hcnlUb1NwYXJzZVJvdyhjLnNlY29uZGFyeVJvdywgbnVtUHJpbWFyeSkpXHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0ZGF0YSxcclxuXHRcdFx0Y292ZXJlZENvbHVtbnNcclxuXHRcdH1cclxuXHQpXHJcblxyXG5cdHJldHVybiB7XHJcblx0XHRudW1QcmltYXJ5LFxyXG5cdFx0bnVtU2Vjb25kYXJ5LFxyXG5cdFx0bnVtU29sdXRpb25zLFxyXG5cdFx0cm93czogc3BhcnNlQ29uc3RyYWludHNcclxuXHR9Il19
//# sourceURL=c:\github\2020\037-Queens-dlx\coffee\utils.coffee