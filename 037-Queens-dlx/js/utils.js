// Generated by CoffeeScript 2.4.1
var binaryToSparseRow, getParams, getSearchConfig, isComplexConstraint, isSimpleConstraint, range;

range = function(n) {
  return (function() {
    var results = [];
    for (var j = 0; 0 <= n ? j < n : j > n; 0 <= n ? j++ : j--){ results.push(j); }
    return results;
  }).apply(this);
};

isSimpleConstraint = function(arg) {
  return arg.row !== void 0;
};

isComplexConstraint = function(arg) {
  return arg.primaryRow !== void 0 && arg.secondaryRow !== void 0;
};

binaryToSparseRow = function(binaryRow, offset = 0) {
  var i, j, len, ref, sparseRow;
  sparseRow = [];
  ref = range(binaryRow.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    if (binaryRow[i] === 1) {
      sparseRow.push(i + offset);
    }
  }
  return sparseRow;
};

getParams = function(constraint) {
  var numPrimary, numSecondary;
  numPrimary = 0;
  numSecondary = 0;
  if (isSimpleConstraint(constraint)) {
    numPrimary = constraint.row.length;
  } else if (isComplexConstraint(constraint)) {
    numPrimary = constraint.primaryRow.length;
    numSecondary = constraint.secondaryRow.length;
  }
  return {numPrimary, numSecondary};
};

getSearchConfig = function(numSolutions, constraints) {
  var numPrimary, numSecondary, sparseConstraints, start;
  ({numPrimary, numSecondary} = getParams(constraints[0]));
  start = new Date();
  sparseConstraints = constraints.map((c) => {
    var coveredColumns, data;
    data = c.data;
    coveredColumns = [];
    if (isSimpleConstraint(c)) {
      coveredColumns = binaryToSparseRow(c.row);
    } else if (isComplexConstraint(c)) {
      coveredColumns = binaryToSparseRow(c.primaryRow).concat(binaryToSparseRow(c.secondaryRow, numPrimary));
    }
    return {data, coveredColumns};
  });
  console.log('getSearchConfig', (new Date()) - start);
  return {
    numPrimary,
    numSecondary,
    numSolutions,
    rows: sparseConstraints
  };
};

module.exports = {getSearchConfig, range};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcdXRpbHMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLGlCQUFBLEVBQUEsU0FBQSxFQUFBLGVBQUEsRUFBQSxtQkFBQSxFQUFBLGtCQUFBLEVBQUE7O0FBQUEsS0FBQSxHQUFRLFFBQUEsQ0FBQyxDQUFELENBQUE7U0FBTzs7Ozs7QUFBUDs7QUFFUixrQkFBQSxHQUFxQixRQUFBLENBQUMsR0FBRCxDQUFBO0FBQVMsU0FBTyxHQUFHLENBQUMsR0FBSixLQUFXO0FBQTNCOztBQUNyQixtQkFBQSxHQUFzQixRQUFBLENBQUMsR0FBRCxDQUFBO0FBQVMsU0FBTyxHQUFHLENBQUMsVUFBSixLQUFrQixNQUFsQixJQUFnQyxHQUFHLENBQUMsWUFBSixLQUFvQjtBQUFwRTs7QUFFdEIsaUJBQUEsR0FBcUIsUUFBQSxDQUFDLFNBQUQsRUFBWSxTQUFTLENBQXJCLENBQUE7QUFDcEIsTUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUE7RUFBQSxTQUFBLEdBQVk7QUFDWjtFQUFBLEtBQUEscUNBQUE7O0lBQ0MsSUFBRyxTQUFVLENBQUEsQ0FBQSxDQUFWLEtBQWdCLENBQW5CO01BQ0MsU0FBUyxDQUFDLElBQVYsQ0FBZSxDQUFBLEdBQUksTUFBbkIsRUFERDs7RUFERDtBQUdBLFNBQU87QUFMYTs7QUFPckIsU0FBQSxHQUFhLFFBQUEsQ0FBQyxVQUFELENBQUE7QUFDWixNQUFBLFVBQUEsRUFBQTtFQUFBLFVBQUEsR0FBYTtFQUNiLFlBQUEsR0FBZTtFQUVmLElBQUksa0JBQUEsQ0FBbUIsVUFBbkIsQ0FBSjtJQUNDLFVBQUEsR0FBYSxVQUFVLENBQUMsR0FBRyxDQUFDLE9BRDdCO0dBQUEsTUFFSyxJQUFJLG1CQUFBLENBQW9CLFVBQXBCLENBQUo7SUFDSixVQUFBLEdBQWEsVUFBVSxDQUFDLFVBQVUsQ0FBQztJQUNuQyxZQUFBLEdBQWUsVUFBVSxDQUFDLFlBQVksQ0FBQyxPQUZuQzs7QUFJTCxTQUFPLENBQ04sVUFETSxFQUVOLFlBRk07QUFWSzs7QUFlYixlQUFBLEdBQWtCLFFBQUEsQ0FBQyxZQUFELEVBQWUsV0FBZixDQUFBO0FBQ2pCLE1BQUEsVUFBQSxFQUFBLFlBQUEsRUFBQSxpQkFBQSxFQUFBO0VBQUEsQ0FBQSxDQUFFLFVBQUYsRUFBYyxZQUFkLENBQUEsR0FBK0IsU0FBQSxDQUFVLFdBQVksQ0FBQSxDQUFBLENBQXRCLENBQS9CO0VBQ0EsS0FBQSxHQUFRLElBQUksSUFBSixDQUFBO0VBQ1IsaUJBQUEsR0FBb0IsV0FBVyxDQUFDLEdBQVosQ0FBZ0IsQ0FBQyxDQUFELENBQUEsR0FBQTtBQUNuQyxRQUFBLGNBQUEsRUFBQTtJQUFBLElBQUEsR0FBTyxDQUFDLENBQUM7SUFDVCxjQUFBLEdBQWdCO0lBQ2hCLElBQUksa0JBQUEsQ0FBbUIsQ0FBbkIsQ0FBSjtNQUNDLGNBQUEsR0FBaUIsaUJBQUEsQ0FBa0IsQ0FBQyxDQUFDLEdBQXBCLEVBRGxCO0tBQUEsTUFFSyxJQUFJLG1CQUFBLENBQW9CLENBQXBCLENBQUo7TUFDSixjQUFBLEdBQWlCLGlCQUFBLENBQWtCLENBQUMsQ0FBQyxVQUFwQixDQUErQixDQUFDLE1BQWhDLENBQXVDLGlCQUFBLENBQWtCLENBQUMsQ0FBQyxZQUFwQixFQUFrQyxVQUFsQyxDQUF2QyxFQURiOztBQUdMLFdBQU8sQ0FDTixJQURNLEVBRU4sY0FGTTtFQVI0QixDQUFoQjtFQWFwQixPQUFPLENBQUMsR0FBUixDQUFZLGlCQUFaLEVBQThCLENBQUMsSUFBSSxJQUFKLENBQUEsQ0FBRCxDQUFBLEdBQWEsS0FBM0M7QUFFQSxTQUFPO0lBQ04sVUFETTtJQUVOLFlBRk07SUFHTixZQUhNO0lBSU4sSUFBQSxFQUFNO0VBSkE7QUFsQlU7O0FBeUJsQixNQUFNLENBQUMsT0FBUCxHQUFpQixDQUFDLGVBQUQsRUFBa0IsS0FBbEIiLCJzb3VyY2VzQ29udGVudCI6WyJyYW5nZSA9IChuKSAtPiBbMC4uLm5dXHJcblxyXG5pc1NpbXBsZUNvbnN0cmFpbnQgPSAoYXJnKSAtPiByZXR1cm4gYXJnLnJvdyAhPSB1bmRlZmluZWRcclxuaXNDb21wbGV4Q29uc3RyYWludCA9IChhcmcpIC0+IHJldHVybiBhcmcucHJpbWFyeVJvdyAhPSB1bmRlZmluZWQgYW5kIGFyZy5zZWNvbmRhcnlSb3cgIT0gdW5kZWZpbmVkXHJcblxyXG5iaW5hcnlUb1NwYXJzZVJvdyAgPSAoYmluYXJ5Um93LCBvZmZzZXQgPSAwKSAtPlxyXG5cdHNwYXJzZVJvdyA9IFtdXHJcblx0Zm9yIGkgaW4gcmFuZ2UgYmluYXJ5Um93Lmxlbmd0aFxyXG5cdFx0aWYgYmluYXJ5Um93W2ldID09IDFcclxuXHRcdFx0c3BhcnNlUm93LnB1c2goaSArIG9mZnNldClcclxuXHRyZXR1cm4gc3BhcnNlUm93XHJcblxyXG5nZXRQYXJhbXMgID0gKGNvbnN0cmFpbnQpIC0+XHJcblx0bnVtUHJpbWFyeSA9IDBcclxuXHRudW1TZWNvbmRhcnkgPSAwXHJcblxyXG5cdGlmIChpc1NpbXBsZUNvbnN0cmFpbnQoY29uc3RyYWludCkpIFxyXG5cdFx0bnVtUHJpbWFyeSA9IGNvbnN0cmFpbnQucm93Lmxlbmd0aFxyXG5cdGVsc2UgaWYgKGlzQ29tcGxleENvbnN0cmFpbnQoY29uc3RyYWludCkpIFxyXG5cdFx0bnVtUHJpbWFyeSA9IGNvbnN0cmFpbnQucHJpbWFyeVJvdy5sZW5ndGhcclxuXHRcdG51bVNlY29uZGFyeSA9IGNvbnN0cmFpbnQuc2Vjb25kYXJ5Um93Lmxlbmd0aFxyXG5cclxuXHRyZXR1cm4ge1xyXG5cdFx0bnVtUHJpbWFyeSxcclxuXHRcdG51bVNlY29uZGFyeVxyXG5cdH1cclxuXHJcbmdldFNlYXJjaENvbmZpZyA9IChudW1Tb2x1dGlvbnMsIGNvbnN0cmFpbnRzKSAtPlxyXG5cdHsgbnVtUHJpbWFyeSwgbnVtU2Vjb25kYXJ5IH0gPSBnZXRQYXJhbXMoY29uc3RyYWludHNbMF0pXHJcblx0c3RhcnQgPSBuZXcgRGF0ZSgpXHJcblx0c3BhcnNlQ29uc3RyYWludHMgPSBjb25zdHJhaW50cy5tYXAoKGMpID0+IFxyXG5cdFx0ZGF0YSA9IGMuZGF0YVxyXG5cdFx0Y292ZXJlZENvbHVtbnM9IFtdXHJcblx0XHRpZiAoaXNTaW1wbGVDb25zdHJhaW50KGMpKSBcclxuXHRcdFx0Y292ZXJlZENvbHVtbnMgPSBiaW5hcnlUb1NwYXJzZVJvdyhjLnJvdylcclxuXHRcdGVsc2UgaWYgKGlzQ29tcGxleENvbnN0cmFpbnQoYykpIFxyXG5cdFx0XHRjb3ZlcmVkQ29sdW1ucyA9IGJpbmFyeVRvU3BhcnNlUm93KGMucHJpbWFyeVJvdykuY29uY2F0KGJpbmFyeVRvU3BhcnNlUm93KGMuc2Vjb25kYXJ5Um93LCBudW1QcmltYXJ5KSlcclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRkYXRhLFxyXG5cdFx0XHRjb3ZlcmVkQ29sdW1uc1xyXG5cdFx0fVxyXG5cdClcclxuXHRjb25zb2xlLmxvZyAnZ2V0U2VhcmNoQ29uZmlnJywobmV3IERhdGUoKSktc3RhcnRcclxuXHJcblx0cmV0dXJuIHtcclxuXHRcdG51bVByaW1hcnksXHJcblx0XHRudW1TZWNvbmRhcnksXHJcblx0XHRudW1Tb2x1dGlvbnMsXHJcblx0XHRyb3dzOiBzcGFyc2VDb25zdHJhaW50c1xyXG5cdH1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge2dldFNlYXJjaENvbmZpZywgcmFuZ2V9Il19
//# sourceURL=c:\github\2020\037-Queens-dlx\coffee\utils.coffee