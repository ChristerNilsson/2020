// Generated by CoffeeScript 2.4.1
//import Constraint from './js/interfaces'
//import SearchConfig from './js/interfaces'

//import search from './js/index'
//import getSearchConfig from './js/utils'

// /**
//  * Knuth's Dancing Links
//  * Original paper: https://arxiv.org/pdf/cs/0011047.pdf
//  * Implementation ported from: https://github.com/shreevatsa/knuth-literate-programs/blob/master/programs/dance.pdf
//  *
//  * Code runs in a state machine in order to avoid recursion
//  * and in order to work around the lack of `goto` in JS
//  */

// import { Column, Node, Result, SearchConfig } from './interfaces'
var SearchState, binaryToSparseRow, data, find, findAll, findOne, findRaw, getParams, getSearchConfig, i, isComplexConstraint, isSimpleConstraint, j, len, makeData, oneSolution, queens16, queens8, range, ref, search, start, sudoku1;

range = function(n) {
  return (function() {
    var results1 = [];
    for (var j = 0; 0 <= n ? j < n : j > n; 0 <= n ? j++ : j--){ results1.push(j); }
    return results1;
  }).apply(this);
};

SearchState = {
  FORWARD: 0,
  ADVANCE: 1,
  BACKUP: 2,
  RECOVER: 3,
  DONE: 4
};

search = function(config) {
  var advance, backup, bestCol, choice, colArray, cover, currentNode, currentSearchState, currentStateMethod, done, forward, level, nodeArray, numPrimary, numSecondary, numSolutions, pickBestColum, readColumnNames, readRows, recordSolution, recover, root, rows, running, solutions, stateMethods, uncover;
  ({numSolutions, numPrimary, numSecondary, rows} = config);
  //console.log 'search',numSolutions, numPrimary, numSecondary, rows
  root = {};
  colArray = [root];
  nodeArray = [];
  solutions = [];
  currentSearchState = SearchState.FORWARD;
  running = true;
  level = 0;
  choice = [];
  bestCol = null;
  currentNode = null;
  readColumnNames = function() {
    var column, curColIndex, head, i, j, k, lastCol, len, len1, ref, ref1, results1;
    //console.log 'readColumnNames',colArray
    // Skip root node
    curColIndex = 1;
    ref = range(numPrimary);
    //(let i = 0; i < numPrimary; i++) {
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      head = {};
      head.up = head;
      head.down = head;
      column = {
        len: 0,
        head
      };
      column.prev = colArray[curColIndex - 1];
      colArray[curColIndex - 1].next = column;
      colArray[curColIndex] = column;
      curColIndex = curColIndex + 1;
    }
    lastCol = colArray[curColIndex - 1];
    // Link the last primary constraint to wrap back into the root
    lastCol.next = root;
    root.prev = lastCol;
    ref1 = range(numSecondary);
    results1 = [];
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      i = ref1[k];
      head = {};
      head.up = head;
      head.down = head;
      column = {
        head,
        len: 0
      };
      column.prev = column;
      column.next = column;
      colArray[curColIndex] = column;
      results1.push(curColIndex = curColIndex + 1);
    }
    return results1;
  };
  //console.log 'colArray',colArray
  readRows = function() {
    var col, columnIndex, curNodeIndex, i, j, k, len, len1, node, ref, ref1, results1, row, rowStart;
    //console.log 'readRows'
    curNodeIndex = 0;
    ref = range(rows.length);
    results1 = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      //console.log 'i',i
      row = rows[i];
      rowStart = void 0;
      ref1 = row.coveredColumns;
      // of
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        columnIndex = ref1[k];
        //console.log 'columnIndex',columnIndex
        //console.log 'row.coveredColumns',row.coveredColumns
        node = {};
        node.left = node;
        node.right = node;
        node.down = node;
        node.up = node;
        node.index = i;
        node.data = row.data;
        //console.log 'node',node
        nodeArray[curNodeIndex] = node;
        if (!rowStart) {
          rowStart = node;
        } else {
          node.left = nodeArray[curNodeIndex - 1];
          nodeArray[curNodeIndex - 1].right = node;
        }
        col = colArray[columnIndex + 1];
        //console.log 'col',col
        node.col = col;
        node.up = col.head.up;
        col.head.up.down = node;
        col.head.up = node;
        node.down = col.head;
        col.len = col.len + 1;
        curNodeIndex = curNodeIndex + 1;
      }
      rowStart.left = nodeArray[curNodeIndex - 1];
      results1.push(nodeArray[curNodeIndex - 1].right = rowStart);
    }
    return results1;
  };
  //console.log 'readRows Done'
  cover = function(c) {
    var dd, l, nn, r, results1, rr, uu;
    l = c.prev;
    r = c.next;
    // Unlink column
    l.next = r;
    r.prev = l;
    // From to to bottom, left to right unlink every row node from its column
    rr = c.head.down;
    results1 = [];
    while (rr !== c.head) {
      nn = rr.right;
      while (nn !== rr) {
        uu = nn.up;
        dd = nn.down;
        uu.down = dd;
        dd.up = uu;
        nn.col.len -= 1;
        nn = nn.right;
      }
      results1.push(rr = rr.down);
    }
    return results1;
  };
  uncover = function(c) {
    var dd, l, nn, r, rr, uu;
    // From bottom to top, right to left relink every row node to its column
    rr = c.head.up;
    while (rr !== c.head) {
      nn = rr.left;
      while (nn !== rr) {
        uu = nn.up;
        dd = nn.down;
        uu.down = nn;
        dd.up = nn;
        nn.col.len += 1;
        nn = nn.left;
      }
      rr = rr.up;
    }
    l = c.prev;
    r = c.next;
    // Unlink column
    l.next = c;
    return r.prev = c;
  };
  pickBestColum = function() {
    var curCol, length, lowest, lowestLen;
    lowestLen = root.next.len;
    lowest = root.next;
    curCol = root.next;
    while (curCol !== root) {
      length = curCol.len;
      if (length < lowestLen) {
        lowestLen = length;
        lowest = curCol;
      }
      curCol = curCol.next;
    }
    return bestCol = lowest;
  };
  forward = function() {
    //console.log 'forward'
    pickBestColum();
    cover(bestCol);
    currentNode = bestCol.head.down;
    choice[level] = currentNode;
    return currentSearchState = SearchState.ADVANCE;
  };
  recordSolution = function() {
    var j, l, len, node, ref, results;
    results = [];
    ref = range(level + 1);
    //(let l = 0; l <= level; l++) {
    for (j = 0, len = ref.length; j < len; j++) {
      l = ref[j];
      node = choice[l];
      results.push({
        index: node.index,
        data: node.data
      });
    }
    return solutions.push(results);
  };
  advance = function() {
    var pp;
    //console.log 'advance'
    if (currentNode === bestCol.head) {
      currentSearchState = SearchState.BACKUP;
      return;
    }
    pp = currentNode.right;
    while (pp !== currentNode) {
      cover(pp.col);
      pp = pp.right;
    }
    if (root.next === root) {
      recordSolution();
      if (solutions.length === numSolutions) {
        currentSearchState = SearchState.DONE;
      } else {
        currentSearchState = SearchState.RECOVER;
      }
      return;
    }
    level = level + 1;
    return currentSearchState = SearchState.FORWARD;
  };
  backup = function() {
    //console.log 'backup'
    uncover(bestCol);
    if (level === 0) {
      currentSearchState = SearchState.DONE;
      return;
    }
    level = level - 1;
    currentNode = choice[level];
    bestCol = currentNode.col;
    return currentSearchState = SearchState.RECOVER;
  };
  recover = function() {
    var pp;
    //console.log 'recover'
    pp = currentNode.left;
    while (pp !== currentNode) {
      uncover(pp.col);
      pp = pp.left;
    }
    currentNode = currentNode.down;
    choice[level] = currentNode;
    return currentSearchState = SearchState.ADVANCE;
  };
  done = function() {
    //console.log 'done'
    return running = false;
  };
  stateMethods = {
    [SearchState.FORWARD]: forward,
    [SearchState.ADVANCE]: advance,
    [SearchState.BACKUP]: backup,
    [SearchState.RECOVER]: recover,
    [SearchState.DONE]: done
  };
  //console.log 'stateMethods',stateMethods
  readColumnNames();
  readRows();
  while (running) {
    //console.log 'currentSearchState',currentSearchState
    currentStateMethod = stateMethods[currentSearchState];
    currentStateMethod();
  }
  return solutions;
};

//export { search }
isSimpleConstraint = function(arg) {
  return arg.row !== void 0;
};

isComplexConstraint = function(arg) {
  return arg.primaryRow !== void 0 && arg.secondaryRow !== void 0;
};

// type BinaryInt = 0 | 1 
binaryToSparseRow = function(binaryRow, offset = 0) {
  var i, j, len, ref, sparseRow;
  sparseRow = [];
  ref = range(binaryRow.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    if (binaryRow[i] === 1) {
      sparseRow.push(i + offset);
    }
  }
  return sparseRow;
};

getParams = function(constraint) {
  var numPrimary, numSecondary;
  numPrimary = 0;
  numSecondary = 0;
  if (isSimpleConstraint(constraint)) {
    numPrimary = constraint.row.length;
  } else if (isComplexConstraint(constraint)) {
    numPrimary = constraint.primaryRow.length;
    numSecondary = constraint.secondaryRow.length;
  }
  return {numPrimary, numSecondary};
};

getSearchConfig = function(numSolutions, constraints) {
  var numPrimary, numSecondary, sparseConstraints;
  //console.log 'getSearchConfig',numSolutions,constraints
  ({numPrimary, numSecondary} = getParams(constraints[0]));
  //console.log numPrimary,numSecondary
  sparseConstraints = constraints.map((c) => {
    var coveredColumns, data;
    data = c.data;
    coveredColumns = [];
    if (isSimpleConstraint(c)) {
      coveredColumns = binaryToSparseRow(c.row);
    } else if (isComplexConstraint(c)) {
      coveredColumns = binaryToSparseRow(c.primaryRow).concat(binaryToSparseRow(c.secondaryRow, numPrimary));
    }
    //console.log 'data',data
    //console.log 'coveredColumns',coveredColumns
    return {data, coveredColumns};
  });
  return {
    numPrimary,
    numSecondary,
    numSolutions,
    rows: sparseConstraints
  };
};

findAll = function(constraints) {
  return search(getSearchConfig(2e308, constraints));
};

findOne = function(constraints) {
  return search(getSearchConfig(1, constraints));
};

find = function(constraints, numSolutions) {
  return search(getSearchConfig(numSolutions, constraints));
};

findRaw = function(config) {
  return search(config);
};

//export { Constraint, SimpleConstraint, ComplexConstraint, SearchConfig, Row, Result } from './lib/interfaces'

//#############################

// constraints = [
// 	{
// 		data: 'first one',
// 		primaryRow: [1,0],
// 		secondaryRow: [1]
// 	},
// 	{
// 		data: 'second one',
// 		primaryRow: [0,1],
// 		secondaryRow: [0]
// 	},
// 	{
// 		data: 'third one',
// 		primaryRow: [0,1],
// 		secondaryRow: [1]
// 	}
// ]

// constraints = [
// 	{data: 0,row: [0,0,1,0,1,0,0]},
// 	{data: 1,row: [1,0,0,1,0,0,1]},
// 	{data: 2,row: [0,1,1,0,0,1,0]},
// 	{data: 3,row: [1,0,0,1,0,1,0]},
// 	{data: 4,row: [0,1,0,0,0,0,1]},
// 	{data: 5,row: [0,0,0,1,1,0,1]},
// ]
// oneSolution = findOne constraints
// console.log oneSolution
queens8 = '| This data produced by queens-dlx 8\nr4 c4 r3 c3 r5 c5 r2 c2 r6 c6 r1 c1 r7 c7 r0 c0 | a0 b0 a1 b1 a2 b2 a3 b3 a4 b4 a5 b5 a6 b6 a7 b7 a8 b8 a9 b9 aa ba ab bb ac bc ad bd\nr0 c0 a0 b7\nr0 c1 a1 b8\nr0 c2 a2 b9\nr0 c3 a3 ba\nr0 c4 a4 bb\nr0 c5 a5 bc\nr0 c6 a6 bd\nr0 c7 a7\nr1 c0 a1 b6\nr1 c1 a2 b7\nr1 c2 a3 b8\nr1 c3 a4 b9\nr1 c4 a5 ba\nr1 c5 a6 bb\nr1 c6 a7 bc\nr1 c7 a8 bd\nr2 c0 a2 b5\nr2 c1 a3 b6\nr2 c2 a4 b7\nr2 c3 a5 b8\nr2 c4 a6 b9\nr2 c5 a7 ba\nr2 c6 a8 bb\nr2 c7 a9 bc\nr3 c0 a3 b4\nr3 c1 a4 b5\nr3 c2 a5 b6\nr3 c3 a6 b7\nr3 c4 a7 b8\nr3 c5 a8 b9\nr3 c6 a9 ba\nr3 c7 aa bb\nr4 c0 a4 b3\nr4 c1 a5 b4\nr4 c2 a6 b5\nr4 c3 a7 b6\nr4 c4 a8 b7\nr4 c5 a9 b8\nr4 c6 aa b9\nr4 c7 ab ba\nr5 c0 a5 b2\nr5 c1 a6 b3\nr5 c2 a7 b4\nr5 c3 a8 b5\nr5 c4 a9 b6\nr5 c5 aa b7\nr5 c6 ab b8\nr5 c7 ac b9\nr6 c0 a6 b1\nr6 c1 a7 b2\nr6 c2 a8 b3\nr6 c3 a9 b4\nr6 c4 aa b5\nr6 c5 ab b6\nr6 c6 ac b7\nr6 c7 ad b8\nr7 c0 a7 b0\nr7 c1 a8 b1\nr7 c2 a9 b2\nr7 c3 aa b3\nr7 c4 ab b4\nr7 c5 ac b5\nr7 c6 ad b6\nr7 c7 b7';

queens16 = '| This data produced by queens-dlx 16\nr8 c8 r7 c7 r9 c9 r6 c6 ra ca r5 c5 rb cb r4 c4 rc cc r3 c3 rd cd r2 c2 re ce r1 c1 rf cf r0 c0 | a0 b0 a1 b1 a2 b2 a3 b3 a4 b4 a5 b5 a6 b6 a7 b7 a8 b8 a9 b9 aa ba ab bb ac bc ad bd ae be af bf ag bg ah bh ai bi aj bj ak bk al bl am bm an bn ao bo ap bp aq bq ar br as bs at bt\nr0 c0 a0 bf\nr0 c1 a1 bg\nr0 c2 a2 bh\nr0 c3 a3 bi\nr0 c4 a4 bj\nr0 c5 a5 bk\nr0 c6 a6 bl\nr0 c7 a7 bm\nr0 c8 a8 bn\nr0 c9 a9 bo\nr0 ca aa bp\nr0 cb ab bq\nr0 cc ac br\nr0 cd ad bs\nr0 ce ae bt\nr0 cf af\nr1 c0 a1 be\nr1 c1 a2 bf\nr1 c2 a3 bg\nr1 c3 a4 bh\nr1 c4 a5 bi\nr1 c5 a6 bj\nr1 c6 a7 bk\nr1 c7 a8 bl\nr1 c8 a9 bm\nr1 c9 aa bn\nr1 ca ab bo\nr1 cb ac bp\nr1 cc ad bq\nr1 cd ae br\nr1 ce af bs\nr1 cf ag bt\nr2 c0 a2 bd\nr2 c1 a3 be\nr2 c2 a4 bf\nr2 c3 a5 bg\nr2 c4 a6 bh\nr2 c5 a7 bi\nr2 c6 a8 bj\nr2 c7 a9 bk\nr2 c8 aa bl\nr2 c9 ab bm\nr2 ca ac bn\nr2 cb ad bo\nr2 cc ae bp\nr2 cd af bq\nr2 ce ag br\nr2 cf ah bs\nr3 c0 a3 bc\nr3 c1 a4 bd\nr3 c2 a5 be\nr3 c3 a6 bf\nr3 c4 a7 bg\nr3 c5 a8 bh\nr3 c6 a9 bi\nr3 c7 aa bj\nr3 c8 ab bk\nr3 c9 ac bl\nr3 ca ad bm\nr3 cb ae bn\nr3 cc af bo\nr3 cd ag bp\nr3 ce ah bq\nr3 cf ai br\nr4 c0 a4 bb\nr4 c1 a5 bc\nr4 c2 a6 bd\nr4 c3 a7 be\nr4 c4 a8 bf\nr4 c5 a9 bg\nr4 c6 aa bh\nr4 c7 ab bi\nr4 c8 ac bj\nr4 c9 ad bk\nr4 ca ae bl\nr4 cb af bm\nr4 cc ag bn\nr4 cd ah bo\nr4 ce ai bp\nr4 cf aj bq\nr5 c0 a5 ba\nr5 c1 a6 bb\nr5 c2 a7 bc\nr5 c3 a8 bd\nr5 c4 a9 be\nr5 c5 aa bf\nr5 c6 ab bg\nr5 c7 ac bh\nr5 c8 ad bi\nr5 c9 ae bj\nr5 ca af bk\nr5 cb ag bl\nr5 cc ah bm\nr5 cd ai bn\nr5 ce aj bo\nr5 cf ak bp\nr6 c0 a6 b9\nr6 c1 a7 ba\nr6 c2 a8 bb\nr6 c3 a9 bc\nr6 c4 aa bd\nr6 c5 ab be\nr6 c6 ac bf\nr6 c7 ad bg\nr6 c8 ae bh\nr6 c9 af bi\nr6 ca ag bj\nr6 cb ah bk\nr6 cc ai bl\nr6 cd aj bm\nr6 ce ak bn\nr6 cf al bo\nr7 c0 a7 b8\nr7 c1 a8 b9\nr7 c2 a9 ba\nr7 c3 aa bb\nr7 c4 ab bc\nr7 c5 ac bd\nr7 c6 ad be\nr7 c7 ae bf\nr7 c8 af bg\nr7 c9 ag bh\nr7 ca ah bi\nr7 cb ai bj\nr7 cc aj bk\nr7 cd ak bl\nr7 ce al bm\nr7 cf am bn\nr8 c0 a8 b7\nr8 c1 a9 b8\nr8 c2 aa b9\nr8 c3 ab ba\nr8 c4 ac bb\nr8 c5 ad bc\nr8 c6 ae bd\nr8 c7 af be\nr8 c8 ag bf\nr8 c9 ah bg\nr8 ca ai bh\nr8 cb aj bi\nr8 cc ak bj\nr8 cd al bk\nr8 ce am bl\nr8 cf an bm\nr9 c0 a9 b6\nr9 c1 aa b7\nr9 c2 ab b8\nr9 c3 ac b9\nr9 c4 ad ba\nr9 c5 ae bb\nr9 c6 af bc\nr9 c7 ag bd\nr9 c8 ah be\nr9 c9 ai bf\nr9 ca aj bg\nr9 cb ak bh\nr9 cc al bi\nr9 cd am bj\nr9 ce an bk\nr9 cf ao bl\nra c0 aa b5\nra c1 ab b6\nra c2 ac b7\nra c3 ad b8\nra c4 ae b9\nra c5 af ba\nra c6 ag bb\nra c7 ah bc\nra c8 ai bd\nra c9 aj be\nra ca ak bf\nra cb al bg\nra cc am bh\nra cd an bi\nra ce ao bj\nra cf ap bk\nrb c0 ab b4\nrb c1 ac b5\nrb c2 ad b6\nrb c3 ae b7\nrb c4 af b8\nrb c5 ag b9\nrb c6 ah ba\nrb c7 ai bb\nrb c8 aj bc\nrb c9 ak bd\nrb ca al be\nrb cb am bf\nrb cc an bg\nrb cd ao bh\nrb ce ap bi\nrb cf aq bj\nrc c0 ac b3\nrc c1 ad b4\nrc c2 ae b5\nrc c3 af b6\nrc c4 ag b7\nrc c5 ah b8\nrc c6 ai b9\nrc c7 aj ba\nrc c8 ak bb\nrc c9 al bc\nrc ca am bd\nrc cb an be\nrc cc ao bf\nrc cd ap bg\nrc ce aq bh\nrc cf ar bi\nrd c0 ad b2\nrd c1 ae b3\nrd c2 af b4\nrd c3 ag b5\nrd c4 ah b6\nrd c5 ai b7\nrd c6 aj b8\nrd c7 ak b9\nrd c8 al ba\nrd c9 am bb\nrd ca an bc\nrd cb ao bd\nrd cc ap be\nrd cd aq bf\nrd ce ar bg\nrd cf as bh\nre c0 ae b1\nre c1 af b2\nre c2 ag b3\nre c3 ah b4\nre c4 ai b5\nre c5 aj b6\nre c6 ak b7\nre c7 al b8\nre c8 am b9\nre c9 an ba\nre ca ao bb\nre cb ap bc\nre cc aq bd\nre cd ar be\nre ce as bf\nre cf at bg\nrf c0 af b0\nrf c1 ag b1\nrf c2 ah b2\nrf c3 ai b3\nrf c4 aj b4\nrf c5 ak b5\nrf c6 al b6\nrf c7 am b7\nrf c8 an b8\nrf c9 ao b9\nrf ca ap ba\nrf cb aq bb\nrf cc ar bc\nrf cd as bd\nrf ce at be\nrf cf bf';

sudoku1 = '| 000005060004900070000003008070006300030009020006048090300500000090004500060200080\np00 p01 p02 p03 p04 p06 p08 p10 p11 p14 p15 p16 p18 p20 p21 p22 p23 p24 p26 p27 p30 p32 p33 p34 p37 p38 p40 p42 p43 p44 p46 p48 p50 p51 p53 p56 p58 p61 p62 p64 p65 p66 p67 p68 p70 p72 p73 p74 p77 p78 p80 p82 p84 p85 p86 p88 r01 r02 r03 r04 r07 r08 r09 r11 r12 r13 r15 r16 r18 r21 r22 r24 r25 r26 r27 r29 r31 r32 r34 r35 r38 r39 r41 r44 r45 r46 r47 r48 r51 r52 r53 r55 r57 r61 r62 r64 r66 r67 r68 r69 r71 r72 r73 r76 r77 r78 r81 r83 r84 r85 r87 r89 c01 c02 c04 c05 c06 c07 c08 c09 c11 c12 c14 c15 c18 c21 c22 c23 c25 c27 c28 c29 c31 c33 c34 c36 c37 c38 c41 c42 c43 c45 c46 c47 c48 c49 c51 c52 c57 c61 c62 c64 c66 c67 c68 c69 c71 c73 c74 c75 c81 c82 c83 c84 c85 c86 c87 c89 b01 b02 b03 b05 b06 b07 b08 b09 b11 b12 b14 b16 b17 b18 b21 b22 b23 b24 b25 b29 b31 b32 b34 b35 b38 b39 b41 b42 b43 b45 b47 b51 b54 b55 b56 b57 b58 b61 b62 b64 b65 b67 b68 b71 b73 b76 b77 b78 b79 b81 b82 b83 b84 b86 b87 b89\np00 r01 c01 b01\np00 r02 c02 b02\np00 r07 c07 b07\np00 r08 c08 b08\np00 r09 c09 b09\np01 r01 c11 b01\np01 r02 c12 b02\np01 r08 c18 b08\np02 r01 c21 b01\np02 r02 c22 b02\np02 r03 c23 b03\np02 r07 c27 b07\np02 r08 c28 b08\np02 r09 c29 b09\np03 r01 c31 b11\np03 r04 c34 b14\np03 r07 c37 b17\np03 r08 c38 b18\np04 r01 c41 b11\np04 r02 c42 b12\np04 r07 c47 b17\np04 r08 c48 b18\np06 r01 c61 b21\np06 r02 c62 b22\np06 r04 c64 b24\np06 r09 c69 b29\np08 r01 c81 b21\np08 r02 c82 b22\np08 r03 c83 b23\np08 r04 c84 b24\np08 r09 c89 b29\np10 r11 c01 b01\np10 r12 c02 b02\np10 r15 c05 b05\np10 r16 c06 b06\np10 r18 c08 b08\np11 r11 c11 b01\np11 r12 c12 b02\np11 r15 c15 b05\np11 r18 c18 b08\np14 r11 c41 b11\np14 r12 c42 b12\np14 r16 c46 b16\np14 r18 c48 b18\np15 r11 c51 b11\np15 r12 c52 b12\np16 r11 c61 b21\np16 r12 c62 b22\np18 r11 c81 b21\np18 r12 c82 b22\np18 r13 c83 b23\np18 r15 c85 b25\np20 r21 c01 b01\np20 r22 c02 b02\np20 r25 c05 b05\np20 r26 c06 b06\np20 r27 c07 b07\np20 r29 c09 b09\np21 r21 c11 b01\np21 r22 c12 b02\np21 r25 c15 b05\np22 r21 c21 b01\np22 r22 c22 b02\np22 r25 c25 b05\np22 r27 c27 b07\np22 r29 c29 b09\np23 r21 c31 b11\np23 r24 c34 b14\np23 r26 c36 b16\np23 r27 c37 b17\np24 r21 c41 b11\np24 r22 c42 b12\np24 r26 c46 b16\np24 r27 c47 b17\np26 r21 c61 b21\np26 r22 c62 b22\np26 r24 c64 b24\np26 r29 c69 b29\np27 r21 c71 b21\np27 r24 c74 b24\np27 r25 c75 b25\np30 r31 c01 b31\np30 r32 c02 b32\np30 r34 c04 b34\np30 r35 c05 b35\np30 r38 c08 b38\np30 r39 c09 b39\np32 r31 c21 b31\np32 r32 c22 b32\np32 r35 c25 b35\np32 r38 c28 b38\np32 r39 c29 b39\np33 r31 c31 b41\np34 r31 c41 b41\np34 r32 c42 b42\np34 r35 c45 b45\np37 r31 c71 b51\np37 r34 c74 b54\np37 r35 c75 b55\np38 r31 c81 b51\np38 r34 c84 b54\np38 r35 c85 b55\np40 r41 c01 b31\np40 r44 c04 b34\np40 r45 c05 b35\np40 r48 c08 b38\np42 r41 c21 b31\np42 r45 c25 b35\np42 r48 c28 b38\np43 r41 c31 b41\np43 r47 c37 b47\np44 r41 c41 b41\np44 r45 c45 b45\np44 r47 c47 b47\np46 r41 c61 b51\np46 r44 c64 b54\np46 r46 c66 b56\np46 r47 c67 b57\np46 r48 c68 b58\np48 r41 c81 b51\np48 r44 c84 b54\np48 r45 c85 b55\np48 r46 c86 b56\np48 r47 c87 b57\np50 r51 c01 b31\np50 r52 c02 b32\np50 r55 c05 b35\np51 r51 c11 b31\np51 r52 c12 b32\np51 r55 c15 b35\np53 r51 c31 b41\np53 r53 c33 b43\np53 r57 c37 b47\np56 r51 c61 b51\np56 r57 c67 b57\np58 r51 c81 b51\np58 r55 c85 b55\np58 r57 c87 b57\np61 r61 c11 b61\np61 r62 c12 b62\np61 r64 c14 b64\np61 r68 c18 b68\np62 r61 c21 b61\np62 r62 c22 b62\np62 r67 c27 b67\np62 r68 c28 b68\np64 r61 c41 b71\np64 r66 c46 b76\np64 r67 c47 b77\np64 r68 c48 b78\np64 r69 c49 b79\np65 r61 c51 b71\np65 r67 c57 b77\np66 r61 c61 b81\np66 r62 c62 b82\np66 r64 c64 b84\np66 r66 c66 b86\np66 r67 c67 b87\np66 r69 c69 b89\np67 r61 c71 b81\np67 r64 c74 b84\np68 r61 c81 b81\np68 r62 c82 b82\np68 r64 c84 b84\np68 r66 c86 b86\np68 r67 c87 b87\np68 r69 c89 b89\np70 r71 c01 b61\np70 r72 c02 b62\np70 r77 c07 b67\np70 r78 c08 b68\np72 r71 c21 b61\np72 r72 c22 b62\np72 r77 c27 b67\np72 r78 c28 b68\np73 r71 c31 b71\np73 r73 c33 b73\np73 r76 c36 b76\np73 r77 c37 b77\np73 r78 c38 b78\np74 r71 c41 b71\np74 r73 c43 b73\np74 r76 c46 b76\np74 r77 c47 b77\np74 r78 c48 b78\np77 r71 c71 b81\np77 r73 c73 b83\np78 r71 c81 b81\np78 r72 c82 b82\np78 r73 c83 b83\np78 r76 c86 b86\np78 r77 c87 b87\np80 r81 c01 b61\np80 r84 c04 b64\np80 r85 c05 b65\np80 r87 c07 b67\np82 r81 c21 b61\np82 r85 c25 b65\np82 r87 c27 b67\np84 r81 c41 b71\np84 r83 c43 b73\np84 r87 c47 b77\np84 r89 c49 b79\np85 r81 c51 b71\np85 r87 c57 b77\np86 r81 c61 b81\np86 r84 c64 b84\np86 r87 c67 b87\np86 r89 c69 b89\np88 r81 c81 b81\np88 r83 c83 b83\np88 r84 c84 b84\np88 r87 c87 b87\np88 r89 c89 b89';

// constraints = [
// 	{
// 		data: 'first one',
// 		primaryRow: [1,0],
// 		secondaryRow: [1]
// 	},
// 	{
// 		data: 'second one',
// 		primaryRow: [0,1],
// 		secondaryRow: [0]
// 	},
// 	{
// 		data: 'third one',
// 		primaryRow: [0,1],
// 		secondaryRow: [1]
// 	}
// ]
makeData = function(lines) { // n-queens
  var a, ai, b, bi, c, ci, comment, header, j, len, line, primary, primaryRow, r, result, ri, row, secondary, secondaryRow;
  lines = lines.split('\n');
  comment = lines.shift();
  header = lines.shift();
  [primary, secondary] = header.split('|');
  primary = primary.trim().split(' ');
  if (secondary) {
    //console.log secondary
    secondary = secondary.trim().split(' ');
  }
  result = [];
  for (j = 0, len = lines.length; j < len; j++) {
    line = lines[j];
    line = line.split(' ');
    console.log(line);
    primaryRow = Array(primary.length).fill(0);
    if (secondary) {
      secondaryRow = Array(secondary.length).fill(0);
    }
    [r, c, a, b] = line;
    ri = primary.indexOf(r);
    ci = primary.indexOf(c);
    if (secondary) {
      ai = secondary.indexOf(a);
    }
    if (secondary) {
      bi = secondary.indexOf(b);
    }
    primaryRow[ri] = 1;
    primaryRow[ci] = 1;
    if (secondary && ai !== -1) {
      secondaryRow[ai] = 1;
    }
    if (secondary && bi !== -1) {
      secondaryRow[bi] = 1;
    }
    if (secondary) {
      result.push({
        data: c + r,
        primaryRow,
        secondaryRow
      });
    } else {
      row = primaryRow;
      result.push({
        data: c + r[1],
        row
      });
    }
  }
  return result;
};

makeData = function(lines) { // sudoku1 695 us
  var comment, header, item, j, k, key, len, len1, line, primary, result, row;
  lines = lines.split('\n');
  comment = lines.shift();
  header = lines.shift();
  primary = header.trim().split(' ');
  result = [];
  for (j = 0, len = lines.length; j < len; j++) {
    line = lines[j];
    line = line.split(' ');
    key = line[1] + line[2];
    row = Array(primary.length).fill(0);
    for (k = 0, len1 = line.length; k < len1; k++) {
      item = line[k];
      row[primary.indexOf(item)] = 1;
    }
    result.push({
      data: key,
      row
    });
  }
  return result;
};

data = makeData(sudoku1);

//console.log data
start = new Date();

ref = range(1000);
for (j = 0, len = ref.length; j < len; j++) {
  i = ref[j];
  oneSolution = findOne(data);
}

console.log(`${(new Date()) - start} ms`);

console.log(oneSolution);

//#############################

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2020\037-Queens-dlx\coffee\index2.coffee