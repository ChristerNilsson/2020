// Generated by CoffeeScript 2.4.1
// Knuth's Dancing Links
// Original paper: https://arxiv.org/pdf/cs/0011047.pdf
// Implementation ported from: https://github.com/shreevatsa/knuth-literate-programs/blob/master/programs/dance.pdf

// Code runs in a state machine in order to avoid recursion
// and in order to work around the lack of `goto` in JS
var SearchState, data, findOne, fs, getSearchConfig, i, j, len, lines, makeData, oneSolution, range, ref, search;

({getSearchConfig, range} = require('./utils'));

SearchState = {
  FORWARD: 0,
  ADVANCE: 1,
  BACKUP: 2,
  RECOVER: 3,
  DONE: 4
};

search = function(config) {
  var advance, backup, bestCol, choice, colArray, cover, currentNode, currentSearchState, currentStateMethod, done, forward, level, nodeArray, numPrimary, numSecondary, numSolutions, pickBestColum, readColumnNames, readRows, recordSolution, recover, root, rows, running, solutions, stateMethods, uncover;
  ({numSolutions, numPrimary, numSecondary, rows} = config);
  root = {};
  colArray = [root];
  nodeArray = [];
  solutions = [];
  currentSearchState = SearchState.FORWARD;
  running = true;
  level = 0;
  choice = [];
  bestCol = null;
  currentNode = null;
  readColumnNames = function() {
    var column, curColIndex, head, i, j, k, lastCol, len, len1, ref, ref1, results1;
    // Skip root node
    curColIndex = 1;
    ref = range(numPrimary);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      head = {};
      head.up = head;
      head.down = head;
      column = {
        len: 0,
        head
      };
      column.prev = colArray[curColIndex - 1];
      colArray[curColIndex - 1].next = column;
      colArray[curColIndex] = column;
      curColIndex = curColIndex + 1;
    }
    lastCol = colArray[curColIndex - 1];
    // Link the last primary constraint to wrap back into the root
    lastCol.next = root;
    root.prev = lastCol;
    ref1 = range(numSecondary);
    results1 = [];
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      i = ref1[k];
      head = {};
      head.up = head;
      head.down = head;
      column = {
        head,
        len: 0
      };
      column.prev = column;
      column.next = column;
      colArray[curColIndex] = column;
      results1.push(curColIndex = curColIndex + 1);
    }
    return results1;
  };
  readRows = function() {
    var col, columnIndex, curNodeIndex, i, j, k, len, len1, node, ref, ref1, results1, row, rowStart;
    curNodeIndex = 0;
    ref = range(rows.length);
    results1 = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      row = rows[i];
      rowStart = void 0;
      ref1 = row.coveredColumns;
      // of
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        columnIndex = ref1[k];
        node = {};
        node.left = node;
        node.right = node;
        node.down = node;
        node.up = node;
        node.index = i;
        node.data = row.data;
        nodeArray[curNodeIndex] = node;
        if (!rowStart) {
          rowStart = node;
        } else {
          node.left = nodeArray[curNodeIndex - 1];
          nodeArray[curNodeIndex - 1].right = node;
        }
        col = colArray[columnIndex + 1];
        node.col = col;
        node.up = col.head.up;
        col.head.up.down = node;
        col.head.up = node;
        node.down = col.head;
        col.len = col.len + 1;
        curNodeIndex = curNodeIndex + 1;
      }
      rowStart.left = nodeArray[curNodeIndex - 1];
      results1.push(nodeArray[curNodeIndex - 1].right = rowStart);
    }
    return results1;
  };
  cover = function(c) {
    var dd, l, nn, r, results1, rr, uu;
    l = c.prev;
    r = c.next;
    // Unlink column
    l.next = r;
    r.prev = l;
    // From to to bottom, left to right unlink every row node from its column
    rr = c.head.down;
    results1 = [];
    while (rr !== c.head) {
      nn = rr.right;
      while (nn !== rr) {
        uu = nn.up;
        dd = nn.down;
        uu.down = dd;
        dd.up = uu;
        nn.col.len -= 1;
        nn = nn.right;
      }
      results1.push(rr = rr.down);
    }
    return results1;
  };
  uncover = function(c) {
    var dd, l, nn, r, rr, uu;
    // From bottom to top, right to left relink every row node to its column
    rr = c.head.up;
    while (rr !== c.head) {
      nn = rr.left;
      while (nn !== rr) {
        uu = nn.up;
        dd = nn.down;
        uu.down = nn;
        dd.up = nn;
        nn.col.len += 1;
        nn = nn.left;
      }
      rr = rr.up;
    }
    l = c.prev;
    r = c.next;
    // Unlink column
    l.next = c;
    return r.prev = c;
  };
  pickBestColum = function() {
    var curCol, length, lowest, lowestLen;
    lowestLen = root.next.len;
    lowest = root.next;
    curCol = root.next;
    while (curCol !== root) {
      length = curCol.len;
      if (length < lowestLen) {
        lowestLen = length;
        lowest = curCol;
      }
      curCol = curCol.next;
    }
    return bestCol = lowest;
  };
  forward = function() {
    pickBestColum();
    cover(bestCol);
    currentNode = bestCol.head.down;
    choice[level] = currentNode;
    return currentSearchState = SearchState.ADVANCE;
  };
  recordSolution = function() {
    var j, l, len, node, ref, results;
    results = [];
    ref = range(level + 1);
    for (j = 0, len = ref.length; j < len; j++) {
      l = ref[j];
      node = choice[l];
      results.push({
        index: node.index,
        data: node.data
      });
    }
    return solutions.push(results);
  };
  advance = function() {
    var pp;
    if (currentNode === bestCol.head) {
      currentSearchState = SearchState.BACKUP;
      return;
    }
    pp = currentNode.right;
    while (pp !== currentNode) {
      cover(pp.col);
      pp = pp.right;
    }
    if (root.next === root) {
      recordSolution();
      if (solutions.length === numSolutions) {
        currentSearchState = SearchState.DONE;
      } else {
        currentSearchState = SearchState.RECOVER;
      }
      return;
    }
    level = level + 1;
    return currentSearchState = SearchState.FORWARD;
  };
  backup = function() {
    uncover(bestCol);
    if (level === 0) {
      currentSearchState = SearchState.DONE;
      return;
    }
    level = level - 1;
    currentNode = choice[level];
    bestCol = currentNode.col;
    return currentSearchState = SearchState.RECOVER;
  };
  recover = function() {
    var pp;
    pp = currentNode.left;
    while (pp !== currentNode) {
      uncover(pp.col);
      pp = pp.left;
    }
    currentNode = currentNode.down;
    choice[level] = currentNode;
    return currentSearchState = SearchState.ADVANCE;
  };
  done = function() {
    return running = false;
  };
  stateMethods = {
    [SearchState.FORWARD]: forward,
    [SearchState.ADVANCE]: advance,
    [SearchState.BACKUP]: backup,
    [SearchState.RECOVER]: recover,
    [SearchState.DONE]: done
  };
  readColumnNames();
  readRows();
  while (running) {
    currentStateMethod = stateMethods[currentSearchState];
    currentStateMethod();
  }
  return solutions;
};

// findAll = (constraints) -> search getSearchConfig Infinity, constraints
findOne = function(constraints) {
  return search(getSearchConfig(1, constraints));
};

// find = (constraints, numSolutions) -> search getSearchConfig numSolutions, constraints
// findRaw = (config) -> search config

// makeData = (lines) -> # n-queens
// 	lines = lines.split '\n'
// 	comment = lines.shift()
// 	header = lines.shift()
// 	[primary,secondary] = header.split '|'
// 	primary = primary.trim().split ' '
// 	#console.log secondary
// 	secondary = secondary.trim().split ' ' if secondary
// 	result = []
// 	for line in lines
// 		line = line.split ' '
// 		console.log line
// 		primaryRow = Array(primary.length).fill 0
// 		secondaryRow = Array(secondary.length).fill 0 if secondary
// 		[r,c,a,b] = line
// 		ri = primary.indexOf r
// 		ci = primary.indexOf c
// 		ai = secondary.indexOf a if secondary
// 		bi = secondary.indexOf b if secondary
// 		primaryRow[ri] = 1
// 		primaryRow[ci] = 1
// 		secondaryRow[ai] = 1 if secondary and ai != -1 
// 		secondaryRow[bi] = 1 if secondary and bi != -1
// 		if secondary
// 			result.push {data:c + r, primaryRow, secondaryRow}
// 		else
// 			row = primaryRow
// 			result.push {data:c + r[1], row}
// 	result
makeData = function(lines) {
  var comment, header, item, j, k, key, len, len1, line, primary, result, row;
  lines = lines.split('\n');
  while (true) {
    comment = lines.shift();
    if (comment[0] !== '|') {
      header = comment;
      break;
    }
  }
  primary = header.trim().split(' ');
  result = [];
  for (j = 0, len = lines.length; j < len; j++) {
    line = lines[j];
    if (line === '') {
      continue;
    }
    line = line.split(' ');
    key = line[1] + line[2];
    row = Array(primary.length).fill(0);
    for (k = 0, len1 = line.length; k < len1; k++) {
      item = line[k];
      row[primary.indexOf(item)] = 1;
    }
    result.push({
      data: key,
      row
    });
  }
  return result;
};

fs = require("fs");

lines = fs.readFileSync(0).toString();

console.time('makeData');

data = makeData(lines);

console.timeEnd('makeData');

//console.log JSON.stringify data
console.time('solve');

ref = range(1);
for (j = 0, len = ref.length; j < len; j++) {
  i = ref[j];
  oneSolution = findOne(data);
}

//cpu =  "#{(new Date()) - start} ms"
console.timeEnd('solve');

//console.log oneSolution
//console.log cpu

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2020\037-Queens-dlx\coffee\dlx.coffee