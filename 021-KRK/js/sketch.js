// Generated by CoffeeScript 2.4.1
var SQ, checkMate, chess, distSq, expand, f, getMoves, getZero, index, j, k, len, len1, r, range, ref, ref1, zero,
  indexOf = [].indexOf;

range = _.range;

SQ = [];

ref = 'abcdefgh';
for (j = 0, len = ref.length; j < len; j++) {
  f = ref[j];
  ref1 = '12345678';
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    r = ref1[k];
    SQ.push(f + r);
  }
}

chess = new Chess();

// console.log chess

// while not chess.game_over()
// 	moves = chess.moves()
// 	move = _.sample moves
// 	console.log moves
// 	chess.move move
// 	#console.log chess.ascii()
// console.log chess.pgn()
distSq = function(a, b) {
  var dx, dy;
  dx = Math.floor(a / 8) - Math.floor(b / 8);
  dy = a % 8 - b % 8;
  return dx * dx + dy * dy;
};

getMoves = function(wk, wr, bk) {
  var black, white;
  chess.clear();
  chess.put({
    type: 'k',
    color: 'w'
  }, SQ[wk]);
  chess.put({
    type: 'r',
    color: 'w'
  }, SQ[wr]);
  chess.put({
    type: 'k',
    color: 'b'
  }, SQ[bk]);
  console.log(chess.ascii());
  white = '';
  black = '';
  if (chess.load(chess.fen())) { // and not chess.in_check()
    white = chess.moves().join(' ');
    if (indexOf.call(white, 'x') >= 0) {
      white = '';
    }
  }
  if (chess.load(chess.fen().replace('w', 'b'))) {
    black = chess.moves().join(' ');
  }
  return [white, black];
};

checkMate = function(wk, wr, bk) {
  chess.clear();
  chess.put({
    type: 'k',
    color: 'w'
  }, SQ[wk]);
  chess.put({
    type: 'r',
    color: 'w'
  }, SQ[wr]);
  chess.put({
    type: 'k',
    color: 'b'
  }, SQ[bk]);
  if (chess.load(chess.fen().replace('w', 'b'))) {
    return chess.in_checkmate();
  } else {
    return false;
  }
};

//console.log getMoves 'e1 a1 e8','b'
//console.log chess.moves()
//console.log chess.ascii()
index = function(wk, wr, bk) {
  return 64 * 64 * wk + 64 * wr + bk;
};

getZero = function() {
  var bk, l, len2, len3, len4, m, n, ref2, ref3, ref4, result, wk, wr;
  result = [];
  ref2 = range(64);
  for (l = 0, len2 = ref2.length; l < len2; l++) {
    wk = ref2[l];
    ref3 = range(64);
    for (m = 0, len3 = ref3.length; m < len3; m++) {
      wr = ref3[m];
      ref4 = range(64);
      for (n = 0, len4 = ref4.length; n < len4; n++) {
        bk = ref4[n];
        if (2 >= distSq(wk, bk)) {
          continue;
        }
        if (wk === wr) {
          continue;
        }
        if (bk === wr) {
          continue;
        }
        if (checkMate(wk, wr, bk)) {
          result.push(index(wk, wr, bk));
        }
      }
    }
  }
  return result;
};

expand = function(front) {
  var bk, i, l, len2, len3, len4, m, n, ref2, ref3, ref4, result, wk, wr;
  result = [];
  ref2 = range(64);
  for (l = 0, len2 = ref2.length; l < len2; l++) {
    wk = ref2[l];
    ref3 = range(64);
    for (m = 0, len3 = ref3.length; m < len3; m++) {
      wr = ref3[m];
      ref4 = range(64);
      for (n = 0, len4 = ref4.length; n < len4; n++) {
        bk = ref4[n];
        if (2 >= distSq(wk, bk)) {
          continue;
        }
        if (wk === wr) {
          continue;
        }
        if (bk === wr) {
          continue;
        }
        i = index(wk, wr, bk);
        if (indexOf.call(front, i) >= 0) {
          result.push(i);
        }
      }
    }
  }
  return result;
};

zero = getZero();

console.log(zero);

console.log(expand(zero));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsRUFBQSxFQUFBLFNBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxDQUFBLEVBQUEsUUFBQSxFQUFBLE9BQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxLQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBO0VBQUE7O0FBQUEsS0FBQSxHQUFRLENBQUMsQ0FBQzs7QUFFVixFQUFBLEdBQUs7O0FBRUw7QUFBQSxLQUFBLHFDQUFBOztBQUNDO0VBQUEsS0FBQSx3Q0FBQTs7SUFDQyxFQUFFLENBQUMsSUFBSCxDQUFRLENBQUEsR0FBRSxDQUFWO0VBREQ7QUFERDs7QUFJQSxLQUFBLEdBQVEsSUFBSSxLQUFKLENBQUEsRUFSUjs7Ozs7Ozs7Ozs7QUFtQkEsTUFBQSxHQUFTLFFBQUEsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFBO0FBQ1IsTUFBQSxFQUFBLEVBQUE7RUFBQSxFQUFBLGNBQUssSUFBRyxFQUFILGNBQU8sSUFBRztFQUNmLEVBQUEsR0FBSyxDQUFBLEdBQUUsQ0FBRixHQUFNLENBQUEsR0FBRTtTQUNiLEVBQUEsR0FBRyxFQUFILEdBQVEsRUFBQSxHQUFHO0FBSEg7O0FBS1QsUUFBQSxHQUFXLFFBQUEsQ0FBQyxFQUFELEVBQUksRUFBSixFQUFPLEVBQVAsQ0FBQTtBQUNWLE1BQUEsS0FBQSxFQUFBO0VBQUEsS0FBSyxDQUFDLEtBQU4sQ0FBQTtFQUNBLEtBQUssQ0FBQyxHQUFOLENBQVU7SUFBQyxJQUFBLEVBQUssR0FBTjtJQUFXLEtBQUEsRUFBTTtFQUFqQixDQUFWLEVBQWlDLEVBQUcsQ0FBQSxFQUFBLENBQXBDO0VBQ0EsS0FBSyxDQUFDLEdBQU4sQ0FBVTtJQUFDLElB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O0VBREQ7U0FRQTtBQVZTOztBQVlWLE1BQUEsR0FBUyxRQUFBLENBQUMsS0FBRCxDQUFBO0FBQ1IsTUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxFQUFBLEVBQUE7RUFBQSxNQUFBLEdBQVM7QUFDVDtFQUFBLEtBQUEsd0NBQUE7O0FBQ0M7SUFBQSxLQUFBLHdDQUFBOztBQUNDO01BQUEsS0FBQSx3Q0FBQTs7UUFDQyxJQUFHLENBQUEsSUFBSyxNQUFBLENBQU8sRUFBUCxFQUFVLEVBQVYsQ0FBUjtBQUEwQixtQkFBMUI7O1FBQ0EsSUFBRyxFQUFBLEtBQU0sRUFBVDtBQUFpQixtQkFBakI7O1FBQ0EsSUFBRyxFQUFBLEtBQU0sRUFBVDtBQUFpQixtQkFBakI7O1FBQ0EsQ0FBQSxHQUFJLEtBQUEsQ0FBTSxFQUFOLEVBQVMsRUFBVCxFQUFZLEVBQVo7UUFDSixJQUFHLGFBQUssS0FBTCxFQUFBLENBQUEsTUFBSDtVQUNDLE1BQU0sQ0FBQyxJQUFQLENBQVksQ0FBWixFQUREOztNQUxEO0lBREQ7RUFERDtTQVNBO0FBWFE7O0FBYVQsSUFBQSxHQUFPLE9BQUEsQ0FBQTs7QUFDUCxPQUFPLENBQUMsR0FBUixDQUFZLElBQVo7O0FBRUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxNQUFBLENBQU8sSUFBUCxDQUFaIiwic291cmNlc0NvbnRlbnQiOlsicmFuZ2UgPSBfLnJhbmdlXHJcblxyXG5TUSA9IFtdXHJcblxyXG5mb3IgZiBpbiAnYWJjZGVmZ2gnXHJcblx0Zm9yIHIgaW4gJzEyMzQ1Njc4J1xyXG5cdFx0U1EucHVzaCBmK3JcclxuXHJcbmNoZXNzID0gbmV3IENoZXNzKClcclxuIyBjb25zb2xlLmxvZyBjaGVzc1xyXG5cclxuIyB3aGlsZSBub3QgY2hlc3MuZ2FtZV9vdmVyKClcclxuIyBcdG1vdmVzID0gY2hlc3MubW92ZXMoKVxyXG4jIFx0bW92ZSA9IF8uc2FtcGxlIG1vdmVzXHJcbiMgXHRjb25zb2xlLmxvZyBtb3Zlc1xyXG4jIFx0Y2hlc3MubW92ZSBtb3ZlXHJcbiMgXHQjY29uc29sZS5sb2cgY2hlc3MuYXNjaWkoKVxyXG4jIGNvbnNvbGUubG9nIGNoZXNzLnBnbigpXHJcblxyXG5kaXN0U3EgPSAoYSxiKSAtPlxyXG5cdGR4ID0gYS8vOCAtIGIvLzhcclxuXHRkeSA9IGElOCAtIGIlOFx0XHJcblx0ZHgqZHggKyBkeSpkeVxyXG5cclxuZ2V0TW92ZXMgPSAod2ssd3IsYmspIC0+XHJcblx0Y2hlc3MuY2xlYXIoKVxyXG5cdGNoZXNzLnB1dCB7dHlwZTonaycsIGNvbG9yOid3J30sIFNRW3drXVxyXG5cdGNoZXNzLnB1dCB7dHlwZToncicsIGNvbG9yOid3J30sIFNRW3dyXVxyXG5cdGNoZXNzLnB1dCB7dHlwZTonaycsIGNvbG9yOidiJ30sIFNRW2JrXVxyXG5cdGNvbnNvbGUubG9nIGNoZXNzLmFzY2lpKClcclxuXHR3aGl0ZSA9ICcnXHJcblx0YmxhY2sgPSAnJ1xyXG5cdGlmIGNoZXNzLmxvYWQoY2hlc3MuZmVuKCkpICMgYW5kIG5vdCBjaGVzcy5pbl9jaGVjaygpXHJcblx0XHR3aGl0ZSA9IGNoZXNzLm1vdmVzKCkuam9pbiAnICdcclxuXHRcdGlmICd4JyBpbiB3aGl0ZSB0aGVuIHdoaXRlID0gJydcclxuXHRpZiBjaGVzcy5sb2FkIGNoZXNzLmZlbigpLnJlcGxhY2UgJ3cnLCdiJ1xyXG5cdFx0YmxhY2sgPSBjaGVzcy5tb3ZlcygpLmpvaW4gJyAnXHJcblx0W3doaXRlLGJsYWNrXVxyXG5cclxuY2hlY2tNYXRlID0gKHdrLHdyLGJrKSAtPlxyXG5cdGNoZXNzLmNsZWFyKClcclxuXHRjaGVzcy5wdXQge3R5cGU6J2snLCBjb2xvcjondyd9LCBTUVt3a11cclxuXHRjaGVzcy5wdXQge3R5cGU6J3InLCBjb2xvcjondyd9LCBTUVt3cl1cclxuXHRjaGVzcy5wdXQge3R5cGU6J2snLCBjb2xvcjonYid9LCBTUVtia11cclxuXHRpZiBjaGVzcy5sb2FkIGNoZXNzLmZlbigpLnJlcGxhY2UgJ3cnLCdiJ1xyXG5cdFx0Y2hlc3MuaW5fY2hlY2ttYXRlKClcclxuXHRlbHNlIGZhbHNlXHJcblxyXG4jY29uc29sZS5sb2cgZ2V0TW92ZXMgJ2UxIGExIGU4JywnYidcclxuI2NvbnNvbGUubG9nIGNoZXNzLm1vdmVzKClcclxuI2NvbnNvbGUubG9nIGNoZXNzLmFzY2lpKClcclxuXHJcbmluZGV4ID0gKHdrLHdyLGJrKSAtPiA2NCo2NCp3ayArIDY0KndyICsgYmtcclxuXHJcbmdldFplcm8gPSAtPlxyXG5cdHJlc3VsdCA9IFtdXHJcblx0Zm9yIHdrIGluIHJhbmdlIDY0XHJcblx0XHRmb3Igd3IgaW4gcmFuZ2UgNjRcclxuXHRcdFx0Zm9yIGJrIGluIHJhbmdlIDY0XHJcblx0XHRcdFx0aWYgMiA+PSBkaXN0U3Egd2ssYmsgdGhlbiBjb250aW51ZVxyXG5cdFx0XHRcdGlmIHdrID09IHdyIHRoZW4gY29udGludWVcclxuXHRcdFx0XHRpZiBiayA9PSB3ciB0aGVuIGNvbnRpbnVlXHJcblx0XHRcdFx0aWYgY2hlY2tNYXRlIHdrLHdyLGJrXHJcblx0XHRcdFx0XHRyZXN1bHQucHVzaCBpbmRleCB3ayx3cixia1xyXG5cdHJlc3VsdFxyXG5cclxuZXhwYW5kID0gKGZyb250KSAtPlxyXG5cdHJlc3VsdCA9IFtdXHJcblx0Zm9yIHdrIGluIHJhbmdlIDY0XHJcblx0XHRmb3Igd3IgaW4gcmFuZ2UgNjRcclxuXHRcdFx0Zm9yIGJrIGluIHJhbmdlIDY0XHJcblx0XHRcdFx0aWYgMiA+PSBkaXN0U3Egd2ssYmsgdGhlbiBjb250aW51ZVxyXG5cdFx0XHRcdGlmIHdrID09IHdyIHRoZW4gY29udGludWVcclxuXHRcdFx0XHRpZiBiayA9PSB3ciB0aGVuIGNvbnRpbnVlXHJcblx0XHRcdFx0aSA9IGluZGV4IHdrLHdyLGJrXHJcblx0XHRcdFx0aWYgaSBpbiBmcm9udFxyXG5cdFx0XHRcdFx0cmVzdWx0LnB1c2ggaVxyXG5cdHJlc3VsdFxyXG5cclxuemVybyA9IGdldFplcm8oKVxyXG5jb25zb2xlLmxvZyB6ZXJvXHJcblxyXG5jb25zb2xlLmxvZyBleHBhbmQgemVybyJdfQ==
//# sourceURL=c:\Lab\2020\021-KRK\coffee\sketch.coffee