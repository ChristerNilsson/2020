// Generated by CoffeeScript 2.4.1
  // URL = "https://github.com/CSSEGISandData/COVID-19/blob/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_"
var C, D, DIR, R, START, antalDagar, confirmed, countries, currentCountry, currentDate, currentSelection, deaths, draw, drawChart, keyPressed, movingAverage, myParse, myRound, population, recovered, search, selection, setup, xAxis,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf;

DIR = 'data\\time_series_covid19_';

C = 'confirmed_global.csv';

D = 'deaths_global.csv';

R = 'recovered_global.csv';

START = new Date(2020, 1, 22);

confirmed = null;

deaths = null;

recovered = null;

xAxis = null;

currentCountry = 0;

currentSelection = 11;

population = {}; // millions

population.Austria = 8.90;

population.Denmark = 5.82;

population.Finland = 5.53;

population.France = 67.1;

population.Germany = 83.1;

population.Israel = 9.18;

population.Italy = 60.2;

population.Japan = 126.0;

population['Korea, South'] = 51.8;

population.Norway = 5.37;

population.Spain = 47.1;

population.Sweden = 10.3;

population['Taiwan*'] = 23.6;

population['United Kingdom'] = 66.4;

population.US = 329.6;

selection = [16, 94, 106, 116, 120, 136, 137, 139, 143, 175, 201, 205, 207, 223, 225];

countries = [];

antalDagar = 0;

currentDate = 0;

d3.csv(DIR + C).then(function(data) {
  var country;
  confirmed = myParse(data);
  countries = _.keys(confirmed);
  country = countries[currentCountry];
  antalDagar = _.size(confirmed[country]);
  currentDate = antalDagar - 1;
  return currentCountry = selection[currentSelection];
});

//console.log countries
d3.csv(DIR + D).then(function(data) {
  return deaths = myParse(data);
});

d3.csv(DIR + R).then(function(data) {
  return recovered = myParse(data);
});

myRound = function(x, n = 0) {
  return x.toFixed(n);
};

// if x >= 100 then return x.toFixed 1
// if x >= 10 then return x.toFixed 2
// if x >= 1 then return x.toFixed 3
// #if x >= 0.1 then return x.toFixed 3
// x.toFixed 4
setup = function() {
  createCanvas(800, 400);
  return drawChart();
};

drawChart = function() {
  var svg;
  // create svg element
  svg = d3.select("#chart").append("svg").attr("width", 800).attr("height", 200);
  // Create the scale
  xAxis = d3.scaleLog().domain([
    1,
    100000 // This is what is written on the Axis: from 0 to 100
  ]).range([
    100,
    700 // This is where the axis is placed: from 100 px to 800px
  ]).base(10);
  // Draw the axis
  return svg.append("g").attr("transform", "translate(0,150)").call(d3.axisBottom(xAxis).tickFormat(d3.format(".1s")).ticks(5)); // This controls the vertical position of the Axis
};

draw = function() {
  var c0, c7, country, d, d0, d7, r, s;
  bg(0.5);
  if (confirmed === null || deaths === null || recovered === null) {
    return;
  }
  if (countries.length === 0) {
    return;
  }
  country = countries[currentCountry];
  s = moment().subtract(antalDagar - currentDate, 'days');
  textSize(20);
  text(s.format("YY-MM-DD") + ' ' + country, 10, 30);
  //text country,10,60
  text(confirmed[country][currentDate] + ' confirmed', 10, 90);
  text(myRound(confirmed[country][currentDate] / population[country]), 200, 90);
  text(deaths[country][currentDate] + ' deaths', 10, 120);
  text(myRound(deaths[country][currentDate] / population[country]), 200, 120);
  if (recovered[country]) {
    r = recovered[country][currentDate];
    d = deaths[country][currentDate];
    text(r + ' recovered', 10, 150);
    text(myRound(recovered[country][currentDate] / population[country]), 200, 150);
    text(myRound(100 * d / (d + r), 2) + ' % death rate', 10, 180);
    if (currentDate > 7) {
      c0 = confirmed[country][currentDate];
      c7 = confirmed[country][currentDate - 7];
      text(`${(c0 / c7).toFixed(2)} factor for seven days`, 300, 90);
      d0 = deaths[country][currentDate];
      d7 = deaths[country][currentDate - 7];
      return text(`${(d0 / d7).toFixed(2)} factor for seven days`, 300, 120);
    }
  }
};

myParse = function(rows) {
  var arr0, arr1, count, i, key, l, len, len1, lst, m, ref, result, row;
  result = {};
  for (l = 0, len = rows.length; l < len; l++) {
    row = rows[l];
    arr0 = row['Province/State'];
    arr1 = row['Country/Region'];
    key = arr0.length > 0 ? arr1 + '|' + arr0 : arr1;
    lst = _.values(row);
    ref = range(4);
    for (m = 0, len1 = ref.length; m < len1; m++) {
      i = ref[m];
      lst.shift();
    }
    result[key] = (function() {
      var len2, o, results;
      results = [];
      for (o = 0, len2 = lst.length; o < len2; o++) {
        count = lst[o];
        results.push(int(count));
      }
      return results;
    })();
  }
  return result;
};

movingAverage = function(lst, n) {
  var i, j, l, len, len1, m, ref, ref1, res, result;
  result = "";
  ref = range(7, lst.length);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    res = 0;
    ref1 = range(n);
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      j = ref1[m];
      res += lst[i - j] - lst[i - j - 1];
    }
    result += `${res / n}\n`;
  }
  return result;
};

keyPressed = function() {
  if (key === 'ArrowLeft') {
    currentDate--;
  }
  if (key === 'ArrowRight') {
    currentDate++;
  }
  if (key === 'ArrowUp') {
    currentSelection = modulo(currentSelection - 1, selection.length);
  }
  if (key === 'ArrowDown') {
    currentSelection = modulo(currentSelection + 1, selection.length);
  }
  if (key === 'Home') {
    currentSelection = 0;
  }
  if (key === 'End') {
    currentSelection = selection.length - 1;
  }
  if (currentDate < 0) {
    currentDate = 0;
  }
  if (currentDate > antalDagar - 1) {
    currentDate = antalDagar - 1;
  }
  if (indexOf.call('abcdefghijklmnopqrstuvwxyz', key) >= 0) {
    search(1);
  }
  if (indexOf.call('ABCDEFGHIJKLMNOPQRSTUVWXYZ', key) >= 0) {
    search(-1);
  }
  currentCountry = selection[currentSelection];
  xAxis.domain([1, 10]);
  return console.log(movingAverage(deaths.Sweden, 3));
};

search = function(delta) {
  var index, k, k1;
  k = key.toUpperCase();
  index = modulo(currentSelection + delta, selection.length);
  while (index !== currentSelection) {
    k1 = countries[selection[index]][0];
    if (k1 === k) {
      break;
    }
    index = modulo(index + delta, selection.length);
  }
  currentSelection = index;
  return currentCountry = selection[currentSelection];
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\Lab\2020\012-Corona\coffee\sketch.coffee