// Generated by CoffeeScript 2.4.1
// Queens DLX
var ENCODE, encode, execute, range;

range = function(b) {
  return (function() {
    var results = [];
    for (var k = 0; 0 <= b ? k < b : k > b; 0 <= b ? k++ : k--){ results.push(k); }
    return results;
  }).apply(this);
};

ENCODE = function(i) {
  return "ABCDEFGHIJKLMNOPQRSTUVWXYZ"[i];
};

encode = function(i) {
  return "abcdefghijklmnopqrstuvwxyz"[i];
};

execute = function(n = '8') {
  var ax, bx, cx, i, j, k, key, l, len, len1, options, ref, ref1, result, rx;
  n = parseInt(n);
  result = {};
  result.header = `This data produced by queens-dlx ${n}`;
  // cx = []
  // rx = []
  // for j in range n
  // 	t = j #(if j&1 then n-1-j else n+j) >> 1
  // 	cx.push "C#{ENCODE t}"
  // 	rx.push "R#{j+1}"
  cx = (function() {
    var k, len, ref, results;
    ref = range(n);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      results.push(`C${ENCODE(i)}`);
    }
    return results;
  })();
  rx = (function() {
    var k, len, ref, results;
    ref = range(n);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      j = ref[k];
      results.push(`R${j + 1}`);
    }
    return results;
  })();
  result.primaries = (cx.concat(rx)).join(' ');
  ax = (function() {
    var k, len, ref, results;
    ref = range(n + n - 1);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      results.push(`A${ENCODE(i)}`);
    }
    return results;
  })();
  bx = (function() {
    var k, len, ref, results;
    ref = range(n + n - 1);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      results.push(`B${ENCODE(i)}`);
    }
    return results;
  })();
  result.secondaries = (ax.concat(bx)).join(' ');
  options = [];
  ref = range(n);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    ref1 = range(n);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j = ref1[l];
      key = `${encode(i)}${j + 1}`;
      options.push(`${key} C${ENCODE(i)} R${j + 1} A${ENCODE(i + j)} B${ENCODE(n - 1 - i + j)}`);
    }
  }
  result.options = options;
  console.log(result);
  return result;
};

module.exports = {execute};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlZW5zLWRseC5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsiY29mZmVlXFxxdWVlbnMtZGx4LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFBQSxJQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBOztBQUVBLEtBQUEsR0FBUSxRQUFBLENBQUMsQ0FBRCxDQUFBO1NBQU87Ozs7O0FBQVA7O0FBQ1IsTUFBQSxHQUFTLFFBQUEsQ0FBQyxDQUFELENBQUE7U0FBTyw0QkFBNkIsQ0FBQSxDQUFBO0FBQXBDOztBQUNULE1BQUEsR0FBUyxRQUFBLENBQUMsQ0FBRCxDQUFBO1NBQU8sNEJBQTZCLENBQUEsQ0FBQTtBQUFwQzs7QUFFVCxPQUFBLEdBQVUsUUFBQSxDQUFDLElBQUUsR0FBSCxDQUFBO0FBQ1QsTUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBO0VBQUEsQ0FBQSxHQUFJLFFBQUEsQ0FBUyxDQUFUO0VBQ0osTUFBQSxHQUFTLENBQUE7RUFDVCxNQUFNLENBQUMsTUFBUCxHQUFnQixDQUFBLGlDQUFBLENBQUEsQ0FBb0MsQ0FBcEMsQ0FBQSxFQUZoQjs7Ozs7OztFQVdBLEVBQUE7O0FBQXFCO0FBQUE7SUFBQSxLQUFBLHFDQUFBOzttQkFBZixDQUFBLENBQUEsQ0FBQSxDQUFJLE1BQUEsQ0FBTyxDQUFQLENBQUosQ0FBQTtJQUFlLENBQUE7OztFQUNyQixFQUFBOztBQUFnQjtBQUFBO0lBQUEsS0FBQSxxQ0FBQTs7bUJBQVYsQ0FBQSxDQUFBLENBQUEsQ0FBSSxDQUFBLEdBQUUsQ0FBTixDQUFBO0lBQVUsQ0FBQTs7O0VBQ2hCLE1BQU0sQ0FBQyxTQUFQLEdBQW1CLENBQUMsRUFBRSxDQUFDLE1BQUgsQ0FBVSxFQUFWLENBQUQsQ0FBYyxDQUFDLElBQWYsQ0FBb0IsR0FBcEI7RUFFbkIsRUFBQTs7QUFBcUI7QUFBQTtJQUFBLEtBQUEscUNBQUE7O21CQUFmLENBQUEsQ0FBQSxDQUFBLENBQUksTUFBQSxDQUFPLENBQVAsQ0FBSixDQUFBO0lBQWUsQ0FBQTs7O0VBQ3JCLEVBQUE7O0FBQXFCO0FBQUE7SUFBQSxLQUFBLHFDQUFBOzttQkFBZixDQUFBLENBQUEsQ0FBQSxDQUFJLE1BQUEsQ0FBTyxDQUFQLENBQUosQ0FBQTtJQUFlLENBQUE7OztFQUNyQixNQUFNLENBQUMsV0FBUCxHQUFxQixDQUFDLEVBQUUsQ0FBQyxNQUFILENBQVUsRUFBVixDQUFELENBQWMsQ0FBQyxJQUFmLENBQW9CLEdBQXBCO0VBRXJCLE9BQUEsR0FBVTtBQUNWO0VBQUEsS0FBQSxxQ0FBQTs7QUFDQztJQUFBLEtBQUEsd0NBQUE7O01BQ0MsR0FBQSxHQUFNLENBQUEsQ0FBQSxDQUFHLE1BQUEsQ0FBTyxDQUFQLENBQUgsQ0FBQSxDQUFBLENBQWUsQ0FBQSxHQUFFLENBQWpCLENBQUE7TUFDTixPQUFPLENBQUMsSUFBUixDQUFhLENBQUEsQ0FBQSxDQUFHLEdBQUgsQ0FBTyxFQUFQLENBQUEsQ0FBVyxNQUFBLENBQU8sQ0FBUCxDQUFYLENBQW9CLEVBQXBCLENBQUEsQ0FBd0IsQ0FBQSxHQUFFLENBQTFCLENBQTRCLEVBQTVCLENBQUEsQ0FBZ0MsTUFBQSxDQUFPLENBQUEsR0FBRSxDQUFULENBQWhDLENBQTJDLEVBQTNDLENBQUEsQ0FBK0MsTUFBQSxDQUFPLENBQUEsR0FBRSxDQUFGLEdBQUksQ0FBSixHQUFNLENBQWIsQ0FBL0MsQ0FBQSxDQUFiO0lBRkQ7RUFERDtFQUlBLE1BQU0sQ0FBQyxPQUFQLEdBQWlCO0VBQ2pCLE9BQU8sQ0FBQyxHQUFSLENBQVksTUFBWjtTQUNBO0FBM0JTOztBQTZCVixNQUFNLENBQUMsT0FBUCxHQUFpQixDQUFDLE9BQUQiLCJzb3VyY2VzQ29udGVudCI6WyIjIFF1ZWVucyBETFhcclxuXHJcbnJhbmdlID0gKGIpIC0+IFswLi4uYl1cclxuRU5DT0RFID0gKGkpIC0+XHRcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaXCJbaV1cclxuZW5jb2RlID0gKGkpIC0+XHRcImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCJbaV1cclxuXHJcbmV4ZWN1dGUgPSAobj0nOCcpIC0+XHJcblx0biA9IHBhcnNlSW50IG5cclxuXHRyZXN1bHQgPSB7fVxyXG5cdHJlc3VsdC5oZWFkZXIgPSBcIlRoaXMgZGF0YSBwcm9kdWNlZCBieSBxdWVlbnMtZGx4ICN7bn1cIlxyXG5cclxuXHQjIGN4ID0gW11cclxuXHQjIHJ4ID0gW11cclxuXHQjIGZvciBqIGluIHJhbmdlIG5cclxuXHQjIFx0dCA9IGogIyhpZiBqJjEgdGhlbiBuLTEtaiBlbHNlIG4raikgPj4gMVxyXG5cdCMgXHRjeC5wdXNoIFwiQyN7RU5DT0RFIHR9XCJcclxuXHQjIFx0cngucHVzaCBcIlIje2orMX1cIlxyXG5cclxuXHRjeCA9IChcIkMje0VOQ09ERSBpfVwiIGZvciBpIGluIHJhbmdlIG4pXHJcblx0cnggPSAoXCJSI3tqKzF9XCIgZm9yIGogaW4gcmFuZ2UgbilcclxuXHRyZXN1bHQucHJpbWFyaWVzID0gKGN4LmNvbmNhdCByeCkuam9pbiAnICdcclxuXHRcclxuXHRheCA9IChcIkEje0VOQ09ERSBpfVwiIGZvciBpIGluIHJhbmdlIG4rbi0xKVxyXG5cdGJ4ID0gKFwiQiN7RU5DT0RFIGl9XCIgZm9yIGkgaW4gcmFuZ2UgbituLTEpXHJcblx0cmVzdWx0LnNlY29uZGFyaWVzID0gKGF4LmNvbmNhdCBieCkuam9pbiAnICdcclxuXHJcblx0b3B0aW9ucyA9IFtdXHJcblx0Zm9yIGkgaW4gcmFuZ2UgblxyXG5cdFx0Zm9yIGogaW4gcmFuZ2UgblxyXG5cdFx0XHRrZXkgPSBcIiN7ZW5jb2RlKGkpfSN7aisxfVwiXHJcblx0XHRcdG9wdGlvbnMucHVzaCBcIiN7a2V5fSBDI3tFTkNPREUgaX0gUiN7aisxfSBBI3tFTkNPREUgaStqfSBCI3tFTkNPREUgbi0xLWkran1cIlxyXG5cdHJlc3VsdC5vcHRpb25zID0gb3B0aW9uc1xyXG5cdGNvbnNvbGUubG9nIHJlc3VsdFxyXG5cdHJlc3VsdFxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7ZXhlY3V0ZX1cclxuIl19
//# sourceURL=c:\github\2020\037-DLX\coffee\queens-dlx.coffee