// Generated by CoffeeScript 2.4.1
var boxIndex, colf, execute, range, rowf;

range = function(b) {
  return (function() {
    var results = [];
    for (var l = 0; 0 <= b ? l < b : l > b; 0 <= b ? l++ : l--){ results.push(l); }
    return results;
  }).apply(this);
};

boxIndex = function(j, k) {
  return Math.floor(j / 3) * 3 + Math.floor(k / 3);
};

rowf = function(i) {
  return Math.floor(i / 9);
};

colf = function(i) {
  return i % 9;
};

execute = function(s) {
  var box, c, col, d, i, j, k, l, len, len1, len2, len3, len4, len5, len6, len7, m, n, o, p, pos, q, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, result, row, t, x;
  result = [];
  pos = Array(81).fill(0);
  row = Array(81).fill(0);
  col = Array(81).fill(0);
  box = Array(81).fill(0);
  c = 0;
  ref = range(81);
  for (l = 0, len = ref.length; l < len; l++) {
    j = ref[l];
    k = j % 9;
    d = s[j] - '1';
    if (d === -1) {
      continue;
    }
    x = boxIndex(rowf(j), k);
    pos[k + 9 * rowf(j)] = 1 + d;
    row[d + 9 * rowf(j)] = 1 + k;
    col[d + 9 * k] = 1 + colf(j);
    box[d + 9 * x] = 1 + colf(j);
    c++;
  }
  result.push(`| ${c} clues`);
  result.push("| " + s);
  s = '';
  ref1 = range(81);
  for (m = 0, len1 = ref1.length; m < len1; m++) {
    i = ref1[m];
    if (!pos[i]) {
      s += `p${rowf(i)}${colf(i)} `;
    }
  }
  ref2 = range(81);
  for (n = 0, len2 = ref2.length; n < len2; n++) {
    i = ref2[n];
    if (!row[i]) {
      s += `r${rowf(i)}${1 + colf(i)} `;
    }
  }
  ref3 = range(81);
  for (o = 0, len3 = ref3.length; o < len3; o++) {
    i = ref3[o];
    if (!col[i]) {
      s += `c${rowf(i)}${1 + colf(i)} `;
    }
  }
  ref4 = range(81);
  for (p = 0, len4 = ref4.length; p < len4; p++) {
    i = ref4[p];
    if (!box[i]) {
      s += `b${rowf(i)}${1 + colf(i)} `;
    }
  }
  result.push(s);
  ref5 = range(9);
  for (q = 0, len5 = ref5.length; q < len5; q++) {
    j = ref5[q];
    ref6 = range(9);
    for (r = 0, len6 = ref6.length; r < len6; r++) {
      k = ref6[r];
      if (!pos[9 * j + k]) {
        x = boxIndex(j, k);
        ref7 = range(9);
        for (t = 0, len7 = ref7.length; t < len7; t++) {
          d = ref7[t];
          if (row[9 * j + d] + col[9 * k + d] + box[9 * x + d] === 0) {
            result.push(`${'abcdefghi'[j]}${k + 1}${d + 1} p${j}${k} r${j}${d + 1} c${k}${d + 1} b${x}${d + 1}`);
          }
        }
      }
    }
  }
  return result;
};

//if process.argv.length == 3
//	console.log execute process.argv[2]
//else
//	console.log execute '010005060004900070000003008070006300030009020006048090300500000090004500060200080'
module.exports = {execute};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Vkb2t1LWRseC5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsiY29mZmVlXFxzdWRva3UtZGx4LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxRQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxLQUFBLEVBQUE7O0FBQUEsS0FBQSxHQUFRLFFBQUEsQ0FBQyxDQUFELENBQUE7U0FBTzs7Ozs7QUFBUDs7QUFDUixRQUFBLEdBQVcsUUFBQSxDQUFDLENBQUQsRUFBRyxDQUFILENBQUE7U0FBUyxJQUFJLENBQUMsS0FBTCxDQUFXLENBQUEsR0FBRSxDQUFiLENBQUEsR0FBa0IsQ0FBbEIsR0FBc0IsSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFBLEdBQUUsQ0FBYjtBQUEvQjs7QUFDWCxJQUFBLEdBQU8sUUFBQSxDQUFDLENBQUQsQ0FBQTtTQUFPLElBQUksQ0FBQyxLQUFMLENBQVcsQ0FBQSxHQUFFLENBQWI7QUFBUDs7QUFDUCxJQUFBLEdBQU8sUUFBQSxDQUFDLENBQUQsQ0FBQTtTQUFPLENBQUEsR0FBRTtBQUFUOztBQUVQLE9BQUEsR0FBVSxRQUFBLENBQUMsQ0FBRCxDQUFBO0FBQ1QsTUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUE7RUFBQSxNQUFB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QUFKLEdBQWEsR0FBSSxDQUFBLENBQUEsR0FBRSxDQUFGLEdBQUksQ0FBSixDQUFqQixHQUEwQixHQUFJLENBQUEsQ0FBQSxHQUFFLENBQUYsR0FBSSxDQUFKLENBQTlCLEtBQXdDLENBQTNDO1lBQ0MsTUFBTSxDQUFDLElBQVAsQ0FBWSxDQUFBLENBQUEsQ0FBRyxXQUFZLENBQUEsQ0FBQSxDQUFmLENBQUEsQ0FBQSxDQUFvQixDQUFBLEdBQUUsQ0FBdEIsQ0FBQSxDQUFBLENBQTBCLENBQUEsR0FBRSxDQUE1QixDQUE4QixFQUE5QixDQUFBLENBQWtDLENBQWxDLENBQUEsQ0FBQSxDQUFzQyxDQUF0QyxDQUF3QyxFQUF4QyxDQUFBLENBQTRDLENBQTVDLENBQUEsQ0FBQSxDQUFnRCxDQUFBLEdBQUUsQ0FBbEQsQ0FBb0QsRUFBcEQsQ0FBQSxDQUF3RCxDQUF4RCxDQUFBLENBQUEsQ0FBNEQsQ0FBQSxHQUFFLENBQTlELENBQWdFLEVBQWhFLENBQUEsQ0FBb0UsQ0FBcEUsQ0FBQSxDQUFBLENBQXdFLENBQUEsR0FBRSxDQUExRSxDQUFBLENBQVosRUFERDs7UUFERCxDQUZEOztJQUREO0VBREQ7U0FPQTtBQTFDUyxFQUxWOzs7Ozs7QUFzREEsTUFBTSxDQUFDLE9BQVAsR0FBaUIsQ0FBQyxPQUFEIiwic291cmNlc0NvbnRlbnQiOlsicmFuZ2UgPSAoYikgLT4gWzAuLi5iXSBcclxuYm94SW5kZXggPSAoaixrKSAtPiBNYXRoLmZsb29yKGovMykgKiAzICsgTWF0aC5mbG9vcihrLzMpIFxyXG5yb3dmID0gKGkpIC0+IE1hdGguZmxvb3IgaS85XHJcbmNvbGYgPSAoaSkgLT4gaSU5XHJcblxyXG5leGVjdXRlID0gKHMpIC0+XHJcblx0cmVzdWx0ID0gW11cclxuXHJcblx0cG9zID0gQXJyYXkoODEpLmZpbGwgMFxyXG5cdHJvdyA9IEFycmF5KDgxKS5maWxsIDBcclxuXHRjb2wgPSBBcnJheSg4MSkuZmlsbCAwXHJcblx0Ym94ID0gQXJyYXkoODEpLmZpbGwgMFxyXG5cdGMgPSAwXHJcblxyXG5cdGZvciBqIGluIHJhbmdlIDgxXHJcblx0XHRrID0gaiAlIDlcclxuXHRcdGQgPSBzW2pdIC0gJzEnXHJcblx0XHRpZiBkID09IC0xIHRoZW4gY29udGludWVcclxuXHRcdHggPSBib3hJbmRleCByb3dmKGopLGtcclxuXHJcblx0XHRwb3NbayArIDkqcm93ZiBqXSA9IDEgKyBkXHJcblx0XHRyb3dbZCArIDkqcm93ZiBqXSA9IDEgKyBrXHJcblx0XHRjb2xbZCArIDkqa10gPSAxICsgY29sZiBqXHJcblx0XHRib3hbZCArIDkqeF0gPSAxICsgY29sZiBqXHJcblxyXG5cdFx0YysrXHJcblx0cmVzdWx0LnB1c2ggXCJ8ICN7Y30gY2x1ZXNcIlxyXG5cdHJlc3VsdC5wdXNoIFwifCBcIiArIHNcclxuXHJcblx0cyA9ICcnXHJcblx0Zm9yIGkgaW4gcmFuZ2UgODFcclxuXHRcdGlmICFwb3NbaV0gdGhlbiBzICs9IFwicCN7cm93ZiBpfSN7Y29sZiBpfSBcIlxyXG5cdGZvciBpIGluIHJhbmdlIDgxXHJcblx0XHRpZiAhcm93W2ldIHRoZW4gcyArPSBcInIje3Jvd2YgaX0jezEgKyBjb2xmIGl9IFwiXHJcblx0Zm9yIGkgaW4gcmFuZ2UgODFcclxuXHRcdGlmICFjb2xbaV0gdGhlbiBzICs9IFwiYyN7cm93ZiBpfSN7MSArIGNvbGYgaX0gXCJcclxuXHRmb3IgaSBpbiByYW5nZSA4MVxyXG5cdFx0aWYgIWJveFtpXSB0aGVuIHMgKz0gXCJiI3tyb3dmIGl9I3sxICsgY29sZiBpfSBcIlxyXG5cdHJlc3VsdC5wdXNoIHNcclxuXHJcblx0Zm9yIGogaW4gcmFuZ2UgOVxyXG5cdFx0Zm9yIGsgaW4gcmFuZ2UgOVxyXG5cdFx0XHRpZiAhcG9zWzkqaitrXVxyXG5cdFx0XHRcdHggPSBib3hJbmRleCBqLGtcclxuXHRcdFx0XHRmb3IgZCBpbiByYW5nZSA5XHJcblx0XHRcdFx0XHRpZiByb3dbOSpqK2RdICsgY29sWzkqaytkXSArIGJveFs5KngrZF0gPT0gMFxyXG5cdFx0XHRcdFx0XHRyZXN1bHQucHVzaCBcIiN7J2FiY2RlZmdoaSdbal19I3trKzF9I3tkKzF9IHAje2p9I3trfSByI3tqfSN7ZCsxfSBjI3trfSN7ZCsxfSBiI3t4fSN7ZCsxfVwiXHJcblx0cmVzdWx0XHJcblxyXG4jaWYgcHJvY2Vzcy5hcmd2Lmxlbmd0aCA9PSAzXHJcbiNcdGNvbnNvbGUubG9nIGV4ZWN1dGUgcHJvY2Vzcy5hcmd2WzJdXHJcbiNlbHNlXHJcbiNcdGNvbnNvbGUubG9nIGV4ZWN1dGUgJzAxMDAwNTA2MDAwNDkwMDA3MDAwMDAwMzAwODA3MDAwNjMwMDAzMDAwOTAyMDAwNjA0ODA5MDMwMDUwMDAwMDA5MDAwNDUwMDA2MDIwMDA4MCdcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge2V4ZWN1dGV9XHJcbiJdfQ==
//# sourceURL=c:\github\2020\037-DLX\coffee\sudoku-dlx.coffee