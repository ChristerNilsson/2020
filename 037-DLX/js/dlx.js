// Generated by CoffeeScript 2.4.1
  // Knuth's Dancing Links
  // Original paper: https://arxiv.org/pdf/cs/0011047.pdf
  // Implementation ported from: https://github.com/shreevatsa/knuth-literate-programs/blob/master/programs/dance.pdf

  // Code runs in a state machine in order to avoid recursion
  // and in order to work around the lack of `goto` in JS
var State, findAll, findOne, getSearchConfig, makeData, range, search,
  indexOf = [].indexOf;

State = {
  FORWARD: 0,
  ADVANCE: 1,
  BACKUP: 2,
  RECOVER: 3,
  DONE: 4
};

range = function(n) {
  return (function() {
    var results = [];
    for (var j = 0; 0 <= n ? j < n : j > n; 0 <= n ? j++ : j--){ results.push(j); }
    return results;
  }).apply(this);
};

search = function(config) { // rows: hash with elements "aa":[0,59,118,177]
  var advance, backup, bestCol, choices, colArray, cover, currentNode, currentState, done, dumpNode, forward, iterate, level, nodeArray, nodes, numSolutions, pickBestColumn, primaries, readColumnNames, readRows, recordSolution, recover, root, rows, running, secondaries, snapshots, solutions, stateMethods, uncover;
  ({numSolutions, primaries, secondaries, rows} = config);
  root = {};
  colArray = [root];
  nodeArray = [];
  solutions = [];
  currentState = State.FORWARD;
  running = true;
  level = 0;
  choices = [];
  bestCol = null;
  currentNode = null;
  nodes = 0;
  snapshots = [];
  readColumnNames = function() {
    var column, curColIndex, head, j, k, lastCol, len, len1, primary, results, secondary;
    // Skip root node
    curColIndex = 1;
    for (j = 0, len = primaries.length; j < len; j++) {
      primary = primaries[j];
      head = {};
      [head.up, head.down] = [head, head];
      column = {
        head,
        len: 0,
        key: primary
      };
      column.prev = colArray[curColIndex - 1];
      colArray[curColIndex - 1].next = column;
      colArray[curColIndex] = column;
      curColIndex++;
    }
    lastCol = colArray[curColIndex - 1];
    // Link the last primaries constraint to wrap back into the root
    lastCol.next = root;
    root.prev = lastCol;
    results = [];
    for (k = 0, len1 = secondaries.length; k < len1; k++) {
      secondary = secondaries[k];
      head = {};
      [head.up, head.down] = [head, head];
      column = {
        head,
        len: 0,
        key: secondary
      };
      [column.prev, column.next] = [column, column];
      colArray[curColIndex] = column;
      results.push(curColIndex++);
    }
    return results;
  };
  readRows = function() {
    var col, columnIndex, curNodeIndex, j, key, len, node, results, row, rowStart;
    curNodeIndex = 0;
    results = [];
    for (key in rows) {
      row = rows[key];
      rowStart = void 0;
      for (j = 0, len = row.length; j < len; j++) {
        columnIndex = row[j];
        node = {
          data: key
        };
        [node.left, node.right] = [node, node];
        [node.down, node.up] = [node, node];
        nodeArray[curNodeIndex] = node;
        if (!rowStart) {
          rowStart = node;
        } else {
          node.left = nodeArray[curNodeIndex - 1];
          nodeArray[curNodeIndex - 1].right = node;
        }
        col = colArray[columnIndex + 1];
        node.col = col;
        node.up = col.head.up;
        col.head.up.down = node;
        col.head.up = node;
        node.down = col.head;
        col.len++;
        curNodeIndex++;
      }
      rowStart.left = nodeArray[curNodeIndex - 1];
      results.push(nodeArray[curNodeIndex - 1].right = rowStart);
    }
    return results;
  };
  iterate = function(dir, node, f) {
    var n, results;
    n = node[dir];
    results = [];
    while (n !== node) {
      f(n);
      results.push(n = n[dir]);
    }
    return results;
  };
  cover = function(c) { // From top to bottom, left to right unlink every row node from its column
    [c.prev.next, c.next.prev] = [
      c.next,
      c.prev // unlink col
    ];
    return iterate('down', c.head, function(n) {
      return iterate('right', n, function(n) {
        [n.down.up, n.up.down] = [
          n.up,
          n.down // unlink node
        ];
        return n.col.len--;
      });
    });
  };
  uncover = function(c) { // From bottom to top, right to left relink every row node to its column
    iterate('up', c.head, function(n) {
      return iterate('left', n, function(n) {
        [n.down.up, n.up.down] = [
          n,
          n // link node
        ];
        return n.col.len++;
      });
    });
    return [c.prev.next, c.next.prev] = [
      c,
      c // link col
    ];
  };
  pickBestColumn = function() { // Only R and C columns, not A and B
    bestCol = root.next;
    return iterate('next', root, function(curCol) {
      if (curCol.len < bestCol.len) {
        return bestCol = curCol;
      }
    });
  };
  forward = function() {
    pickBestColumn();
    currentNode = bestCol.head.down;
    choices[level] = currentNode;
    cover(bestCol);
    return currentState = State.ADVANCE;
  };
  recordSolution = function() {
    var l;
    return solutions.push(((function() {
      var j, len, ref, results;
      ref = range(level + 1);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        l = ref[j];
        results.push(choices[l].data);
      }
      return results;
    })()).join(' '));
  };
  dumpNode = function() {
    var c, entries, entry, key, result;
    entries = {};
    iterate('next', root, function(col) {
      return iterate('down', col.head, function(p) {
        return iterate('right', p, function(n) {
          var name, ref;
          entries[name = n.col.key] || (entries[name] = []);
          if (ref = n.data, indexOf.call(entries[n.col.key], ref) < 0) {
            return entries[n.col.key].push(n.data);
          }
        });
      });
    });
    for (key in entries) {
      entry = entries[key];
      entries[key] = entry.join(' ');
    }
    result = {};
    result.choices = (((function() {
      var j, len, results;
      results = [];
      for (j = 0, len = choices.length; j < len; j++) {
        c = choices[j];
        results.push(c.data);
      }
      return results;
    })()).join(' ')).trim();
    result.entries = entries;
    return snapshots.push(result);
  };
  advance = function() {
    if (currentNode === bestCol.head) {
      currentState = State.BACKUP;
      return;
    }
    nodes++;
    iterate('right', currentNode, function(pp) {
      return cover(pp.col);
    });
    if (root.next === root) {
      recordSolution();
      currentState = solutions.length === numSolutions ? State.DONE : State.RECOVER;
      return;
    }
    level++;
    return currentState = State.FORWARD;
  };
  backup = function() {
    uncover(bestCol);
    if (level === 0) {
      currentState = State.DONE;
      return;
    }
    level--;
    currentNode = choices[level];
    bestCol = currentNode.col;
    return currentState = State.RECOVER;
  };
  recover = function() {
    iterate('left', currentNode, function(pp) {
      return uncover(pp.col);
    });
    currentNode = currentNode.down;
    choices[level] = currentNode;
    return currentState = State.ADVANCE;
  };
  done = function() {
    return running = false;
  };
  stateMethods = {
    [State.FORWARD]: forward,
    [State.ADVANCE]: advance,
    [State.BACKUP]: backup,
    [State.RECOVER]: recover,
    [State.DONE]: done
  };
  readColumnNames();
  readRows();
  while (running) {
    if (currentState === 0) {
      dumpNode();
    }
    stateMethods[currentState]();
  }
  dumpNode();
  return {solutions, snapshots};
};

getSearchConfig = function(numSolutions, constraints) {
  var primaries, secondaries;
  primaries = constraints.primaries;
  secondaries = constraints.secondaries;
  return {
    primaries,
    secondaries,
    numSolutions,
    rows: constraints.entries
  };
};

findAll = function(constraints) {
  return search(getSearchConfig(2e308, constraints));
};

findOne = function(constraints) {
  return search(getSearchConfig(1, constraints));
};

// find = (constraints, numSolutions) -> search getSearchConfig numSolutions, constraints
// findRaw = (config) -> search config
makeData = function({header, primaries, secondaries, options}) {
  var entries, entryCount, i, index, item, j, k, key, len, len1, option, p, prim, ref, sec;
  prim = primaries.split(' ');
  sec = secondaries.split(' ');
  index = {};
  ref = prim.concat(sec);
  for (i = j = 0, len = ref.length; j < len; i = ++j) {
    p = ref[i];
    index[p] = i;
  }
  entries = {};
  entryCount = 0;
  for (k = 0, len1 = options.length; k < len1; k++) {
    option = options[k];
    option = option.split(' ');
    key = option.shift();
    entryCount += option.length;
    entries[key] = (function() {
      var len2, m, results;
      results = [];
      for (m = 0, len2 = option.length; m < len2; m++) {
        item = option[m];
        results.push(index[item]);
      }
      return results;
    })();
  }
  console.log(`${prim.length}+${sec.length} items, ${options.length} options, ${entryCount} entries`);
  return {primaries, secondaries, entries};
};

module.exports = {makeData, search, getSearchConfig, findAll, findOne};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2020\037-DLX\coffee\dlx.coffee