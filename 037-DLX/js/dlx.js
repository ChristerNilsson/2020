// Generated by CoffeeScript 2.4.1
// Knuth's Dancing Links
// Original paper: https://arxiv.org/pdf/cs/0011047.pdf
// Implementation ported from: https://github.com/shreevatsa/knuth-literate-programs/blob/master/programs/dance.pdf

// Code runs in a state machine in order to avoid recursion
// and in order to work around the lack of `goto` in JS

//{ getSearchConfig, range } = require './utils'
var SearchState, data, findOne, fs, getSearchConfig, i, j, len, lines, makeData, oneSolution, range, ref, search;

SearchState = {
  FORWARD: 0,
  ADVANCE: 1,
  BACKUP: 2,
  RECOVER: 3,
  DONE: 4
};

range = function(n) {
  return (function() {
    var results = [];
    for (var j = 0; 0 <= n ? j < n : j > n; 0 <= n ? j++ : j--){ results.push(j); }
    return results;
  }).apply(this);
};

search = function(config) { // rows: hash with elements "r01c01":[0,59,118,177]
  var advance, backup, bestCol, choice, colArray, cover, currentNode, currentSearchState, currentStateMethod, done, forward, level, nodeArray, numPrimary, numSecondary, numSolutions, pickBestColum, readColumnNames, readRows, recordSolution, recover, root, rows, running, solutions, stateMethods, uncover;
  ({numSolutions, numPrimary, numSecondary, rows} = config);
  root = {};
  colArray = [root];
  nodeArray = [];
  solutions = [];
  currentSearchState = SearchState.FORWARD;
  running = true;
  level = 0;
  choice = [];
  bestCol = null;
  currentNode = null;
  readColumnNames = function() {
    var column, curColIndex, head, i, j, k, lastCol, len, len1, ref, ref1, results;
    // Skip root node
    curColIndex = 1;
    ref = range(numPrimary);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      head = {};
      head.up = head;
      head.down = head;
      column = {
        len: 0,
        head
      };
      column.prev = colArray[curColIndex - 1];
      colArray[curColIndex - 1].next = column;
      colArray[curColIndex] = column;
      curColIndex = curColIndex + 1;
    }
    lastCol = colArray[curColIndex - 1];
    // Link the last primary constraint to wrap back into the root
    lastCol.next = root;
    root.prev = lastCol;
    ref1 = range(numSecondary);
    results = [];
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      i = ref1[k];
      head = {};
      head.up = head;
      head.down = head;
      column = {
        head,
        len: 0
      };
      column.prev = column;
      column.next = column;
      colArray[curColIndex] = column;
      results.push(curColIndex = curColIndex + 1);
    }
    return results;
  };
  readRows = function() {
    var col, columnIndex, curNodeIndex, i, j, key, len, node, results, row, rowStart;
    curNodeIndex = 0;
    i = 0;
    results = [];
    for (key in rows) {
      row = rows[key];
      //for i in range rows.length
      //	row = rows[i]
      rowStart = void 0;
//.coveredColumns # of
      for (j = 0, len = row.length; j < len; j++) {
        columnIndex = row[j];
        node = {};
        node.left = node;
        node.right = node;
        node.down = node;
        node.up = node;
        node.index = i;
        node.data = key; //row.data
        nodeArray[curNodeIndex] = node;
        if (!rowStart) {
          rowStart = node;
        } else {
          node.left = nodeArray[curNodeIndex - 1];
          nodeArray[curNodeIndex - 1].right = node;
        }
        col = colArray[columnIndex + 1];
        node.col = col;
        node.up = col.head.up;
        col.head.up.down = node;
        col.head.up = node;
        node.down = col.head;
        col.len = col.len + 1;
        curNodeIndex = curNodeIndex + 1;
      }
      rowStart.left = nodeArray[curNodeIndex - 1];
      nodeArray[curNodeIndex - 1].right = rowStart;
      results.push(i++);
    }
    return results;
  };
  cover = function(c) {
    var dd, l, nn, r, results, rr, uu;
    l = c.prev;
    r = c.next;
    // Unlink column
    l.next = r;
    r.prev = l;
    // From to to bottom, left to right unlink every row node from its column
    rr = c.head.down;
    results = [];
    while (rr !== c.head) {
      nn = rr.right;
      while (nn !== rr) {
        uu = nn.up;
        dd = nn.down;
        uu.down = dd;
        dd.up = uu;
        nn.col.len -= 1;
        nn = nn.right;
      }
      results.push(rr = rr.down);
    }
    return results;
  };
  uncover = function(c) {
    var dd, l, nn, r, rr, uu;
    // From bottom to top, right to left relink every row node to its column
    rr = c.head.up;
    while (rr !== c.head) {
      nn = rr.left;
      while (nn !== rr) {
        uu = nn.up;
        dd = nn.down;
        uu.down = nn;
        dd.up = nn;
        nn.col.len += 1;
        nn = nn.left;
      }
      rr = rr.up;
    }
    l = c.prev;
    r = c.next;
    // Unlink column
    l.next = c;
    return r.prev = c;
  };
  pickBestColum = function() {
    var curCol, length, lowest, lowestLen;
    lowestLen = root.next.len;
    lowest = root.next;
    curCol = root.next;
    while (curCol !== root) {
      length = curCol.len;
      if (length < lowestLen) {
        lowestLen = length;
        lowest = curCol;
      }
      curCol = curCol.next;
    }
    return bestCol = lowest;
  };
  forward = function() {
    pickBestColum();
    cover(bestCol);
    currentNode = bestCol.head.down;
    choice[level] = currentNode;
    return currentSearchState = SearchState.ADVANCE;
  };
  recordSolution = function() {
    var l;
    return solutions.push((function() {
      var j, len, ref, results;
      ref = range(level + 1);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        l = ref[j];
        results.push(choice[l].data);
      }
      return results;
    })());
  };
  advance = function() {
    var pp;
    if (currentNode === bestCol.head) {
      currentSearchState = SearchState.BACKUP;
      return;
    }
    pp = currentNode.right;
    while (pp !== currentNode) {
      cover(pp.col);
      pp = pp.right;
    }
    if (root.next === root) {
      recordSolution();
      if (solutions.length === numSolutions) {
        currentSearchState = SearchState.DONE;
      } else {
        currentSearchState = SearchState.RECOVER;
      }
      return;
    }
    level = level + 1;
    return currentSearchState = SearchState.FORWARD;
  };
  backup = function() {
    uncover(bestCol);
    if (level === 0) {
      currentSearchState = SearchState.DONE;
      return;
    }
    level = level - 1;
    currentNode = choice[level];
    bestCol = currentNode.col;
    return currentSearchState = SearchState.RECOVER;
  };
  recover = function() {
    var pp;
    pp = currentNode.left;
    while (pp !== currentNode) {
      uncover(pp.col);
      pp = pp.left;
    }
    currentNode = currentNode.down;
    choice[level] = currentNode;
    return currentSearchState = SearchState.ADVANCE;
  };
  done = function() {
    return running = false;
  };
  stateMethods = {
    [SearchState.FORWARD]: forward,
    [SearchState.ADVANCE]: advance,
    [SearchState.BACKUP]: backup,
    [SearchState.RECOVER]: recover,
    [SearchState.DONE]: done
  };
  readColumnNames();
  readRows();
  while (running) {
    currentStateMethod = stateMethods[currentSearchState];
    currentStateMethod();
  }
  return solutions;
};

getSearchConfig = function(numSolutions, constraints) {
  var numPrimary, numSecondary;
  numPrimary = constraints.primary.length;
  numSecondary = constraints.secondary.length;
  return {
    numPrimary,
    numSecondary,
    numSolutions,
    rows: constraints.bits
  };
};

// findAll = (constraints) -> search getSearchConfig Infinity, constraints
findOne = function(constraints) {
  return search(getSearchConfig(1, constraints));
};

// find = (constraints, numSolutions) -> search getSearchConfig numSolutions, constraints
// findRaw = (config) -> search config
makeData = function(lines) {
  var bits, comment, header, i, index, item, j, k, key, len, len1, line, p, primary, ref, secondary;
  lines = lines.split('\n');
  while (true) {
    comment = lines.shift();
    if (comment[0] !== '|') {
      header = comment;
      break;
    }
  }
  header = header.trim().split('|');
  primary = header[0].trim().split(' ');
  secondary = header.length === 2 ? header[1].trim().split(' ') : [];
  index = {};
  ref = primary.concat(secondary);
  for (i = j = 0, len = ref.length; j < len; i = ++j) {
    p = ref[i];
    index[p] = i;
  }
  bits = {};
  for (k = 0, len1 = lines.length; k < len1; k++) {
    line = lines[k];
    if (line === '') {
      continue;
    }
    line = line.split(' ');
    key = line.shift();
    bits[key] = (function() {
      var len2, m, results;
      results = [];
      for (m = 0, len2 = line.length; m < len2; m++) {
        item = line[m];
        results.push(index[item]);
      }
      return results;
    })();
  }
  return {primary, secondary, bits};
};

fs = require("fs");

lines = fs.readFileSync(0).toString();

// console.log lines 
data = makeData(lines);

//console.log JSON.stringify data
console.time('solve');

ref = range(1);
//console.log JSON.stringify getSearchConfig 1,data
for (j = 0, len = ref.length; j < len; j++) {
  i = ref[j];
  oneSolution = findOne(data);
}

console.timeEnd('solve');

console.log(oneSolution);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGx4LmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXGRseC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7OztBQUFBLElBQUEsV0FBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsRUFBQSxFQUFBLGVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLFdBQUEsRUFBQSxLQUFBLEVBQUEsR0FBQSxFQUFBOztBQVNBLFdBQUEsR0FDQztFQUFBLE9BQUEsRUFBVSxDQUFWO0VBQ0EsT0FBQSxFQUFVLENBRFY7RUFFQSxNQUFBLEVBQVMsQ0FGVDtFQUdBLE9BQUEsRUFBVSxDQUhWO0VBSUEsSUFBQSxFQUFPO0FBSlA7O0FBTUQsS0FBQSxHQUFRLFFBQUEsQ0FBQyxDQUFELENBQUE7U0FBTzs7Ozs7QUFBUDs7QUFFUixNQUFBLEdBQVMsUUFBQSxDQUFDLE1BQUQsQ0FBQSxFQUFBO0FBQ1IsTUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsUUFBQSxFQUFBLEtBQUEsRUFBQSxXQUFBLEVBQUEsa0JBQUEsRUFBQSxrQkFBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBLFNBQUEsRUFBQSxVQUFBLEVBQUEsWUFBQSxFQUFBLFlBQUEsRUFBQSxhQUFBLEVBQUEsZUFBQSxFQUFBLFFBQUEsRUFBQSxjQUFBLEVBQUEsT0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLFNBQUEsRUFBQSxZQUFBLEVBQUE7RUFBQSxDQUFBLENBQUUsWUFBRixFQUFnQixVQUFoQixFQUE0QixZQUE1QixFQUEwQyxJQUExQyxDQUFBLEdBQW1ELE1BQW5EO0VBQ0EsSUFBQSxHQUFPLENBQUE7RUFFUCxRQUFBLEdBQVcsQ0FBQyxJQUFEO0VBQ1gsU0FBQSxHQUFZO0VBQ1osU0FBQSxHQUFZO0VBRVosa0JBQUEsR0FBcUIs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LEVBQW1CLElBQW5CO0FBbEJVOztBQW9CWCxFQUFBLEdBQUssT0FBQSxDQUFRLElBQVI7O0FBQ0wsS0FBQSxHQUFRLEVBQUUsQ0FBQyxZQUFILENBQWdCLENBQWhCLENBQWtCLENBQUMsUUFBbkIsQ0FBQSxFQXJSUjs7O0FBdVJBLElBQUEsR0FBTyxRQUFBLENBQVMsS0FBVCxFQXZSUDs7O0FBMFJBLE9BQU8sQ0FBQyxJQUFSLENBQWEsT0FBYjs7QUFFQTs7QUFBQSxLQUFBLHFDQUFBOztFQUNDLFdBQUEsR0FBYyxPQUFBLENBQVEsSUFBUjtBQURmOztBQUVBLE9BQU8sQ0FBQyxPQUFSLENBQWdCLE9BQWhCOztBQUNBLE9BQU8sQ0FBQyxHQUFSLENBQVksV0FBWiIsInNvdXJjZXNDb250ZW50IjpbIiMgS251dGgncyBEYW5jaW5nIExpbmtzXHJcbiMgT3JpZ2luYWwgcGFwZXI6IGh0dHBzOi8vYXJ4aXYub3JnL3BkZi9jcy8wMDExMDQ3LnBkZlxyXG4jIEltcGxlbWVudGF0aW9uIHBvcnRlZCBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vc2hyZWV2YXRzYS9rbnV0aC1saXRlcmF0ZS1wcm9ncmFtcy9ibG9iL21hc3Rlci9wcm9ncmFtcy9kYW5jZS5wZGZcclxuI1xyXG4jIENvZGUgcnVucyBpbiBhIHN0YXRlIG1hY2hpbmUgaW4gb3JkZXIgdG8gYXZvaWQgcmVjdXJzaW9uXHJcbiMgYW5kIGluIG9yZGVyIHRvIHdvcmsgYXJvdW5kIHRoZSBsYWNrIG9mIGBnb3RvYCBpbiBKU1xyXG5cclxuI3sgZ2V0U2VhcmNoQ29uZmlnLCByYW5nZSB9ID0gcmVxdWlyZSAnLi91dGlscydcclxuXHJcblNlYXJjaFN0YXRlID0gXHJcblx0Rk9SV0FSRCA6IDBcclxuXHRBRFZBTkNFIDogMVxyXG5cdEJBQ0tVUCA6IDJcclxuXHRSRUNPVkVSIDogM1xyXG5cdERPTkUgOiA0XHJcblxyXG5yYW5nZSA9IChuKSAtPiBbMC4uLm5dXHJcblxyXG5zZWFyY2ggPSAoY29uZmlnKSAtPiAjIHJvd3M6IGhhc2ggd2l0aCBlbGVtZW50cyBcInIwMWMwMVwiOlswLDU5LDExOCwxNzddXHJcblx0eyBudW1Tb2x1dGlvbnMsIG51bVByaW1hcnksIG51bVNlY29uZGFyeSwgcm93cyB9ID0gY29uZmlnXHJcblx0cm9vdCA9IHt9XHJcblxyXG5cdGNvbEFycmF5ID0gW3Jvb3RdXHJcblx0bm9kZUFycmF5ID0gW11cclxuXHRzb2x1dGlvbnMgPSBbXVxyXG5cclxuXHRjdXJyZW50U2VhcmNoU3RhdGUgPSBTZWFyY2hTdGF0ZS5GT1JXQVJEXHJcblx0cnVubmluZyA9IHRydWVcclxuXHRsZXZlbCA9IDBcclxuXHRjaG9pY2UgPSBbXVxyXG5cdGJlc3RDb2wgPSBudWxsXHJcblx0Y3VycmVudE5vZGUgPSBudWxsXHJcblxyXG5cdHJlYWRDb2x1bW5OYW1lcyA9ICgpIC0+XHJcblx0XHQjIFNraXAgcm9vdCBub2RlXHJcblx0XHRjdXJDb2xJbmRleCA9IDFcclxuXHJcblx0XHRmb3IgaSBpbiByYW5nZSBudW1QcmltYXJ5XHJcblx0XHRcdGhlYWQgPSB7fVxyXG5cdFx0XHRoZWFkLnVwID0gaGVhZFxyXG5cdFx0XHRoZWFkLmRvd24gPSBoZWFkXHJcblxyXG5cdFx0XHRjb2x1bW4gPSB7XHJcblx0XHRcdFx0bGVuOiAwLFxyXG5cdFx0XHRcdGhlYWRcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29sdW1uLnByZXYgPSBjb2xBcnJheVtjdXJDb2xJbmRleCAtIDFdXHJcblx0XHRcdGNvbEFycmF5W2N1ckNvbEluZGV4IC0gMV0ubmV4dCA9IGNvbHVtblxyXG5cclxuXHRcdFx0Y29sQXJyYXlbY3VyQ29sSW5kZXhdID0gY29sdW1uXHJcblx0XHRcdGN1ckNvbEluZGV4ID0gY3VyQ29sSW5kZXggKyAxXHJcblxyXG5cdFx0bGFzdENvbCA9IGNvbEFycmF5W2N1ckNvbEluZGV4IC0gMV1cclxuXHRcdCMgTGluayB0aGUgbGFzdCBwcmltYXJ5IGNvbnN0cmFpbnQgdG8gd3JhcCBiYWNrIGludG8gdGhlIHJvb3RcclxuXHRcdGxhc3RDb2wubmV4dCA9IHJvb3RcclxuXHRcdHJvb3QucHJldiA9IGxhc3RDb2xcclxuXHJcblx0XHRmb3IgaSBpbiByYW5nZSBudW1TZWNvbmRhcnlcclxuXHRcdFx0aGVhZCA9IHt9XHJcblx0XHRcdGhlYWQudXAgPSBoZWFkXHJcblx0XHRcdGhlYWQuZG93biA9IGhlYWRcclxuXHJcblx0XHRcdGNvbHVtbiA9IHtcclxuXHRcdFx0XHRoZWFkLFxyXG5cdFx0XHRcdGxlbjogMFxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRjb2x1bW4ucHJldiA9IGNvbHVtblxyXG5cdFx0XHRjb2x1bW4ubmV4dCA9IGNvbHVtblxyXG5cclxuXHRcdFx0Y29sQXJyYXlbY3VyQ29sSW5kZXhdID0gY29sdW1uXHJcblx0XHRcdGN1ckNvbEluZGV4ID0gY3VyQ29sSW5kZXggKyAxXHJcblxyXG5cdHJlYWRSb3dzICA9ICgpIC0+XHJcblx0XHRjdXJOb2RlSW5kZXggPSAwXHJcblx0XHRpPTBcclxuXHRcdGZvciBrZXkscm93IG9mIHJvd3NcclxuXHRcdCNmb3IgaSBpbiByYW5nZSByb3dzLmxlbmd0aFxyXG5cdFx0I1x0cm93ID0gcm93c1tpXVxyXG5cdFx0XHRyb3dTdGFydCA9IHVuZGVmaW5lZFxyXG5cclxuXHRcdFx0Zm9yIGNvbHVtbkluZGV4IGluIHJvdyAjLmNvdmVyZWRDb2x1bW5zICMgb2ZcclxuXHRcdFx0XHRub2RlID0ge31cclxuXHRcdFx0XHRub2RlLmxlZnQgPSBub2RlXHJcblx0XHRcdFx0bm9kZS5yaWdodCA9IG5vZGVcclxuXHRcdFx0XHRub2RlLmRvd24gPSBub2RlXHJcblx0XHRcdFx0bm9kZS51cCA9IG5vZGVcclxuXHRcdFx0XHRub2RlLmluZGV4ID0gaVxyXG5cdFx0XHRcdG5vZGUuZGF0YSA9IGtleSAjcm93LmRhdGFcclxuXHJcblx0XHRcdFx0bm9kZUFycmF5W2N1ck5vZGVJbmRleF0gPSBub2RlXHJcblxyXG5cdFx0XHRcdGlmICFyb3dTdGFydFxyXG5cdFx0XHRcdFx0cm93U3RhcnQgPSBub2RlXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0bm9kZS5sZWZ0ID0gbm9kZUFycmF5W2N1ck5vZGVJbmRleCAtIDFdXHJcblx0XHRcdFx0XHRub2RlQXJyYXlbY3VyTm9kZUluZGV4IC0gMV0ucmlnaHQgPSBub2RlXHJcblxyXG5cdFx0XHRcdGNvbCA9IGNvbEFycmF5W2NvbHVtbkluZGV4ICsgMV1cclxuXHRcdFx0XHRub2RlLmNvbCA9IGNvbFxyXG5cclxuXHRcdFx0XHRub2RlLnVwID0gY29sLmhlYWQudXBcclxuXHRcdFx0XHRjb2wuaGVhZC51cC5kb3duID0gbm9kZVxyXG5cclxuXHRcdFx0XHRjb2wuaGVhZC51cCA9IG5vZGVcclxuXHRcdFx0XHRub2RlLmRvd24gPSBjb2wuaGVhZFxyXG5cclxuXHRcdFx0XHRjb2wubGVuID0gY29sLmxlbiArIDFcclxuXHRcdFx0XHRjdXJOb2RlSW5kZXggPSBjdXJOb2RlSW5kZXggKyAxXHJcblxyXG5cdFx0XHRyb3dTdGFydC5sZWZ0ID0gbm9kZUFycmF5W2N1ck5vZGVJbmRleCAtIDFdXHJcblx0XHRcdG5vZGVBcnJheVtjdXJOb2RlSW5kZXggLSAxXS5yaWdodCA9IHJvd1N0YXJ0XHJcblx0XHRcdGkrK1xyXG5cclxuXHRjb3ZlciA9IChjKSAtPlxyXG5cdFx0bCA9IGMucHJldlxyXG5cdFx0ciA9IGMubmV4dFxyXG5cclxuXHRcdCMgVW5saW5rIGNvbHVtblxyXG5cdFx0bC5uZXh0ID0gclxyXG5cdFx0ci5wcmV2ID0gbFxyXG5cclxuXHRcdCMgRnJvbSB0byB0byBib3R0b20sIGxlZnQgdG8gcmlnaHQgdW5saW5rIGV2ZXJ5IHJvdyBub2RlIGZyb20gaXRzIGNvbHVtblxyXG5cdFx0cnIgPSBjLmhlYWQuZG93blxyXG5cdFx0d2hpbGUgcnIgIT0gYy5oZWFkXHJcblx0XHRcdG5uID0gcnIucmlnaHRcclxuXHRcdFx0d2hpbGUgbm4gIT0gcnJcclxuXHRcdFx0XHR1dSA9IG5uLnVwXHJcblx0XHRcdFx0ZGQgPSBubi5kb3duXHJcblxyXG5cdFx0XHRcdHV1LmRvd24gPSBkZFxyXG5cdFx0XHRcdGRkLnVwID0gdXVcclxuXHJcblx0XHRcdFx0bm4uY29sLmxlbiAtPSAxXHJcblx0XHRcdFx0bm4gPSBubi5yaWdodFxyXG5cdFx0XHRyciA9IHJyLmRvd25cclxuXHJcblx0dW5jb3ZlciAgPSAoYykgLT5cclxuXHRcdCMgRnJvbSBib3R0b20gdG8gdG9wLCByaWdodCB0byBsZWZ0IHJlbGluayBldmVyeSByb3cgbm9kZSB0byBpdHMgY29sdW1uXHJcblx0XHRyciA9IGMuaGVhZC51cFxyXG5cdFx0d2hpbGUgcnIgIT0gYy5oZWFkXHJcblx0XHRcdG5uID0gcnIubGVmdFxyXG5cdFx0XHR3aGlsZSBubiAhPSByclxyXG5cdFx0XHRcdHV1ID0gbm4udXBcclxuXHRcdFx0XHRkZCA9IG5uLmRvd25cclxuXHJcblx0XHRcdFx0dXUuZG93biA9IG5uXHJcblx0XHRcdFx0ZGQudXAgPSBublxyXG5cclxuXHRcdFx0XHRubi5jb2wubGVuICs9IDFcclxuXHRcdFx0XHRubiA9IG5uLmxlZnRcclxuXHRcdFx0cnIgPSByci51cFxyXG5cclxuXHRcdGwgPSBjLnByZXZcclxuXHRcdHIgPSBjLm5leHRcclxuXHJcblx0XHQjIFVubGluayBjb2x1bW5cclxuXHRcdGwubmV4dCA9IGNcclxuXHRcdHIucHJldiA9IGNcclxuXHJcblx0cGlja0Jlc3RDb2x1bSA9ICgpIC0+XHJcblx0XHRsb3dlc3RMZW4gPSByb290Lm5leHQubGVuXHJcblx0XHRsb3dlc3QgPSByb290Lm5leHRcclxuXHRcdGN1ckNvbCA9IHJvb3QubmV4dFxyXG5cdFx0d2hpbGUgY3VyQ29sICE9IHJvb3RcclxuXHRcdFx0bGVuZ3RoID0gY3VyQ29sLmxlblxyXG5cdFx0XHRpZiBsZW5ndGggPCBsb3dlc3RMZW5cclxuXHRcdFx0XHRsb3dlc3RMZW4gPSBsZW5ndGhcclxuXHRcdFx0XHRsb3dlc3QgPSBjdXJDb2xcclxuXHRcdFx0Y3VyQ29sID0gY3VyQ29sLm5leHRcclxuXHRcdGJlc3RDb2wgPSBsb3dlc3RcclxuXHJcblx0Zm9yd2FyZCA9ICgpIC0+XHJcblx0XHRwaWNrQmVzdENvbHVtKClcclxuXHRcdGNvdmVyIGJlc3RDb2xcclxuXHJcblx0XHRjdXJyZW50Tm9kZSA9IGJlc3RDb2wuaGVhZC5kb3duXHJcblx0XHRjaG9pY2VbbGV2ZWxdID0gY3VycmVudE5vZGVcclxuXHJcblx0XHRjdXJyZW50U2VhcmNoU3RhdGUgPSBTZWFyY2hTdGF0ZS5BRFZBTkNFXHJcblxyXG5cdHJlY29yZFNvbHV0aW9uID0gKCkgLT4gc29sdXRpb25zLnB1c2ggKGNob2ljZVtsXS5kYXRhIGZvciBsIGluIHJhbmdlIGxldmVsKzEpXHJcblxyXG5cdGFkdmFuY2UgPSAoKSAtPlxyXG5cdFx0aWYgY3VycmVudE5vZGUgPT0gYmVzdENvbC5oZWFkXHJcblx0XHRcdGN1cnJlbnRTZWFyY2hTdGF0ZSA9IFNlYXJjaFN0YXRlLkJBQ0tVUFxyXG5cdFx0XHRyZXR1cm5cclxuXHRcdHBwID0gY3VycmVudE5vZGUucmlnaHRcclxuXHRcdHdoaWxlIHBwICE9IGN1cnJlbnROb2RlXHJcblx0XHRcdGNvdmVyIHBwLmNvbFxyXG5cdFx0XHRwcCA9IHBwLnJpZ2h0XHJcblxyXG5cdFx0aWYgcm9vdC5uZXh0ID09IHJvb3RcclxuXHRcdFx0cmVjb3JkU29sdXRpb24oKVxyXG5cdFx0XHRpZiBzb2x1dGlvbnMubGVuZ3RoID09IG51bVNvbHV0aW9uc1xyXG5cdFx0XHRcdGN1cnJlbnRTZWFyY2hTdGF0ZSA9IFNlYXJjaFN0YXRlLkRPTkVcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdGN1cnJlbnRTZWFyY2hTdGF0ZSA9IFNlYXJjaFN0YXRlLlJFQ09WRVJcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0bGV2ZWwgPSBsZXZlbCArIDFcclxuXHRcdGN1cnJlbnRTZWFyY2hTdGF0ZSA9IFNlYXJjaFN0YXRlLkZPUldBUkRcclxuXHJcblx0YmFja3VwID0gKCkgLT5cclxuXHRcdHVuY292ZXIgYmVzdENvbFxyXG5cclxuXHRcdGlmIGxldmVsID09IDBcclxuXHRcdFx0Y3VycmVudFNlYXJjaFN0YXRlID0gU2VhcmNoU3RhdGUuRE9ORVxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRsZXZlbCA9IGxldmVsIC0gMVxyXG5cclxuXHRcdGN1cnJlbnROb2RlID0gY2hvaWNlW2xldmVsXVxyXG5cdFx0YmVzdENvbCA9IGN1cnJlbnROb2RlLmNvbFxyXG5cclxuXHRcdGN1cnJlbnRTZWFyY2hTdGF0ZSA9IFNlYXJjaFN0YXRlLlJFQ09WRVJcclxuXHJcblx0cmVjb3ZlciA9ICgpIC0+XHJcblx0XHRwcCA9IGN1cnJlbnROb2RlLmxlZnRcclxuXHRcdHdoaWxlIHBwICE9IGN1cnJlbnROb2RlXHJcblx0XHRcdHVuY292ZXIgcHAuY29sXHJcblx0XHRcdHBwID0gcHAubGVmdFxyXG5cdFx0Y3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5kb3duXHJcblx0XHRjaG9pY2VbbGV2ZWxdID0gY3VycmVudE5vZGVcclxuXHRcdGN1cnJlbnRTZWFyY2hTdGF0ZSA9IFNlYXJjaFN0YXRlLkFEVkFOQ0VcclxuXHJcblx0ZG9uZSA9ICgpIC0+IHJ1bm5pbmcgPSBmYWxzZVxyXG5cclxuXHRzdGF0ZU1ldGhvZHMgPSB7XHJcblx0XHRbU2VhcmNoU3RhdGUuRk9SV0FSRF06IGZvcndhcmQsXHJcblx0XHRbU2VhcmNoU3RhdGUuQURWQU5DRV06IGFkdmFuY2UsXHJcblx0XHRbU2VhcmNoU3RhdGUuQkFDS1VQXTogYmFja3VwLFxyXG5cdFx0W1NlYXJjaFN0YXRlLlJFQ09WRVJdOiByZWNvdmVyLFxyXG5cdFx0W1NlYXJjaFN0YXRlLkRPTkVdOiBkb25lXHJcblx0fVxyXG5cclxuXHRyZWFkQ29sdW1uTmFtZXMoKVxyXG5cdHJlYWRSb3dzKClcclxuXHJcblx0d2hpbGUgcnVubmluZ1xyXG5cdFx0Y3VycmVudFN0YXRlTWV0aG9kID0gc3RhdGVNZXRob2RzW2N1cnJlbnRTZWFyY2hTdGF0ZV1cclxuXHRcdGN1cnJlbnRTdGF0ZU1ldGhvZCgpXHJcblxyXG5cdHJldHVybiBzb2x1dGlvbnNcclxuXHJcbmdldFNlYXJjaENvbmZpZyA9IChudW1Tb2x1dGlvbnMsIGNvbnN0cmFpbnRzKSAtPlxyXG5cdG51bVByaW1hcnkgPSBjb25zdHJhaW50cy5wcmltYXJ5Lmxlbmd0aFxyXG5cdG51bVNlY29uZGFyeSA9IGNvbnN0cmFpbnRzLnNlY29uZGFyeS5sZW5ndGhcclxuXHR7bnVtUHJpbWFyeSwgbnVtU2Vjb25kYXJ5LCBudW1Tb2x1dGlvbnMsIHJvd3M6IGNvbnN0cmFpbnRzLmJpdHN9XHJcblxyXG4jIGZpbmRBbGwgPSAoY29uc3RyYWludHMpIC0+IHNlYXJjaCBnZXRTZWFyY2hDb25maWcgSW5maW5pdHksIGNvbnN0cmFpbnRzXHJcbmZpbmRPbmUgPSAoY29uc3RyYWludHMpIC0+IHNlYXJjaCBnZXRTZWFyY2hDb25maWcgMSwgY29uc3RyYWludHNcclxuIyBmaW5kID0gKGNvbnN0cmFpbnRzLCBudW1Tb2x1dGlvbnMpIC0+IHNlYXJjaCBnZXRTZWFyY2hDb25maWcgbnVtU29sdXRpb25zLCBjb25zdHJhaW50c1xyXG4jIGZpbmRSYXcgPSAoY29uZmlnKSAtPiBzZWFyY2ggY29uZmlnXHJcblxyXG5tYWtlRGF0YSA9IChsaW5lcykgLT5cclxuXHRsaW5lcyA9IGxpbmVzLnNwbGl0ICdcXG4nXHJcblx0d2hpbGUgdHJ1ZVxyXG5cdFx0Y29tbWVudCA9IGxpbmVzLnNoaWZ0KClcclxuXHRcdGlmIGNvbW1lbnRbMF0gIT0gJ3wnIFxyXG5cdFx0XHRoZWFkZXIgPSBjb21tZW50XHJcblx0XHRcdGJyZWFrXHJcblx0aGVhZGVyID0gaGVhZGVyLnRyaW0oKS5zcGxpdCAnfCdcclxuXHRwcmltYXJ5ID0gaGVhZGVyWzBdLnRyaW0oKS5zcGxpdCAnICdcclxuXHRzZWNvbmRhcnkgPSBpZiBoZWFkZXIubGVuZ3RoID09IDIgdGhlbiBoZWFkZXJbMV0udHJpbSgpLnNwbGl0ICcgJyBlbHNlIFtdXHJcblx0aW5kZXggPSB7fVxyXG5cdGluZGV4W3BdID0gaSBmb3IgcCxpIGluIHByaW1hcnkuY29uY2F0IHNlY29uZGFyeVxyXG5cdGJpdHMgPSB7fVxyXG5cdGZvciBsaW5lIGluIGxpbmVzXHJcblx0XHRpZiBsaW5lID09ICcnIHRoZW4gY29udGludWVcclxuXHRcdGxpbmUgPSBsaW5lLnNwbGl0ICcgJ1xyXG5cdFx0a2V5ID0gbGluZS5zaGlmdCgpXHJcblx0XHRiaXRzW2tleV0gPSAoaW5kZXhbaXRlbV0gZm9yIGl0ZW0gaW4gbGluZSlcclxuXHR7cHJpbWFyeSxzZWNvbmRhcnksYml0c31cclxuXHJcbmZzID0gcmVxdWlyZSBcImZzXCJcclxubGluZXMgPSBmcy5yZWFkRmlsZVN5bmMoMCkudG9TdHJpbmcoKVxyXG4jIGNvbnNvbGUubG9nIGxpbmVzIFxyXG5kYXRhID0gbWFrZURhdGEgbGluZXNcclxuI2NvbnNvbGUubG9nIEpTT04uc3RyaW5naWZ5IGRhdGFcclxuXHJcbmNvbnNvbGUudGltZSAnc29sdmUnXHJcbiNjb25zb2xlLmxvZyBKU09OLnN0cmluZ2lmeSBnZXRTZWFyY2hDb25maWcgMSxkYXRhXHJcbmZvciBpIGluIHJhbmdlIDFcclxuXHRvbmVTb2x1dGlvbiA9IGZpbmRPbmUgZGF0YVxyXG5jb25zb2xlLnRpbWVFbmQgJ3NvbHZlJ1xyXG5jb25zb2xlLmxvZyBvbmVTb2x1dGlvblxyXG4iXX0=
//# sourceURL=c:\github\2020\037-DLX\coffee\dlx.coffee