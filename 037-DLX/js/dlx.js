// Generated by CoffeeScript 2.4.1
  // Knuth's Dancing Links
  // Original paper: https://arxiv.org/pdf/cs/0011047.pdf
  // Implementation ported from: https://github.com/shreevatsa/knuth-literate-programs/blob/master/programs/dance.pdf

  // Code runs in a state machine in order to avoid recursion
  // and in order to work around the lack of `goto` in JS
var State, findAll, findOne, getSearchConfig, makeData, range, search,
  indexOf = [].indexOf;

State = {
  FORWARD: 0,
  ADVANCE: 1,
  BACKUP: 2,
  RECOVER: 3,
  DONE: 4
};

range = function(n) {
  return (function() {
    var results = [];
    for (var j = 0; 0 <= n ? j < n : j > n; 0 <= n ? j++ : j--){ results.push(j); }
    return results;
  }).apply(this);
};

search = function(config) { // rows: hash with elements "aa":[0,59,118,177]
  var advance, backup, bestCol, choices, colArray, cover, currentNode, currentState, currentStateMethod, done, dumpNode, forward, iterate, level, nodeArray, nodes, numSolutions, pickBestColumn, primaries, readColumnNames, readRows, recordSolution, recover, root, rows, running, secondaries, snapshots, solutions, stateMethods, uncover;
  ({numSolutions, primaries, secondaries, rows} = config);
  root = {};
  colArray = [root];
  nodeArray = [];
  solutions = [];
  currentState = State.FORWARD;
  running = true;
  level = 0;
  choices = [];
  bestCol = null;
  currentNode = null;
  nodes = 0;
  snapshots = [];
  readColumnNames = function() {
    var column, curColIndex, head, j, k, lastCol, len, len1, primary, results, secondary;
    // Skip root node
    curColIndex = 1;
    for (j = 0, len = primaries.length; j < len; j++) {
      primary = primaries[j];
      head = {};
      [head.up, head.down] = [head, head];
      column = {
        head,
        len: 0,
        key: primary
      };
      column.prev = colArray[curColIndex - 1];
      colArray[curColIndex - 1].next = column;
      colArray[curColIndex] = column;
      curColIndex++;
    }
    lastCol = colArray[curColIndex - 1];
    // Link the last primaries constraint to wrap back into the root
    lastCol.next = root;
    root.prev = lastCol;
    results = [];
    for (k = 0, len1 = secondaries.length; k < len1; k++) {
      secondary = secondaries[k];
      head = {};
      [head.up, head.down] = [head, head];
      column = {
        head,
        len: 0,
        key: secondary
      };
      [column.prev, column.next] = [column, column];
      colArray[curColIndex] = column;
      results.push(curColIndex++);
    }
    return results;
  };
  readRows = function() {
    var col, columnIndex, curNodeIndex, j, key, len, node, results, row, rowStart;
    curNodeIndex = 0;
    results = [];
    for (key in rows) {
      row = rows[key];
      rowStart = void 0;
      for (j = 0, len = row.length; j < len; j++) {
        columnIndex = row[j];
        node = {
          data: key
        };
        [node.left, node.right] = [node, node];
        [node.down, node.up] = [node, node];
        nodeArray[curNodeIndex] = node;
        if (!rowStart) {
          rowStart = node;
        } else {
          node.left = nodeArray[curNodeIndex - 1];
          nodeArray[curNodeIndex - 1].right = node;
        }
        col = colArray[columnIndex + 1];
        node.col = col;
        node.up = col.head.up;
        col.head.up.down = node;
        col.head.up = node;
        node.down = col.head;
        col.len++;
        curNodeIndex++;
      }
      rowStart.left = nodeArray[curNodeIndex - 1];
      results.push(nodeArray[curNodeIndex - 1].right = rowStart);
    }
    return results;
  };
  iterate = function(dir, node, f) {
    var n, results;
    n = node[dir];
    results = [];
    while (n !== node) {
      f(n);
      results.push(n = n[dir]);
    }
    return results;
  };
  // From top to bottom, left to right unlink every row node from its column
  cover = function(c) {
    [c.prev.next, c.next.prev] = [
      c.next,
      c.prev // unlink col
    ];
    return iterate('down', c.head, function(n) {
      return iterate('right', n, function(n) {
        [n.down.up, n.up.down] = [
          n.up,
          n.down // unlink node
        ];
        return n.col.len--;
      });
    });
  };
  uncover = function(c) { // From bottom to top, right to left relink every row node to its column
    iterate('up', c.head, function(n) {
      return iterate('left', n, function(n) {
        [n.down.up, n.up.down] = [
          n,
          n // link node
        ];
        return n.col.len++;
      });
    });
    return [c.prev.next, c.next.prev] = [
      c,
      c // link col
    ];
  };
  pickBestColumn = function() { // Only R and C columns, not A and B
    bestCol = root.next;
    return iterate('next', root, function(curCol) {
      if (curCol.len < bestCol.len) {
        return bestCol = curCol;
      }
    });
  };
  forward = function() {
    pickBestColumn();
    currentNode = bestCol.head.down;
    choices[level] = currentNode;
    cover(bestCol);
    return currentState = State.ADVANCE;
  };
  recordSolution = function() {
    var l;
    return solutions.push(((function() {
      var j, len, ref, results;
      ref = range(level + 1);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        l = ref[j];
        results.push(choices[l].data);
      }
      return results;
    })()).join(' '));
  };
  dumpNode = function() {
    var c, entries, entry, key, result;
    entries = {};
    iterate('next', root, function(col) {
      return iterate('down', col.head, function(p) {
        return iterate('right', p, function(n) {
          var name, ref;
          entries[name = n.col.key] || (entries[name] = []);
          if (ref = n.data, indexOf.call(entries[n.col.key], ref) < 0) {
            return entries[n.col.key].push(n.data);
          }
        });
      });
    });
    for (key in entries) {
      entry = entries[key];
      entries[key] = entry.join(' ');
    }
    result = {};
    result.choices = (((function() {
      var j, len, results;
      results = [];
      for (j = 0, len = choices.length; j < len; j++) {
        c = choices[j];
        results.push(c.data);
      }
      return results;
    })()).join(' ')).trim();
    result.entries = entries;
    return snapshots.push(result);
  };
  advance = function() {
    if (currentNode === bestCol.head) {
      currentState = State.BACKUP;
      return;
    }
    nodes++;
    iterate('right', currentNode, function(pp) {
      return cover(pp.col);
    });
    if (root.next === root) {
      recordSolution();
      currentState = solutions.length === numSolutions ? State.DONE : State.RECOVER;
      return;
    }
    level++;
    return currentState = State.FORWARD;
  };
  backup = function() {
    uncover(bestCol);
    if (level === 0) {
      currentState = State.DONE;
      return;
    }
    level--;
    currentNode = choices[level];
    bestCol = currentNode.col;
    return currentState = State.RECOVER;
  };
  recover = function() {
    iterate('left', currentNode, function(pp) {
      return uncover(pp.col);
    });
    currentNode = currentNode.down;
    choices[level] = currentNode;
    return currentState = State.ADVANCE;
  };
  done = function() {
    return running = false;
  };
  stateMethods = {
    [State.FORWARD]: forward,
    [State.ADVANCE]: advance,
    [State.BACKUP]: backup,
    [State.RECOVER]: recover,
    [State.DONE]: done
  };
  readColumnNames();
  readRows();
  dumpNode();
  while (running) {
    currentStateMethod = stateMethods[currentState];
    currentStateMethod();
    if (currentState === 0) {
      dumpNode();
    }
  }
  dumpNode();
  return {solutions, snapshots};
};

getSearchConfig = function(numSolutions, constraints) {
  var primaries, secondaries;
  primaries = constraints.primaries;
  secondaries = constraints.secondaries;
  return {
    primaries,
    secondaries,
    numSolutions,
    rows: constraints.entries
  };
};

findAll = function(constraints) {
  return search(getSearchConfig(2e308, constraints));
};

findOne = function(constraints) {
  return search(getSearchConfig(1, constraints));
};

// find = (constraints, numSolutions) -> search getSearchConfig numSolutions, constraints
// findRaw = (config) -> search config
makeData = function({header, primaries, secondaries, options}) {
  var entries, entryCount, i, index, item, j, k, key, len, len1, option, p, prim, ref, sec;
  prim = primaries.split(' ');
  sec = secondaries.split(' ');
  index = {};
  ref = prim.concat(sec);
  for (i = j = 0, len = ref.length; j < len; i = ++j) {
    p = ref[i];
    index[p] = i;
  }
  entries = {};
  entryCount = 0;
  for (k = 0, len1 = options.length; k < len1; k++) {
    option = options[k];
    option = option.split(' ');
    key = option.shift();
    entryCount += option.length;
    entries[key] = (function() {
      var len2, m, results;
      results = [];
      for (m = 0, len2 = option.length; m < len2; m++) {
        item = option[m];
        results.push(index[item]);
      }
      return results;
    })();
  }
  console.log(`${prim.length}+${sec.length} items, ${options.length} options, ${entryCount} entries`);
  return {primaries, secondaries, entries};
};

module.exports = {makeData, search, getSearchConfig, findAll, findOne};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGx4LmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXGRseC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7QUFBQSxJQUFBLEtBQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLGVBQUEsRUFBQSxRQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUE7RUFBQTs7QUFPQSxLQUFBLEdBQ0M7RUFBQSxPQUFBLEVBQVUsQ0FBVjtFQUNBLE9BQUEsRUFBVSxDQURWO0VBRUEsTUFBQSxFQUFTLENBRlQ7RUFHQSxPQUFBLEVBQVUsQ0FIVjtFQUlBLElBQUEsRUFBTztBQUpQOztBQU1ELEtBQUEsR0FBUSxRQUFBLENBQUMsQ0FBRCxDQUFBO1NBQU87Ozs7O0FBQVA7O0FBRVIsTUFBQSxHQUFTLFFBQUEsQ0FBQyxNQUFELENBQUEsRUFBQTtBQUNSLE1BQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLFFBQUEsRUFBQSxLQUFBLEVBQUEsV0FBQSxFQUFBLFlBQUEsRUFBQSxrQkFBQSxFQUFBLElBQUEsRUFBQSxRQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxLQUFBLEVBQUEsU0FBQSxFQUFBLEtBQUEsRUFBQSxZQUFBLEVBQUEsY0FBQSxFQUFBLFNBQUEsRUFBQSxlQUFBLEVBQUEsUUFBQSxFQUFBLGNBQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsV0FBQSxFQUFBLFNBQUEsRUFBQSxTQUFBLEVBQUEsWUFBQSxFQUFBO0VBQUEsQ0FBQSxDQUFFLFlBQUYsRUFBZ0IsU0FBaEIsRUFBMkIsV0FBM0IsRUFBd0MsSUFBeEMsQ0FBQSxHQUFpRCxNQUFqRDtFQUVBLElBQUEsR0FBTyxDQUFBO0VBRVAsUUFBQSxHQUFXLENBQUMsSUFBRDtFQUNYLFNBQUEsR0FBWTtFQUNaLFNBQUEsR0FBWTtFQUVaLFlBQUEsR0FBZSxLQUFLLENBQUM7RUFDckIsT0FBQSxHQUFV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LEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQTtFQUFBLElBQUEsR0FBTyxTQUFTLENBQUMsS0FBVixDQUFnQixHQUFoQjtFQUNQLEdBQUEsR0FBTSxXQUFXLENBQUMsS0FBWixDQUFrQixHQUFsQjtFQUNOLEtBQUEsR0FBUSxDQUFBO0FBQ0s7RUFBQSxLQUFBLDZDQUFBOztJQUFiLEtBQU0sQ0FBQSxDQUFBLENBQU4sR0FBVztFQUFFO0VBQ2IsT0FBQSxHQUFVLENBQUE7RUFDVixVQUFBLEdBQWE7RUFDYixLQUFBLDJDQUFBOztJQUNDLE1BQUEsR0FBUyxNQUFNLENBQUMsS0FBUCxDQUFhLEdBQWI7SUFDVCxHQUFBLEdBQU0sTUFBTSxDQUFDLEtBQVAsQ0FBQTtJQUNOLFVBQUEsSUFBYyxNQUFNLENBQUM7SUFDckIsT0FBUSxDQUFBLEdBQUEsQ0FBUjs7QUFBNEI7TUFBQSxLQUFBLDBDQUFBOztxQkFBWixLQUFNLENBQUEsSUFBQTtNQUFNLENBQUE7OztFQUo3QjtFQUtBLE9BQU8sQ0FBQyxHQUFSLENBQVksQ0FBQSxDQUFBLENBQUcsSUFBSSxDQUFDLE1BQVIsQ0FBZSxDQUFmLENBQUEsQ0FBa0IsR0FBRyxDQUFDLE1BQXRCLENBQTZCLFFBQTdCLENBQUEsQ0FBdUMsT0FBTyxDQUFDLE1BQS9DLENBQXNELFVBQXRELENBQUEsQ0FBa0UsVUFBbEUsQ0FBNkUsUUFBN0UsQ0FBWjtTQUNBLENBQUMsU0FBRCxFQUFXLFdBQVgsRUFBdUIsT0FBdkI7QUFiVTs7QUFlWCxNQUFNLENBQUMsT0FBUCxHQUFpQixDQUFDLFFBQUQsRUFBVyxNQUFYLEVBQW1CLGVBQW5CLEVBQW9DLE9BQXBDLEVBQTZDLE9BQTdDIiwic291cmNlc0NvbnRlbnQiOlsiIyBLbnV0aCdzIERhbmNpbmcgTGlua3NcclxuIyBPcmlnaW5hbCBwYXBlcjogaHR0cHM6Ly9hcnhpdi5vcmcvcGRmL2NzLzAwMTEwNDcucGRmXHJcbiMgSW1wbGVtZW50YXRpb24gcG9ydGVkIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9zaHJlZXZhdHNhL2tudXRoLWxpdGVyYXRlLXByb2dyYW1zL2Jsb2IvbWFzdGVyL3Byb2dyYW1zL2RhbmNlLnBkZlxyXG4jXHJcbiMgQ29kZSBydW5zIGluIGEgc3RhdGUgbWFjaGluZSBpbiBvcmRlciB0byBhdm9pZCByZWN1cnNpb25cclxuIyBhbmQgaW4gb3JkZXIgdG8gd29yayBhcm91bmQgdGhlIGxhY2sgb2YgYGdvdG9gIGluIEpTXHJcblxyXG5TdGF0ZSA9IFxyXG5cdEZPUldBUkQgOiAwXHJcblx0QURWQU5DRSA6IDFcclxuXHRCQUNLVVAgOiAyXHJcblx0UkVDT1ZFUiA6IDNcclxuXHRET05FIDogNFxyXG5cclxucmFuZ2UgPSAobikgLT4gWzAuLi5uXVxyXG5cclxuc2VhcmNoID0gKGNvbmZpZykgLT4gIyByb3dzOiBoYXNoIHdpdGggZWxlbWVudHMgXCJhYVwiOlswLDU5LDExOCwxNzddXHJcblx0eyBudW1Tb2x1dGlvbnMsIHByaW1hcmllcywgc2Vjb25kYXJpZXMsIHJvd3MgfSA9IGNvbmZpZ1xyXG5cdFxyXG5cdHJvb3QgPSB7fVxyXG5cclxuXHRjb2xBcnJheSA9IFtyb290XVxyXG5cdG5vZGVBcnJheSA9IFtdXHJcblx0c29sdXRpb25zID0gW11cclxuXHJcblx0Y3VycmVudFN0YXRlID0gU3RhdGUuRk9SV0FSRFxyXG5cdHJ1bm5pbmcgPSB0cnVlXHJcblx0bGV2ZWwgPSAwXHJcblx0Y2hvaWNlcyA9IFtdXHJcblx0YmVzdENvbCA9IG51bGxcclxuXHRjdXJyZW50Tm9kZSA9IG51bGxcclxuXHRub2RlcyA9IDAgXHJcblx0c25hcHNob3RzID0gW11cclxuXHJcblx0cmVhZENvbHVtbk5hbWVzID0gKCkgLT5cclxuXHRcdCMgU2tpcCByb290IG5vZGVcclxuXHRcdGN1ckNvbEluZGV4ID0gMVxyXG5cclxuXHRcdGZvciBwcmltYXJ5IGluIHByaW1hcmllc1xyXG5cdFx0XHRoZWFkID0ge31cclxuXHRcdFx0W2hlYWQudXAsaGVhZC5kb3duXSA9IFtoZWFkLGhlYWRdXHJcblx0XHRcdGNvbHVtbiA9IHtoZWFkLCBsZW46MCwga2V5OnByaW1hcnl9IFxyXG5cdFx0XHRjb2x1bW4ucHJldiA9IGNvbEFycmF5W2N1ckNvbEluZGV4IC0gMV1cclxuXHRcdFx0Y29sQXJyYXlbY3VyQ29sSW5kZXggLSAxXS5uZXh0ID0gY29sdW1uXHJcblx0XHRcdGNvbEFycmF5W2N1ckNvbEluZGV4XSA9IGNvbHVtblxyXG5cdFx0XHRjdXJDb2xJbmRleCsrXHJcblxyXG5cdFx0bGFzdENvbCA9IGNvbEFycmF5W2N1ckNvbEluZGV4IC0gMV1cclxuXHRcdCMgTGluayB0aGUgbGFzdCBwcmltYXJpZXMgY29uc3RyYWludCB0byB3cmFwIGJhY2sgaW50byB0aGUgcm9vdFxyXG5cdFx0bGFzdENvbC5uZXh0ID0gcm9vdFxyXG5cdFx0cm9vdC5wcmV2ID0gbGFzdENvbFxyXG5cclxuXHRcdGZvciBzZWNvbmRhcnkgaW4gc2Vjb25kYXJpZXNcclxuXHRcdFx0aGVhZCA9IHt9XHJcblx0XHRcdFtoZWFkLnVwLGhlYWQuZG93bl0gPSBbaGVhZCxoZWFkXVxyXG5cdFx0XHRjb2x1bW4gPSB7aGVhZCwgbGVuOjAsIGtleTpzZWNvbmRhcnl9XHJcblx0XHRcdFtjb2x1bW4ucHJldixjb2x1bW4ubmV4dF0gPSBbY29sdW1uLGNvbHVtbl1cclxuXHRcdFx0Y29sQXJyYXlbY3VyQ29sSW5kZXhdID0gY29sdW1uXHJcblx0XHRcdGN1ckNvbEluZGV4KytcclxuXHJcblx0cmVhZFJvd3MgID0gKCkgLT5cclxuXHRcdGN1ck5vZGVJbmRleCA9IDBcclxuXHRcdGZvciBrZXkscm93IG9mIHJvd3NcclxuXHRcdFx0cm93U3RhcnQgPSB1bmRlZmluZWRcclxuXHJcblx0XHRcdGZvciBjb2x1bW5JbmRleCBpbiByb3dcclxuXHRcdFx0XHRub2RlID0ge2RhdGE6a2V5fVxyXG5cdFx0XHRcdFtub2RlLmxlZnQsbm9kZS5yaWdodF0gPSBbbm9kZSxub2RlXVxyXG5cdFx0XHRcdFtub2RlLmRvd24sbm9kZS51cF0gPSBbbm9kZSxub2RlXVxyXG5cclxuXHRcdFx0XHRub2RlQXJyYXlbY3VyTm9kZUluZGV4XSA9IG5vZGVcclxuXHJcblx0XHRcdFx0aWYgIXJvd1N0YXJ0XHJcblx0XHRcdFx0XHRyb3dTdGFydCA9IG5vZGVcclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRub2RlLmxlZnQgPSBub2RlQXJyYXlbY3VyTm9kZUluZGV4IC0gMV1cclxuXHRcdFx0XHRcdG5vZGVBcnJheVtjdXJOb2RlSW5kZXggLSAxXS5yaWdodCA9IG5vZGVcclxuXHJcblx0XHRcdFx0Y29sID0gY29sQXJyYXlbY29sdW1uSW5kZXggKyAxXVxyXG5cdFx0XHRcdG5vZGUuY29sID0gY29sXHJcblxyXG5cdFx0XHRcdG5vZGUudXAgPSBjb2wuaGVhZC51cFxyXG5cdFx0XHRcdGNvbC5oZWFkLnVwLmRvd24gPSBub2RlXHJcblxyXG5cdFx0XHRcdGNvbC5oZWFkLnVwID0gbm9kZVxyXG5cdFx0XHRcdG5vZGUuZG93biA9IGNvbC5oZWFkXHJcblxyXG5cdFx0XHRcdGNvbC5sZW4rK1xyXG5cdFx0XHRcdGN1ck5vZGVJbmRleCsrXHJcblxyXG5cdFx0XHRyb3dTdGFydC5sZWZ0ID0gbm9kZUFycmF5W2N1ck5vZGVJbmRleCAtIDFdXHJcblx0XHRcdG5vZGVBcnJheVtjdXJOb2RlSW5kZXggLSAxXS5yaWdodCA9IHJvd1N0YXJ0XHJcblxyXG5cdGl0ZXJhdGUgPSAoZGlyLG5vZGUsZikgLT5cclxuXHRcdG4gPSBub2RlW2Rpcl1cclxuXHRcdHdoaWxlIG4gIT0gbm9kZVxyXG5cdFx0XHRmIG5cclxuXHRcdFx0biA9IG5bZGlyXVxyXG5cclxuICMgRnJvbSB0b3AgdG8gYm90dG9tLCBsZWZ0IHRvIHJpZ2h0IHVubGluayBldmVyeSByb3cgbm9kZSBmcm9tIGl0cyBjb2x1bW5cclxuXHRjb3ZlciA9IChjKSAtPlxyXG5cdFx0W2MucHJldi5uZXh0LCBjLm5leHQucHJldl0gPSBbYy5uZXh0LGMucHJldl0gIyB1bmxpbmsgY29sXHJcblx0XHRpdGVyYXRlICdkb3duJywgYy5oZWFkLCAobikgLT5cclxuXHRcdFx0aXRlcmF0ZSAncmlnaHQnLCBuLCAobikgLT5cclxuXHRcdFx0XHRbbi5kb3duLnVwLG4udXAuZG93bl0gPSBbbi51cCxuLmRvd25dICMgdW5saW5rIG5vZGVcclxuXHRcdFx0XHRuLmNvbC5sZW4tLVxyXG5cclxuXHR1bmNvdmVyICA9IChjKSAtPiAjIEZyb20gYm90dG9tIHRvIHRvcCwgcmlnaHQgdG8gbGVmdCByZWxpbmsgZXZlcnkgcm93IG5vZGUgdG8gaXRzIGNvbHVtblxyXG5cdFx0aXRlcmF0ZSAndXAnLCBjLmhlYWQsIChuKSAtPlxyXG5cdFx0XHRpdGVyYXRlICdsZWZ0JywgbiwgKG4pIC0+XHJcblx0XHRcdFx0W24uZG93bi51cCxuLnVwLmRvd25dID0gW24sbl0gIyBsaW5rIG5vZGVcclxuXHRcdFx0XHRuLmNvbC5sZW4rK1xyXG5cdFx0W2MucHJldi5uZXh0LCBjLm5leHQucHJldl0gPSBbYyxjXSAjIGxpbmsgY29sXHJcblxyXG5cdHBpY2tCZXN0Q29sdW1uID0gLT4gIyBPbmx5IFIgYW5kIEMgY29sdW1ucywgbm90IEEgYW5kIEJcclxuXHRcdGJlc3RDb2wgPSByb290Lm5leHRcclxuXHRcdGl0ZXJhdGUgJ25leHQnLCByb290LCAoY3VyQ29sKSAtPlxyXG5cdFx0XHRpZiBjdXJDb2wubGVuIDwgYmVzdENvbC5sZW4gdGhlbiBiZXN0Q29sID0gY3VyQ29sXHJcblxyXG5cdGZvcndhcmQgPSAtPlxyXG5cdFx0cGlja0Jlc3RDb2x1bW4oKVxyXG5cdFx0Y3VycmVudE5vZGUgPSBiZXN0Q29sLmhlYWQuZG93blxyXG5cdFx0Y2hvaWNlc1tsZXZlbF0gPSBjdXJyZW50Tm9kZVxyXG5cdFx0Y292ZXIgYmVzdENvbFxyXG5cdFx0Y3VycmVudFN0YXRlID0gU3RhdGUuQURWQU5DRVxyXG5cclxuXHRyZWNvcmRTb2x1dGlvbiA9IC0+IHNvbHV0aW9ucy5wdXNoIChjaG9pY2VzW2xdLmRhdGEgZm9yIGwgaW4gcmFuZ2UgbGV2ZWwrMSkuam9pbiAnICdcclxuXHJcblx0ZHVtcE5vZGUgPSAoKSAtPlxyXG5cdFx0ZW50cmllcyA9IHt9XHJcblx0XHRpdGVyYXRlICduZXh0Jyxyb290LCAoY29sKSAtPlxyXG5cdFx0XHRpdGVyYXRlICdkb3duJyxjb2wuaGVhZCwgKHApIC0+XHJcblx0XHRcdFx0aXRlcmF0ZSAncmlnaHQnLHAsIChuKS0+XHJcblx0XHRcdFx0XHRlbnRyaWVzW24uY29sLmtleV0gfHw9IFtdXHJcblx0XHRcdFx0XHRpZiBuLmRhdGEgbm90IGluIGVudHJpZXNbbi5jb2wua2V5XSB0aGVuIGVudHJpZXNbbi5jb2wua2V5XS5wdXNoIG4uZGF0YVxyXG5cdFx0Zm9yIGtleSxlbnRyeSBvZiBlbnRyaWVzXHJcblx0XHRcdGVudHJpZXNba2V5XSA9IGVudHJ5LmpvaW4gJyAnXHJcblx0XHRyZXN1bHQgPSB7fVxyXG5cdFx0cmVzdWx0LmNob2ljZXMgPSAoKGMuZGF0YSBmb3IgYyBpbiBjaG9pY2VzKS5qb2luICcgJykudHJpbSgpXHJcblx0XHRyZXN1bHQuZW50cmllcyA9IGVudHJpZXNcclxuXHRcdHNuYXBzaG90cy5wdXNoIHJlc3VsdFxyXG5cclxuXHRhZHZhbmNlID0gKCkgLT5cclxuXHRcdGlmIGN1cnJlbnROb2RlID09IGJlc3RDb2wuaGVhZFxyXG5cdFx0XHRjdXJyZW50U3RhdGUgPSBTdGF0ZS5CQUNLVVBcclxuXHRcdFx0cmV0dXJuXHJcblx0XHRub2RlcysrXHJcblxyXG5cdFx0aXRlcmF0ZSAncmlnaHQnLGN1cnJlbnROb2RlLCAocHApIC0+IGNvdmVyIHBwLmNvbFxyXG5cclxuXHRcdGlmIHJvb3QubmV4dCA9PSByb290XHJcblx0XHRcdHJlY29yZFNvbHV0aW9uKClcclxuXHRcdFx0Y3VycmVudFN0YXRlID0gaWYgc29sdXRpb25zLmxlbmd0aCA9PSBudW1Tb2x1dGlvbnMgdGhlbiBTdGF0ZS5ET05FIGVsc2UgU3RhdGUuUkVDT1ZFUlxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRsZXZlbCsrXHJcblx0XHRjdXJyZW50U3RhdGUgPSBTdGF0ZS5GT1JXQVJEXHJcblxyXG5cdGJhY2t1cCA9ICgpIC0+XHJcblx0XHR1bmNvdmVyIGJlc3RDb2xcclxuXHRcdGlmIGxldmVsID09IDBcclxuXHRcdFx0Y3VycmVudFN0YXRlID0gU3RhdGUuRE9ORVxyXG5cdFx0XHRyZXR1cm5cclxuXHRcdGxldmVsLS1cclxuXHJcblx0XHRjdXJyZW50Tm9kZSA9IGNob2ljZXNbbGV2ZWxdXHJcblx0XHRiZXN0Q29sID0gY3VycmVudE5vZGUuY29sXHJcblx0XHRjdXJyZW50U3RhdGUgPSBTdGF0ZS5SRUNPVkVSXHJcblxyXG5cdHJlY292ZXIgPSAoKSAtPlxyXG5cdFx0aXRlcmF0ZSAnbGVmdCcsY3VycmVudE5vZGUsIChwcCkgLT4gdW5jb3ZlciBwcC5jb2xcclxuXHRcdGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUuZG93blxyXG5cdFx0Y2hvaWNlc1tsZXZlbF0gPSBjdXJyZW50Tm9kZVxyXG5cdFx0Y3VycmVudFN0YXRlID0gU3RhdGUuQURWQU5DRVxyXG5cclxuXHRkb25lID0gKCkgLT4gcnVubmluZyA9IGZhbHNlXHJcblxyXG5cdHN0YXRlTWV0aG9kcyA9IHtcclxuXHRcdFtTdGF0ZS5GT1JXQVJEXTogZm9yd2FyZCxcclxuXHRcdFtTdGF0ZS5BRFZBTkNFXTogYWR2YW5jZSxcclxuXHRcdFtTdGF0ZS5CQUNLVVBdOiBiYWNrdXAsXHJcblx0XHRbU3RhdGUuUkVDT1ZFUl06IHJlY292ZXIsXHJcblx0XHRbU3RhdGUuRE9ORV06IGRvbmVcclxuXHR9XHJcblxyXG5cdHJlYWRDb2x1bW5OYW1lcygpXHJcblx0cmVhZFJvd3MoKVxyXG5cdGR1bXBOb2RlKClcclxuXHR3aGlsZSBydW5uaW5nXHJcblx0XHRjdXJyZW50U3RhdGVNZXRob2QgPSBzdGF0ZU1ldGhvZHNbY3VycmVudFN0YXRlXVxyXG5cdFx0Y3VycmVudFN0YXRlTWV0aG9kKClcclxuXHRcdGlmIGN1cnJlbnRTdGF0ZSA9PSAwIHRoZW4gZHVtcE5vZGUoKVxyXG5cdGR1bXBOb2RlKClcclxuXHRyZXR1cm4ge3NvbHV0aW9ucyxzbmFwc2hvdHN9XHJcblxyXG5nZXRTZWFyY2hDb25maWcgPSAobnVtU29sdXRpb25zLCBjb25zdHJhaW50cykgLT5cclxuXHRwcmltYXJpZXMgPSBjb25zdHJhaW50cy5wcmltYXJpZXNcclxuXHRzZWNvbmRhcmllcyA9IGNvbnN0cmFpbnRzLnNlY29uZGFyaWVzXHJcblx0e3ByaW1hcmllcywgc2Vjb25kYXJpZXMsIG51bVNvbHV0aW9ucywgcm93czogY29uc3RyYWludHMuZW50cmllc31cclxuXHJcbmZpbmRBbGwgPSAoY29uc3RyYWludHMpIC0+IHNlYXJjaCBnZXRTZWFyY2hDb25maWcgSW5maW5pdHksIGNvbnN0cmFpbnRzXHJcbmZpbmRPbmUgPSAoY29uc3RyYWludHMpIC0+IHNlYXJjaCBnZXRTZWFyY2hDb25maWcgMSwgY29uc3RyYWludHNcclxuIyBmaW5kID0gKGNvbnN0cmFpbnRzLCBudW1Tb2x1dGlvbnMpIC0+IHNlYXJjaCBnZXRTZWFyY2hDb25maWcgbnVtU29sdXRpb25zLCBjb25zdHJhaW50c1xyXG4jIGZpbmRSYXcgPSAoY29uZmlnKSAtPiBzZWFyY2ggY29uZmlnXHJcblxyXG5tYWtlRGF0YSA9ICh7aGVhZGVyLHByaW1hcmllcyxzZWNvbmRhcmllcyxvcHRpb25zfSkgLT5cclxuXHRwcmltID0gcHJpbWFyaWVzLnNwbGl0ICcgJ1xyXG5cdHNlYyA9IHNlY29uZGFyaWVzLnNwbGl0ICcgJ1xyXG5cdGluZGV4ID0ge31cclxuXHRpbmRleFtwXSA9IGkgZm9yIHAsaSBpbiBwcmltLmNvbmNhdCBzZWNcclxuXHRlbnRyaWVzID0ge31cclxuXHRlbnRyeUNvdW50ID0gMFxyXG5cdGZvciBvcHRpb24gaW4gb3B0aW9uc1xyXG5cdFx0b3B0aW9uID0gb3B0aW9uLnNwbGl0ICcgJ1xyXG5cdFx0a2V5ID0gb3B0aW9uLnNoaWZ0KClcdFx0XHJcblx0XHRlbnRyeUNvdW50ICs9IG9wdGlvbi5sZW5ndGhcclxuXHRcdGVudHJpZXNba2V5XSA9IChpbmRleFtpdGVtXSBmb3IgaXRlbSBpbiBvcHRpb24pXHJcblx0Y29uc29sZS5sb2cgXCIje3ByaW0ubGVuZ3RofSsje3NlYy5sZW5ndGh9IGl0ZW1zLCAje29wdGlvbnMubGVuZ3RofSBvcHRpb25zLCAje2VudHJ5Q291bnR9IGVudHJpZXNcIlxyXG5cdHtwcmltYXJpZXMsc2Vjb25kYXJpZXMsZW50cmllc31cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge21ha2VEYXRhLCBzZWFyY2gsIGdldFNlYXJjaENvbmZpZywgZmluZEFsbCwgZmluZE9uZX1cclxuIl19
//# sourceURL=c:\github\2020\037-DLX\coffee\dlx.coffee