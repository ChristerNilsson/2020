// Generated by CoffeeScript 2.4.1
// Knuth's Dancing Links
// Original paper: https://arxiv.org/pdf/cs/0011047.pdf
// Implementation ported from: https://github.com/shreevatsa/knuth-literate-programs/blob/master/programs/dance.pdf

// Code runs in a state machine in order to avoid recursion
// and in order to work around the lack of `goto` in JS
var SearchState, findAll, findOne, getSearchConfig, makeData, range, search;

SearchState = {
  FORWARD: 0,
  ADVANCE: 1,
  BACKUP: 2,
  RECOVER: 3,
  DONE: 4
};

range = function(n) {
  return (function() {
    var results = [];
    for (var j = 0; 0 <= n ? j < n : j > n; 0 <= n ? j++ : j--){ results.push(j); }
    return results;
  }).apply(this);
};

search = function(config) { // rows: hash with elements "aa":[0,59,118,177]
  var advance, backup, bestCol, choices, colArray, cover, currentNode, currentSearchState, currentStateMethod, done, dumpNode, forward, level, nodeArray, nodes, numSolutions, pickBestColumn, primaries, readColumnNames, readRows, recordSolution, recover, root, rows, running, secondaries, snapshots, solutions, stateMethods, uncover;
  ({numSolutions, primaries, secondaries, rows} = config);
  root = {};
  colArray = [root];
  nodeArray = [];
  solutions = [];
  currentSearchState = SearchState.FORWARD;
  running = true;
  level = 0;
  choices = [];
  bestCol = null;
  currentNode = null;
  nodes = 0;
  snapshots = [];
  readColumnNames = function() {
    var column, curColIndex, head, j, k, lastCol, len, len1, primary, results, secondary;
    // Skip root node
    curColIndex = 1;
    for (j = 0, len = primaries.length; j < len; j++) {
      primary = primaries[j];
      head = {};
      head.up = head;
      head.down = head;
      column = {
        head,
        len: 0,
        key: primary
      };
      column.prev = colArray[curColIndex - 1];
      colArray[curColIndex - 1].next = column;
      colArray[curColIndex] = column;
      curColIndex++;
    }
    lastCol = colArray[curColIndex - 1];
    // Link the last primaries constraint to wrap back into the root
    lastCol.next = root;
    root.prev = lastCol;
    results = [];
    for (k = 0, len1 = secondaries.length; k < len1; k++) {
      secondary = secondaries[k];
      head = {};
      head.up = head;
      head.down = head;
      column = {
        head,
        len: 0,
        key: secondary
      };
      column.prev = column;
      column.next = column;
      colArray[curColIndex] = column;
      results.push(curColIndex++);
    }
    return results;
  };
  readRows = function() {
    var col, columnIndex, curNodeIndex, j, key, len, node, results, row, rowStart;
    curNodeIndex = 0;
    results = [];
    for (key in rows) {
      row = rows[key];
      rowStart = void 0;
      for (j = 0, len = row.length; j < len; j++) {
        columnIndex = row[j];
        node = {};
        node.left = node;
        node.right = node;
        node.down = node;
        node.up = node;
        node.data = key;
        nodeArray[curNodeIndex] = node;
        if (!rowStart) {
          rowStart = node;
        } else {
          node.left = nodeArray[curNodeIndex - 1];
          nodeArray[curNodeIndex - 1].right = node;
        }
        col = colArray[columnIndex + 1];
        node.col = col;
        node.up = col.head.up;
        col.head.up.down = node;
        col.head.up = node;
        node.down = col.head;
        col.len++;
        curNodeIndex++;
      }
      rowStart.left = nodeArray[curNodeIndex - 1];
      results.push(nodeArray[curNodeIndex - 1].right = rowStart);
    }
    return results;
  };
  cover = function(c) { // c is a column
    var dd, l, nn, r, results, rr, uu;
    l = c.prev;
    r = c.next;
    // Unlink column
    l.next = r;
    r.prev = l;
    // From to to bottom, left to right unlink every row node from its column
    rr = c.head.down;
    results = [];
    while (rr !== c.head) {
      nn = rr.right;
      while (nn !== rr) {
        uu = nn.up;
        dd = nn.down;
        uu.down = dd;
        dd.up = uu;
        nn.col.len--;
        nn = nn.right;
      }
      results.push(rr = rr.down);
    }
    return results;
  };
  uncover = function(c) {
    var dd, l, nn, r, rr, uu;
    // From bottom to top, right to left relink every row node to its column
    rr = c.head.up;
    while (rr !== c.head) {
      nn = rr.left;
      while (nn !== rr) {
        uu = nn.up;
        dd = nn.down;
        uu.down = nn;
        dd.up = nn;
        nn.col.len++;
        nn = nn.left;
      }
      rr = rr.up;
    }
    l = c.prev;
    r = c.next;
    // Unlink column
    l.next = c;
    return r.prev = c;
  };
  pickBestColumn = function() { // Only R and C columns, not A and B
    var curCol, results;
    curCol = root.next;
    bestCol = curCol;
    results = [];
    while (curCol !== root) {
      if (curCol.len < bestCol.len) {
        bestCol = curCol;
      }
      results.push(curCol = curCol.next);
    }
    return results;
  };
  forward = function() {
    pickBestColumn();
    currentNode = bestCol.head.down;
    choices[level] = currentNode;
    cover(bestCol);
    return currentSearchState = SearchState.ADVANCE;
  };
  recordSolution = function() {
    var curCol, l, results;
    
    //solutions.push 0
    //solutions.push (choices[l].data for l in range level+1)
    solutions.push(((function() {
      var j, len, ref, results;
      ref = range(level + 1);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        l = ref[j];
        results.push(choices[l].data);
      }
      return results;
    })()).join(' '));
    curCol = root.next;
    bestCol = curCol;
    results = [];
    while (curCol !== root) {
      if (curCol.len < bestCol.len) {
        bestCol = curCol;
      }
      results.push(curCol = curCol.next);
    }
    return results;
  };
  dumpNode = function(action) {
    var c, col, i, j, keys, len, optionsP, optionsS, p, ref, result;
    optionsP = {};
    col = root.next;
    while (col !== root) {
      p = col.head.down;
      keys = [];
      while (p !== col.head) {
        keys.push(p.data);
        p = p.down;
      }
      optionsP[col.key] = keys.join(' ');
      col = col.next;
    }
    optionsS = {};
    ref = range(secondaries.length);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      col = colArray[17 + i];
      p = col.head.down;
      keys = [];
      while (p !== col.head) {
        keys.push(p.data);
        p = p.down;
      }
      if (keys.length > 0) {
        optionsS[col.key] = keys.join(' ');
      }
      col = col.next;
    }
    result = {};
    result.action = action;
    //result.choices = (choices[l].data for l in range level+1).join ' '
    result.choices = ((function() {
      var k, len1, results;
      results = [];
      for (k = 0, len1 = choices.length; k < len1; k++) {
        c = choices[k];
        results.push(c.data);
      }
      return results;
    })()).join(' ');
    result.primaries = optionsP;
    result.secondaries = optionsS;
    return snapshots.push(result);
  };
  advance = function() {
    var pp;
    if (currentNode === bestCol.head) {
      currentSearchState = SearchState.BACKUP;
      return;
    }
    nodes++;
    pp = currentNode.right;
    while (pp !== currentNode) {
      cover(pp.col);
      pp = pp.right;
    }
    if (root.next === root) {
      recordSolution();
      if (solutions.length === numSolutions) {
        currentSearchState = SearchState.DONE;
      } else {
        currentSearchState = SearchState.RECOVER;
      }
      return;
    }
    level++;
    return currentSearchState = SearchState.FORWARD;
  };
  backup = function() {
    uncover(bestCol);
    if (level === 0) {
      currentSearchState = SearchState.DONE;
      return;
    }
    level--;
    currentNode = choices[level];
    bestCol = currentNode.col;
    return currentSearchState = SearchState.RECOVER;
  };
  recover = function() {
    var pp;
    pp = currentNode.left;
    while (pp !== currentNode) {
      uncover(pp.col);
      pp = pp.left;
    }
    currentNode = currentNode.down;
    choices[level] = currentNode;
    return currentSearchState = SearchState.ADVANCE;
  };
  done = function() {
    return running = false;
  };
  stateMethods = {
    [SearchState.FORWARD]: forward,
    [SearchState.ADVANCE]: advance,
    [SearchState.BACKUP]: backup,
    [SearchState.RECOVER]: recover,
    [SearchState.DONE]: done
  };
  readColumnNames();
  readRows();
  dumpNode(['forward', 'advance', 'backtrack', 'recover', 'done'][currentSearchState]);
  dumpNode(['forward', 'advance', 'backtrack', 'recover', 'done'][currentSearchState]);
  while (running) {
    currentStateMethod = stateMethods[currentSearchState];
    currentStateMethod();
    if (currentSearchState === 0 || currentSearchState === 2 || currentSearchState === 3 || currentSearchState === 4) {
      dumpNode(['forward', 'advance', 'backtrack', 'recover', 'done'][currentSearchState]);
    }
  }
  
  //console.log JSON.stringify dump
  //console.log "#{nodes} nodes #{solutions.length} solutions"
  return {solutions, snapshots};
};

getSearchConfig = function(numSolutions, constraints) {
  var primaries, secondaries;
  primaries = constraints.primaries;
  secondaries = constraints.secondaries;
  return {
    primaries,
    secondaries,
    numSolutions,
    rows: constraints.entries
  };
};

findAll = function(constraints) {
  return search(getSearchConfig(2e308, constraints));
};

findOne = function(constraints) {
  return search(getSearchConfig(1, constraints));
};

// find = (constraints, numSolutions) -> search getSearchConfig numSolutions, constraints
// findRaw = (config) -> search config
makeData = function({header, primaries, secondaries, options}) {
  var entries, entryCount, i, index, item, j, k, key, len, len1, option, p, ref;
  primaries = primaries.split(' ');
  secondaries = secondaries.split(' ');
  index = {};
  ref = primaries.concat(secondaries);
  for (i = j = 0, len = ref.length; j < len; i = ++j) {
    p = ref[i];
    index[p] = i;
  }
  entries = {};
  entryCount = 0;
  for (k = 0, len1 = options.length; k < len1; k++) {
    option = options[k];
    option = option.split(' ');
    key = option.shift();
    entryCount += option.length;
    entries[key] = (function() {
      var len2, m, results;
      results = [];
      for (m = 0, len2 = option.length; m < len2; m++) {
        item = option[m];
        results.push(index[item]);
      }
      return results;
    })();
  }
  console.log(`${primaries.length}+${secondaries.length} items, ${options.length} options, ${entryCount} entries`);
  return {primaries, secondaries, entries};
};

module.exports = {makeData, search, getSearchConfig, findAll, findOne};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2020\037-DLX\coffee\dlx.coffee