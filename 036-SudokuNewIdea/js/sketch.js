// Generated by CoffeeScript 2.4.1
var BIT, BLOCK, BLOCK_NDX, N_BIT, ZERO, calc, compact, construct, fetchCandidates, i, j, len, makeList, pretty, puzzle, range, ref, short, solve, solveCount, transform,
  indexOf = [].indexOf;

BLOCK = Array(81).fill(0);

BLOCK_NDX = Array(81).fill(0);

N_BIT = Array(81).fill(0);

ZERO = Array(512).fill(0);

BIT = Array(512).fill(0);

solveCount = 0;

range = function(n) {
  return (function() {
    var results = [];
    for (var j = 0; 0 <= n ? j < n : j > n; 0 <= n ? j++ : j--){ results.push(j); }
    return results;
  }).apply(this);
};

pretty = function(m) {
  var j, len, r, results;
  results = [];
  for (j = 0, len = m.length; j < len; j++) {
    r = m[j];
    results.push(r.join(' '));
  }
  return results;
};

construct = function() { // initialization of lookup tables 
  var j, l, len, len1, len2, o, ptr, ref, ref1, ref2, results, x, y;
  ref = range(0x200);
  for (j = 0, len = ref.length; j < len; j++) {
    x = ref[j];
    N_BIT[x] = range(9).reduce((function(s, n) {
      return s + (x >> n & 1);
    }), 0);
    ZERO[x] = ~x & -(~x);
  }
  ref1 = range(9);
  for (l = 0, len1 = ref1.length; l < len1; l++) {
    x = ref1[l];
    BIT[1 << x] = x;
  }
  ref2 = range(9);
  results = [];
  for (o = 0, len2 = ref2.length; o < len2; o++) {
    y = ref2[o];
    results.push((function() {
      var len3, q, ref3, results1;
      ref3 = range(9);
      results1 = [];
      for (q = 0, len3 = ref3.length; q < len3; q++) {
        x = ref3[q];
        ptr = 9 * y + x;
        BLOCK[ptr] = (y / 3 | 0) * 3 + (x / 3 | 0);
        results1.push(BLOCK_NDX[ptr] = (y % 3) * 3 + x % 3);
      }
      return results1;
    })());
  }
  return results;
};

// console.log "N_BIT #{N_BIT} #{N_BIT.length}"
// console.log "ZERO #{ZERO} #{ZERO.length}"
// console.log "BIT #{BIT} #{BIT.length}"
//console.log "BLOCK #{BLOCK} #{BLOCK.length}"
//console.log "BLOCK_NDX #{BLOCK_NDX} #{BLOCK_NDX.length}"
transform = function(p) {
  var arr, ch, i, j, len, ref, result;
  arr = ((function() {
    var j, len, results;
    results = [];
    for (j = 0, len = p.length; j < len; j++) {
      ch = p[j];
      results.push(parseInt(ch));
    }
    return results;
  })()).reverse();
  result = [];
  ref = range(9);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    result.push(arr.slice(9 * i, 9 * i + 9));
  }
  return result;
};

calc = function(m) {
  var blk, col, index, j, l, len, len1, msk, ref, ref1, row, v, x, y;
  row = Array(9).fill(0);
  col = Array(9).fill(0);
  blk = Array(9).fill(0);
  ref = range(9);
  for (j = 0, len = ref.length; j < len; j++) {
    y = ref[j];
    ref1 = range(9);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      x = ref1[l];
      index = 9 * y + x;
      v = m[y][x] - 1;
      if (v >= 0) {
        msk = 1 << v;
        col[x] |= msk;
        row[y] |= msk;
        blk[BLOCK[index]] |= msk;
      }
    }
  }
  return [row, col, blk];
};

fetchCandidates = function(lst) {
  var candidates, makeCandidates;
  candidates = [];
  makeCandidates = function(lst, selected = []) {
    var digit, j, len, ref, results;
    if (selected.length === 9) {
      candidates.push(selected.slice());
      return;
    }
    ref = lst[selected.length];
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      digit = ref[j];
      if (indexOf.call(selected, digit) < 0) {
        selected.push(digit);
        makeCandidates(lst, selected, candidates);
        results.push(selected.pop());
      } else {
        results.push(void 0);
      }
    }
    return results;
  };
  makeCandidates(lst);
  return candidates;
};

makeList = function(row, col, blk, m, y) {
  var index, j, k, l, len, len1, msk, pattern, ref, ref1, res, result, x;
  result = [];
  ref = range(9);
  for (j = 0, len = ref.length; j < len; j++) {
    x = ref[j];
    index = 9 * y + x;
    pattern = row[y] | col[x] | blk[BLOCK[index]];
    //console.log pattern
    res = [];
    if (m[y][x] === 0) {
      ref1 = range(9);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        k = ref1[l];
        msk = 1 << k;
        if ((msk & pattern) === 0) {
          res.push(k + 1);
        }
      }
    } else {
      res.push(m[y][x]);
    }
    if (res.length === 0) {
      return [];
    }
    result.push(res);
  }
  return result;
};

compact = function(m, y) {
  var i, j, len, ref, result;
  result = '';
  ref = range(y);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    result += ' ' + m[i].join('');
  }
  return result;
};

short = function(m) {
  var j, len, r, result;
  result = '';
  for (j = 0, len = m.length; j < len; j++) {
    r = m[j];
    result += ' ' + r.join('');
  }
  return result;
};

construct();

solve = function(m, y = 0) {
  var blk, c, cands, col, j, len, m1, result, row;
  solveCount++;
  //if y==0 then console.log pretty m
  //console.log compact m,y # + '   '.repeat(y) + y
  if (y === 9) {
    console.log(pretty(m));
    return true;
  }
  [row, col, blk] = calc(m);
  //for i in range 9
  //	console.log "#{short makeList row,col,blk,m,i}" # [[1,3,6,9],[2],[1,3,6,9],[4,8,9],[5],[4,6,9],[7],[3,4,8,9],[1,4,8,9]]
  result = makeList(row, col, blk, m, y); // [[1,3,6,9],[2],[1,3,6,9],[4,8,9],[5],[4,6,9],[7],[3,4,8,9],[1,4,8,9]]
  if (result.length === 0) {
    return false;
  }
  cands = fetchCandidates(result); // lista med mÃ¶jliga rader, t ex 38 kandidater
  console.log(cands.length, '*'.repeat(cands.length));
  //if cands.length > 0 
  m1 = m.slice();
//  t ex [9,2,6,8,5,4,7,3,1] 
  for (j = 0, len = cands.length; j < len; j++) {
    c = cands[j];
    m1[y] = c;
    if (solve(m1, y + 1)) {
      return true;
    }
  }
  return false;
};

//console.log mm.join ''

// filename = 'all_17'
// fs = require 'fs'
// puzzles = fs.readFileSync(filename).toString().split '\n'
// len = puzzles.shift()

//for puzzle in puzzles                                                                              reverse
//puzzle = '000000010400000000020000000000050407008000300001090000300400200050100000000806000' #  20 ms # 35345  11.5s #2029753
//puzzle = '002000700010000060500000018000037000000049000004102300003020900080000050600000002' #  90 ms # 17355  602ms #  66750
//puzzle = '002000700010000060500000018003020900080000050600000002000037000000049000004102300' # 965 ms #169930  86ms  #  15624
puzzle = '020050700400100006800003000200008003040020500000600010002090000090000005704000900'; //  63 ms #  9625  230us #     21

//console.log puzzle
console.time('CPU');

ref = range(1);
for (j = 0, len = ref.length; j < len; j++) {
  i = ref[j];
  solveCount = 0;
  solve(transform(puzzle));
}

console.timeEnd('CPU');

console.log(solveCount);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\Lab\2020\036-SudokuNewIdea\coffee\sketch.coffee