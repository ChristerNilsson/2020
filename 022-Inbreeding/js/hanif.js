// Generated by CoffeeScript 2.4.1
var Calculator, facit, i, j, k, l, len, len1, ref, ref1, tree;

Calculator = class Calculator {
  constructor(persons) {
    this.add = this.add.bind(this);
    this.findPaths = this.findPaths.bind(this);
    this.persons = persons;
  }

  add(father = 0, mother = 0) {
    return this.persons.push([father, mother]);
  }

  findPaths(acc, p) {
    var father, mother;
    if (p === 0) {
      return [];
    }
    acc = acc.slice();
    acc.push(p);
    [father, mother] = this.persons[p];
    return [acc].concat(this.findPaths(acc, mother)).concat(this.findPaths(acc, father));
  }

  hasDuplicates(arr) {
    return new Set(arr).size !== arr.length;
  }

  findAncestorPaths(a, b) {
    var aPath, aPaths, bPath, bPaths, ipath, jpath, k, l, len, len1, len2, m, nodeToCheck, path, paths, result;
    result = [];
    aPaths = this.findPaths([], a);
    bPaths = this.findPaths([], b);
    if (aPaths.length > 1 && bPaths.length > 1) {
      for (k = 0, len = aPaths.length; k < len; k++) {
        ipath = aPaths[k];
        nodeToCheck = _.last(ipath);
        for (l = 0, len1 = bPaths.length; l < len1; l++) {
          jpath = bPaths[l];
          if (nodeToCheck === _.last(jpath)) {
            aPath = ipath.slice(0, -1);
            bPath = jpath.slice(0, -1);
            if (!this.hasDuplicates(aPath.concat(bPath))) {
              result.push(aPath.length + jpath.length);
            }
          }
        }
      }
    } else {
      if (aPaths.length === 0 || bPaths.length > aPaths.length) {
        nodeToCheck = a;
        paths = bPaths;
      } else {
        nodeToCheck = b;
        paths = aPaths;
      }
      for (m = 0, len2 = paths.length; m < len2; m++) {
        path = paths[m];
        if (nodeToCheck === _.last(path)) {
          result.push(path.length);
        }
      }
    }
    return result;
  }

  cell(a, b) { // a,b integers
    var paths;
    paths = this.findAncestorPaths(a, b);
    return paths.reduce((function(total, n) {
      return total + Math.pow(2, 1 - n);
    }), 0);
  }

};

//################
tree = new Calculator([[0, 0], [0, 0], [1, 0], [1, 0], [1, 0], [3, 2], [3, 4], [5, 6]]);

facit = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1 / 2, 1 / 2, 1 / 2, 1 / 2, 1 / 2, 1 / 2], [0, 1 / 2, 1, 1 / 4, 1 / 4, 5 / 8, 1 / 4, 7 / 16], [0, 1 / 2, 1 / 4, 1, 1 / 4, 5 / 8, 5 / 8, 5 / 8], [0, 1 / 2, 1 / 4, 1 / 4, 1, 1 / 4, 5 / 8, 7 / 16], [0, 1 / 2, 5 / 8, 5 / 8, 1 / 4, 1 + 1 / 8, 7 / 16, 25 / 32], [0, 1 / 2, 1 / 4, 5 / 8, 5 / 8, 7 / 16, 1 + 1 / 8, 25 / 32], [0, 1 / 2, 7 / 16, 5 / 8, 7 / 16, 25 / 32, 25 / 32, 1 + 7 / 32]];

assert(1 / 4, tree.cell(2, 3));

assert(1 / 4, tree.cell(3, 4));

assert(7 / 16, tree.cell(5, 6));

ref = range(1, 7);
for (k = 0, len = ref.length; k < len; k++) {
  i = ref[k];
  ref1 = range(1, 7);
  for (l = 0, len1 = ref1.length; l < len1; l++) {
    j = ref1[l];
    if (i !== j) {
      assert(facit[i][j], tree.cell(i, j));
    }
  }
}

//################
tree = new Calculator([[0, 0], [0, 0], [0, 0], [1, 2], [1, 2], [3, 4], [3, 4], [5, 6], [5, 6], [7, 8], [7, 8], [9, 10], [9, 10]]);

assert(0, tree.cell(1, 2));

assert(0.5, tree.cell(3, 4));

assert(0.75, tree.cell(5, 6));

assert(0.875, tree.cell(7, 8));

assert(0.9375, tree.cell(9, 10));

assert(0.96875, tree.cell(11, 12));

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\Lab\2020\022-Inbreeding\coffee\hanif.coffee