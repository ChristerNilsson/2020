// Generated by CoffeeScript 2.4.1
var MODE, circle, constraints, current, draw, drawChessBoard, drawExpanded, drawLine, drawLinks, drawOptions, drawYellowLine, explanations, keyPressed, mouseMoved, mousePressed, preload, range, setup, showChoices, snapshots, yellowKey, yellowSquare,
  indexOf = [].indexOf;

constraints = null;

snapshots = null;

current = 0;

yellowKey = '';

yellowSquare = '';

MODE = 0; // 0=compact 1=expanded

range = null;

circle = function(x, y, r) {
  return ellipse(x, y, 2 * r, 2 * r);
};

explanations = [];

explanations.push('There are 16 primary items, 8 columns and 8 rows\n\nThe matrix is actually 64 options x 46 items\nIt is shown compressed here\nPress Space or click to toggle View Mode\n\nItem CA is chosen\nOption a1 is first\nPress Right Arrow to see option a1 selected');

explanations.push('Items CA and R1 are hidden\nItem CB is chosen\nOption b3 is selected');

explanations.push('Items CB and R3 are hidden\nShortest item is CC\nOption c5 is selected');

explanations.push('Items CC and R5 are hidden\nShortest item is CF\nOption f4 is selected');

explanations.push('Items CF and R4 are hidden\nShortest item is CH\nOption h7 is selected');

explanations.push('Items CH and R7 are hidden\nThe red five indicates backtracking needed\nR6 is missing => h7 backtracked\nf4 is also backtracked as CF has no options left');

explanations.push('c5 is backtracked and replaced by c6\nd2 is selected');

explanations.push('Items CD and R2 are hidden\ne7 is selected');

explanations.push('Items CE and R7 are hidden\nR8 is empty => e7 is backtracked');

explanations.push("d2 is backtracked and replaced by d8");

drawChessBoard = function() {
  var R, c, choices, i, index, j, k, l, len, len1, len2, len3, m, o, ref, ref1, ref2, x, y;
  R = 50;
  x = width / 2 - 4 * R;
  y = 300;
  ref = range(8);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    ref1 = range(8);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j = ref1[l];
      fill((i + j) % 2 === 0 ? 'white' : 'black');
      rect(x + R * i, y + R * j, R, R);
    }
  }
  fill('black');
  ref2 = range(8);
  for (m = 0, len2 = ref2.length; m < len2; m++) {
    i = ref2[m];
    text(8 - i, x - R * 0.2, y + R * (i + 0.5));
    text('abcdefgh'[i], x + R * (i + 0.5), y + 8.3 * R);
  }
  fill('green');
  textSize(24);
  choices = snapshots[current].choices;
  for (index = o = 0, len3 = choices.length; o < len3; index = ++o) {
    c = choices[index];
    if (c === '') {
      continue;
    }
    i = 0.5 + 'abcdefgh'.indexOf(c[0]);
    j = 8 - 0.5 - '12345678'.indexOf(c[1]);
    stroke('black');
    fill(index === choices.length - 1 ? 'yellow' : 'green');
    circle(x + R * i, y + R * j, 0.4 * R);
    noStroke();
    fill(index === choices.length - 1 ? 'green' : 'yellow');
    text(c, x + R * i, y + R * j);
  }
  return drawYellowLine();
};

preload = function() {
  return fetch("8queens.json").then((response) => {
    return response.json();
  }).then((json) => {
    var k, len, snapshot;
    ({constraints, snapshots} = json);
    constraints.primaries = constraints.primaries.split(' ');
    constraints.secondaries = constraints.secondaries.split(' ');
    for (k = 0, len = snapshots.length; k < len; k++) {
      snapshot = snapshots[k];
      snapshot.choices = snapshot.choices === '' ? [] : snapshot.choices.split(' ');
    }
    return console.log(json);
  });
};

setup = function() {
  createCanvas(1180, 1080);
  return range = _.range;
};

drawOptions = function(prompt, offset, w, constraints, items) {
  var choices, i, item, j, k, key, len, n, option, results;
  textAlign(LEFT, CENTER);
  fill('yellow');
  noStroke();
  text(prompt, offset + 25 * 0.7, 50);
  if (prompt === 'primary items') {
    n = _.size(items);
    choices = snapshots[current].choices;
    fill(n + 2 * choices.length === 16 ? 'yellow' : 'red');
    text(n, offset + 120, 50);
  }
  stroke('yellow');
  strokeWeight(1);
  line(offset + 25 * 0.7, 60, offset + w + 10, 60);
  line(offset + 25 * 0.7, 60, offset + w + 10, 60);
  noStroke();
  textAlign(CENTER, CENTER);
  results = [];
  for (i = k = 0, len = constraints.length; k < len; i = ++k) {
    key = constraints[i];
    fill('yellow');
    text(key, offset + 25 + 25 * i, 50 + 25);
    if (MODE === 0) {
      if (items[key]) {
        option = items[key].split(' ');
        results.push((function() {
          var l, len1, results1;
          results1 = [];
          for (j = l = 0, len1 = option.length; l < len1; j = ++l) {
            item = option[j];
            fill(item === yellowSquare ? 'white' : 'black');
            results1.push(text(item, offset + 25 + 25 * i, 100 + 25 * j));
          }
          return results1;
        })());
      } else {
        results.push(void 0);
      }
    } else {
      results.push(void 0);
    }
  }
  return results;
};

showChoices = function() {
  var c, choices, index, k, l, len, len1, r, ref, results, x, y;
  r = 20;
  fill('white');
  ref = range(8);
  for (k = 0, len = ref.length; k < len; k++) {
    index = ref[k];
    x = 21 + 2 * r * index;
    y = 21;
    circle(x, y, r);
  }
  fill('green');
  textSize(24);
  textAlign(CENTER, CENTER);
  choices = snapshots[current].choices;
  results = [];
  for (index = l = 0, len1 = choices.length; l < len1; index = ++l) {
    c = choices[index];
    x = 21 + 2 * r * index;
    y = 21;
    fill(index === choices.length - 1 ? 'yellow' : 'green');
    circle(x, y, r);
    noStroke();
    fill(index === choices.length - 1 ? 'green' : 'yellow');
    results.push(text(c, x, y));
  }
  return results;
};

drawLinks = function(offset, entries, constraints, items) {
  var i, k, key, keys, l, len, len1, results, x, y;
  fill('black');
  textSize(12);
  keys = _.keys(entries);
  stroke('black');
  for (i = k = 0, len = keys.length; k < len; i = ++k) {
    key = keys[i];
    y = 100 + 15 * i;
    line(0, y, width, y);
  }
  results = [];
  for (i = l = 0, len1 = constraints.length; l < len1; i = ++l) {
    key = constraints[i];
    x = offset + 25 + 25 * i;
    stroke('black');
    results.push(line(x, 100, x, height));
  }
  return results;
};

drawExpanded = function(offset, entries, constraints, items) {
  var i, item, j, k, key, keys, l, len, len1, option, results, x, y;
  fill('black');
  textSize(16);
  keys = _.keys(entries);
  stroke('black');
  for (i = k = 0, len = keys.length; k < len; i = ++k) {
    key = keys[i];
    y = 100 + 15 * i;
  }
  results = [];
  for (i = l = 0, len1 = constraints.length; l < len1; i = ++l) {
    key = constraints[i];
    x = offset + 25 + 25 * i;
    stroke('black');
    if (items[key]) {
      option = items[key].split(' ');
      results.push((function() {
        var len2, m, results1;
        results1 = [];
        for (m = 0, len2 = option.length; m < len2; m++) {
          item = option[m];
          j = keys.indexOf(item);
          y = 100 + 15 * j;
          stroke(128);
          line(x, y - 8, x, y + 8);
          line(x - 10, y, x + 8, y);
          noStroke();
          fill(yellowSquare === item ? 'white' : 'black');
          results1.push(text(item, x, y));
        }
        return results1;
      })());
    } else {
      results.push(void 0);
    }
  }
  return results;
};

draw = function() {
  var snapshot;
  background(128);
  if (!constraints) {
    return;
  }
  textSize(14);
  textAlign(CENTER, CENTER);
  fill('yellow');
  snapshot = snapshots[current];
  drawOptions('primary items', 0 * 25, 16 * 25, constraints.primaries, snapshot.primaries);
  drawOptions('secondary items', 16 * 25, 30 * 25, constraints.secondaries, snapshot.secondaries);
  if (MODE === 0) {
    drawChessBoard();
  }
  textSize(32);
  showChoices();
  fill('black');
  textAlign(RIGHT, CENTER);
  text(`snapshot ${current} of ${snapshots.length - 1}`, width - 40, 25);
  textAlign(CENTER, CENTER);
  text('Dancing Links', width / 2, 25);
  if (MODE === 0) {
    textAlign(LEFT, TOP);
    textSize(14);
    fill('white');
    text(explanations[current], 15, 100 + 8 * 25);
  }
  if (MODE === 1) {
    drawLinks(0 * 25, constraints.entries, constraints.primaries, snapshot.primaries);
    drawLinks(16 * 25, constraints.entries, constraints.secondaries, snapshot.secondaries);
    drawExpanded(0 * 25, constraints.entries, constraints.primaries, snapshot.primaries);
    return drawExpanded(16 * 25, constraints.entries, constraints.secondaries, snapshot.secondaries);
  }
};

keyPressed = function() {
  if (key === ' ') {
    MODE = 1 - MODE;
    return;
  }
  if (key === 'ArrowLeft') {
    current--;
  }
  if (key === 'ArrowRight') {
    current++;
  }
  if (current < 0) {
    current = 0;
  }
  if (current >= snapshots.length) {
    current = snapshots.length - 1;
  }
  return draw();
};

drawLine = function(i1, j1, i2, j2) {
  var R, x, y;
  R = 50;
  x = width / 2 - 4 * R;
  y = 300;
  return line(x + R * (i1 + 0.5), y + R * (j1 + 0.5), x + R * (i2 + 0.5), y + R * (j2 + 0.5));
};

mousePressed = function() {
  return MODE = 1 - MODE;
};

mouseMoved = function() {
  var R, i, index, j, k, key, l, len, len1, len2, m, ref, ref1, ref2, results, results1, x, y;
  R = 50;
  x = width / 2 - 4 * R;
  y = 300;
  yellowKey = '';
  yellowSquare = "";
  if ((50 < mouseY && mouseY < 300)) {
    ref = constraints.primaries;
    for (index = k = 0, len = ref.length; k < len; index = ++k) {
      key = ref[index];
      if ((25 * (index + 0.5) < mouseX && mouseX < 25 * (index + 1.5))) {
        yellowKey = key;
      }
    }
    ref1 = constraints.secondaries;
    results = [];
    for (index = l = 0, len1 = ref1.length; l < len1; index = ++l) {
      key = ref1[index];
      if ((25 * (index + 16.5) < mouseX && mouseX < 25 * (index + 17.5))) {
        results.push(yellowKey = key);
      } else {
        results.push(void 0);
      }
    }
    return results;
  } else if ((x < mouseX && mouseX < x + R * 8) && (y < mouseY && mouseY < y + R * 8)) {
    ref2 = range(8);
    results1 = [];
    for (m = 0, len2 = ref2.length; m < len2; m++) {
      i = ref2[m];
      results1.push((function() {
        var len3, o, ref3, results2;
        ref3 = range(8);
        results2 = [];
        for (o = 0, len3 = ref3.length; o < len3; o++) {
          j = ref3[o];
          if ((y + R * (7 - j) < mouseY && mouseY < y + R * (7 - j + 1))) {
            if ((x + R * i < mouseX && mouseX < x + R * (i + 1))) {
              results2.push(yellowSquare = 'abcdefgh'[i] + '12345678'[j]);
            } else {
              results2.push(void 0);
            }
          } else {
            results2.push(void 0);
          }
        }
        return results2;
      })());
    }
    return results1;
  }
};

drawYellowLine = function() {
  var i, j, key, ref, ref1;
  key = yellowKey;
  if (key === '') {
    return;
  }
  stroke(255, 255, 0, 128);
  strokeWeight(25);
  if (ref = key[0], indexOf.call("CR", ref) >= 0) {
    i = 'ABCDEFGH'.indexOf(key[1]);
    j = '12345678'.indexOf(key[1]);
    if (key[0] === 'C') {
      drawLine(i, 0, i, 7);
    }
    if (key[0] === 'R') {
      drawLine(0, 7 - j, 7, 7 - j);
    }
  }
  if (ref1 = key[0], indexOf.call("AB", ref1) >= 0) {
    i = 'ABCDEFGHIJKLMNO'.indexOf(key[1]);
    if (key[0] === 'A') {
      if (i < 7) {
        drawLine(0, 7 - i, i, 7);
      } else {
        drawLine(i - 7, 0, 7, 14 - i);
      }
    }
    if (key[0] === 'B') {
      if (i < 7) {
        drawLine(7, 7 - i, 7 - i, 7);
      } else {
        drawLine(0, 14 - i, 14 - i, 0);
      }
    }
  }
  noStroke();
  return strokeWeight(1);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2020\040-QueensViewer\coffee\sketch.coffee