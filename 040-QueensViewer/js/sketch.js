// Generated by CoffeeScript 2.4.1
var MODE, constraints, current, draw, drawChessBoard, drawExpanded, drawLine, drawLinks, drawOptions, drawYellowLine, explanations, keyPressed, mouseMoved, preload, setColor, setup, showChoices, snapshots, yellowKey,
  indexOf = [].indexOf;

constraints = null;

snapshots = null;

current = 0;

yellowKey = '';

MODE = 0; // 0=compact 1=expanded

explanations = [];

explanations.push('There are 16 primary items, 8 columns and 8 rows\n\nThe matrix is actually 64 options x 46 items\nIt is shown compressed here\nPress Space to toggle View Mode\n\nItem CA is chosen\nOption a1 is first\nPress Right Arrow to see option a1 selected');

explanations.push('Items CA and R1 are hidden\nItem CB is chosen\nOption b3 is selected');

explanations.push('Items CB and R3 are hidden\nShortest item is CC\nOption c5 is selected');

explanations.push('Items CC and R5 are hidden\nShortest item is CF\nOption f4 is selected');

explanations.push('Items CF and R4 are hidden\nShortest item is CH\nOption h7 is selected');

explanations.push('Items CH and R7 are hidden\nThe red five indicates backtracking needed\nR6 is missing => h7 backtracked\nf4 is also backtracked as CF has no options left');

explanations.push('c5 is backtracked and replaced by c6\nd2 is selected');

explanations.push('Items CD and R2 are hidden\ne7 is selected');

explanations.push('Items CE and R7 are hidden\nR8 is empty => e7 is backtracked');

explanations.push("d2 is backtracked and replaced by d8");

setColor = function(item, options) {
  return fill(options.includes(item) ? 'black' : 'red');
};

drawChessBoard = function() {
  var R, c, choices, i, index, j, k, l, len, len1, len2, len3, m, o, ref, ref1, ref2, x, y;
  R = 50;
  x = width / 2 - 4 * R;
  y = 300;
  ref = range(8);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    ref1 = range(8);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j = ref1[l];
      fill((i + j) % 2 === 0 ? 'white' : 'black');
      rect(x + R * i, y + R * j, R, R);
    }
  }
  fill('black');
  ref2 = range(8);
  for (m = 0, len2 = ref2.length; m < len2; m++) {
    i = ref2[m];
    text(8 - i, x - R * 0.2, y + R * (i + 0.5));
    text('abcdefgh'[i], x + R * (i + 0.5), y + 8.3 * R);
  }
  fill('green');
  textSize(24);
  choices = snapshots[current].choices.trim().split(' ');
  for (index = o = 0, len3 = choices.length; o < len3; index = ++o) {
    c = choices[index];
    if (c === '') {
      continue;
    }
    i = 0.5 + 'abcdefgh'.indexOf(c[0]);
    j = 8 - 0.5 - '12345678'.indexOf(c[1]);
    stroke('black');
    fill(index === choices.length - 1 ? 'yellow' : 'green');
    circle(x + R * i, y + R * j, 0.4 * R);
    noStroke();
    fill(index === choices.length - 1 ? 'green' : 'yellow');
    text(c, x + R * i, y + R * j);
  }
  return drawYellowLine();
};

preload = function() {
  return fetch("8queens.json").then((response) => {
    return response.json();
  }).then((json) => {
    ({constraints, snapshots} = json);
    return console.log(json);
  });
};

setup = function() {
  return createCanvas(1180, 1080);
};

drawOptions = function(prompt, offset, w, constraints, items) {
  var choices, i, item, j, k, key, len, n, option, results;
  textAlign(LEFT, CENTER);
  fill('yellow');
  noStroke();
  text(prompt, offset + 25 * 0.7, 50);
  if (prompt === 'primary items') {
    n = _.size(items);
    choices = snapshots[current].choices;
    choices = choices === '' ? [] : choices.split(' ');
    fill(n + 2 * choices.length === 16 ? 'yellow' : 'red');
    text(n, offset + 120, 50);
  }
  stroke('yellow');
  strokeWeight(1);
  line(offset + 25 * 0.7, 60, offset + w + 10, 60);
  line(offset + 25 * 0.7, 60, offset + w + 10, 60);
  noStroke();
  textAlign(CENTER, CENTER);
  results = [];
  for (i = k = 0, len = constraints.length; k < len; i = ++k) {
    key = constraints[i];
    fill('yellow');
    text(key, offset + 25 + 25 * i, 50 + 25);
    if (MODE === 0) {
      if (items[key]) {
        option = items[key].split(' ');
        results.push((function() {
          var l, len1, results1;
          results1 = [];
          for (j = l = 0, len1 = option.length; l < len1; j = ++l) {
            item = option[j];
            fill('black');
            results1.push(text(item, offset + 25 + 25 * i, 100 + 25 * j));
          }
          return results1;
        })());
      } else {
        results.push(void 0);
      }
    } else {
      results.push(void 0);
    }
  }
  return results;
};

showChoices = function() {
  var c, i, k, l, len, len1, ref, ref1, results;
  fill('white');
  stroke('black');
  ref = range(8);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    rect(20 + 40 * i, 10, 40, 30);
  }
  noStroke();
  fill('black');
  textAlign(CENTER, CENTER);
  ref1 = snapshots[current].choices.trim().split(' ');
  results = [];
  for (i = l = 0, len1 = ref1.length; l < len1; i = ++l) {
    c = ref1[i];
    results.push(text(c, 40 + 40 * i, 28));
  }
  return results;
};

drawLinks = function(offset, entries, constraints, items) {
  var i, k, key, keys, l, len, len1, results, x, y;
  fill('black');
  textSize(12);
  keys = _.keys(entries);
  stroke('black');
  for (i = k = 0, len = keys.length; k < len; i = ++k) {
    key = keys[i];
    y = 100 + 15 * i;
    line(0, y, width, y);
  }
  results = [];
  for (i = l = 0, len1 = constraints.length; l < len1; i = ++l) {
    key = constraints[i];
    x = offset + 25 + 25 * i;
    stroke('black');
    results.push(line(x, 100, x, height));
  }
  return results;
};

drawExpanded = function(offset, entries, constraints, items) {
  var i, item, j, k, key, keys, l, len, len1, option, results, x, y;
  fill('black');
  textSize(12);
  keys = _.keys(entries);
  stroke('black');
  for (i = k = 0, len = keys.length; k < len; i = ++k) {
    key = keys[i];
    y = 100 + 15 * i;
  }
  results = [];
  for (i = l = 0, len1 = constraints.length; l < len1; i = ++l) {
    key = constraints[i];
    x = offset + 25 + 25 * i;
    stroke('black');
    if (items[key]) {
      option = items[key].split(' ');
      results.push((function() {
        var len2, m, results1;
        results1 = [];
        for (m = 0, len2 = option.length; m < len2; m++) {
          item = option[m];
          j = keys.indexOf(item);
          y = 100 + 15 * j;
          stroke(128);
          line(x, y - 8, x, y + 8);
          line(x - 8, y, x + 8, y);
          noStroke();
          results1.push(text(item, x, y));
        }
        return results1;
      })());
    } else {
      results.push(void 0);
    }
  }
  return results;
};

draw = function() {
  var snapshot;
  bg(0.5);
  if (!constraints) {
    return;
  }
  textSize(14);
  textAlign(CENTER, CENTER);
  fill('yellow');
  snapshot = snapshots[current];
  drawOptions('primary items', 0 * 25, 16 * 25, constraints.primaries.split(' '), snapshot.primaries);
  drawOptions('secondary items', 16 * 25, 30 * 25, constraints.secondaries.split(' '), snapshot.secondaries);
  if (MODE === 0) {
    drawChessBoard();
  }
  fill('black');
  textSize(32);
  showChoices();
  textAlign(RIGHT, CENTER);
  text(`snapshot ${current} of ${snapshots.length - 1}`, width - 40, 25);
  textAlign(CENTER, CENTER);
  text('Dancing Links', width / 2, 25);
  if (MODE === 0) {
    textAlign(LEFT, TOP);
    textSize(14);
    fill('white');
    text(explanations[current], 15, 100 + 8 * 25);
  }
  if (MODE === 1) {
    drawLinks(0 * 25, constraints.entries, constraints.primaries.split(' '), snapshot.primaries);
    drawLinks(16 * 25, constraints.entries, constraints.secondaries.split(' '), snapshot.secondaries);
    drawExpanded(0 * 25, constraints.entries, constraints.primaries.split(' '), snapshot.primaries);
    return drawExpanded(16 * 25, constraints.entries, constraints.secondaries.split(' '), snapshot.secondaries);
  }
};

keyPressed = function() {
  if (key === ' ') {
    MODE = 1 - MODE;
    return;
  }
  if (key === 'ArrowLeft') {
    current--;
  }
  if (key === 'ArrowRight') {
    current++;
  }
  if (current < 0) {
    current = 0;
  }
  if (current >= snapshots.length) {
    current = snapshots.length - 1;
  }
  return draw();
};

drawLine = function(i1, j1, i2, j2) {
  var R, x, y;
  R = 50;
  x = width / 2 - 4 * R;
  y = 300;
  return line(x + R * (i1 + 0.5), y + R * (j1 + 0.5), x + R * (i2 + 0.5), y + R * (j2 + 0.5));
};

mouseMoved = function() {
  var index, k, key, l, len, len1, ref, ref1, results;
  yellowKey = '';
  if ((50 < mouseY && mouseY < 300)) {
    ref = constraints.primaries.split(' ');
    for (index = k = 0, len = ref.length; k < len; index = ++k) {
      key = ref[index];
      if ((25 * (index + 0.5) < mouseX && mouseX < 25 * (index + 1.5))) {
        yellowKey = key;
      }
    }
    ref1 = constraints.secondaries.split(' ');
    results = [];
    for (index = l = 0, len1 = ref1.length; l < len1; index = ++l) {
      key = ref1[index];
      if ((25 * (index + 16.5) < mouseX && mouseX < 25 * (index + 17.5))) {
        results.push(yellowKey = key);
      } else {
        results.push(void 0);
      }
    }
    return results;
  }
};

drawYellowLine = function() {
  var i, j, key, ref, ref1;
  key = yellowKey;
  if (key === '') {
    return;
  }
  stroke(255, 255, 0, 128);
  strokeWeight(25);
  if (ref = key[0], indexOf.call("CR", ref) >= 0) {
    i = 'ABCDEFGH'.indexOf(key[1]);
    j = '12345678'.indexOf(key[1]);
    if (key[0] === 'C') {
      drawLine(i, 0, i, 7);
    }
    if (key[0] === 'R') {
      drawLine(0, 7 - j, 7, 7 - j);
    }
  }
  if (ref1 = key[0], indexOf.call("AB", ref1) >= 0) {
    i = 'ABCDEFGHIJKLMNO'.indexOf(key[1]);
    if (key[0] === 'A') {
      if (i < 7) {
        drawLine(0, 7 - i, i, 7);
      } else {
        drawLine(i - 7, 0, 7, 14 - i);
      }
    }
    if (key[0] === 'B') {
      if (i < 7) {
        drawLine(7, 7 - i, 7 - i, 7);
      } else {
        drawLine(0, 14 - i, 14 - i, 0);
      }
    }
  }
  noStroke();
  return strokeWeight(1);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsSUFBQSxFQUFBLFdBQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLGNBQUEsRUFBQSxZQUFBLEVBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxXQUFBLEVBQUEsY0FBQSxFQUFBLFlBQUEsRUFBQSxVQUFBLEVBQUEsVUFBQSxFQUFBLE9BQUEsRUFBQSxRQUFBLEVBQUEsS0FBQSxFQUFBLFdBQUEsRUFBQSxTQUFBLEVBQUEsU0FBQTtFQUFBOztBQUFBLFdBQUEsR0FBYzs7QUFDZCxTQUFBLEdBQVk7O0FBQ1osT0FBQSxHQUFVOztBQUNWLFNBQUEsR0FBWTs7QUFDWixJQUFBLEdBQU8sRUFKUDs7QUFNQSxZQUFBLEdBQWU7O0FBQ2YsWUFBWSxDQUFDLElBQWIsQ0FBa0Isc1BBQWxCOztBQUNBLFlBQVksQ0FBQyxJQUFiLENBQWtCLHNFQUFsQjs7QUFDQSxZQUFZLENBQUMsSUFBYixDQUFrQix3RUFBbEI7O0FBQ0EsWUFBWSxDQUFDLElBQWIsQ0FBa0Isd0VBQWxCOztBQUNBLFlBQVksQ0FBQyxJQUFiLENBQWtCLHdFQUFsQjs7QUFDQSxZQUFZLENBQUMsSUFBYixDQUFrQiwySkFBbEI7O0FBQ0EsWUFBWSxDQUFDLElBQWIsQ0FBa0Isc0RBQWxCOztBQUNBLFlBQVksQ0FBQyxJQUFiLENBQWtCLDRDQUFsQjs7QUFDQSxZQUFZLENBQUMsSUFBYixDQUFrQiw4REFBbEI7O0FBQ0EsWUFBWSxDQUFDLElBQWIsQ0FBa0Isc0NBQWxCOztBQUVBLFFBQUEsR0FBVyxRQUFBLENBQUMsSUFBRCxFQUFPLE9BQVAsQ0FBQTtTQUFtQixJQUFBLENBQVEsT0FBTyxDQUFDLFFBQVIsQ0FBaUIsSUFBakIsQ0FBSCxHQUE4QixPQUE5QixHQUEyQyxLQUFoRDtBQUFuQjs7QUFFWCxjQUFBLEdBQWlCLFFBQUEsQ0FB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QVMsQ0FBVCxFQUFXLEVBQUEsR0FBRyxDQUFkLEVBQWdCLEVBQUEsR0FBRyxDQUFuQixFQUFxQixDQUFyQixFQUF4QztPQUREO0tBSkQ7O0VBTUEsUUFBQSxDQUFBO1NBQ0EsWUFBQSxDQUFhLENBQWI7QUFqQmdCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3RyYWludHMgPSBudWxsXHJcbnNuYXBzaG90cyA9IG51bGxcclxuY3VycmVudCA9IDBcclxueWVsbG93S2V5ID0gJydcclxuTU9ERSA9IDAgIyAwPWNvbXBhY3QgMT1leHBhbmRlZFxyXG5cclxuZXhwbGFuYXRpb25zID0gW11cclxuZXhwbGFuYXRpb25zLnB1c2ggJ1RoZXJlIGFyZSAxNiBwcmltYXJ5IGl0ZW1zLCA4IGNvbHVtbnMgYW5kIDggcm93c1xcblxcblRoZSBtYXRyaXggaXMgYWN0dWFsbHkgNjQgb3B0aW9ucyB4IDQ2IGl0ZW1zXFxuSXQgaXMgc2hvd24gY29tcHJlc3NlZCBoZXJlXFxuUHJlc3MgU3BhY2UgdG8gdG9nZ2xlIFZpZXcgTW9kZVxcblxcbkl0ZW0gQ0EgaXMgY2hvc2VuXFxuT3B0aW9uIGExIGlzIGZpcnN0XFxuUHJlc3MgUmlnaHQgQXJyb3cgdG8gc2VlIG9wdGlvbiBhMSBzZWxlY3RlZCdcclxuZXhwbGFuYXRpb25zLnB1c2ggJ0l0ZW1zIENBIGFuZCBSMSBhcmUgaGlkZGVuXFxuSXRlbSBDQiBpcyBjaG9zZW5cXG5PcHRpb24gYjMgaXMgc2VsZWN0ZWQnXHJcbmV4cGxhbmF0aW9ucy5wdXNoICdJdGVtcyBDQiBhbmQgUjMgYXJlIGhpZGRlblxcblNob3J0ZXN0IGl0ZW0gaXMgQ0NcXG5PcHRpb24gYzUgaXMgc2VsZWN0ZWQnXHJcbmV4cGxhbmF0aW9ucy5wdXNoICdJdGVtcyBDQyBhbmQgUjUgYXJlIGhpZGRlblxcblNob3J0ZXN0IGl0ZW0gaXMgQ0ZcXG5PcHRpb24gZjQgaXMgc2VsZWN0ZWQnXHJcbmV4cGxhbmF0aW9ucy5wdXNoICdJdGVtcyBDRiBhbmQgUjQgYXJlIGhpZGRlblxcblNob3J0ZXN0IGl0ZW0gaXMgQ0hcXG5PcHRpb24gaDcgaXMgc2VsZWN0ZWQnXHJcbmV4cGxhbmF0aW9ucy5wdXNoICdJdGVtcyBDSCBhbmQgUjcgYXJlIGhpZGRlblxcblRoZSByZWQgZml2ZSBpbmRpY2F0ZXMgYmFja3RyYWNraW5nIG5lZWRlZFxcblI2IGlzIG1pc3NpbmcgPT4gaDcgYmFja3RyYWNrZWRcXG5mNCBpcyBhbHNvIGJhY2t0cmFja2VkIGFzIENGIGhhcyBubyBvcHRpb25zIGxlZnQnXHJcbmV4cGxhbmF0aW9ucy5wdXNoICdjNSBpcyBiYWNrdHJhY2tlZCBhbmQgcmVwbGFjZWQgYnkgYzZcXG5kMiBpcyBzZWxlY3RlZCdcclxuZXhwbGFuYXRpb25zLnB1c2ggJ0l0ZW1zIENEIGFuZCBSMiBhcmUgaGlkZGVuXFxuZTcgaXMgc2VsZWN0ZWQnXHJcbmV4cGxhbmF0aW9ucy5wdXNoICdJdGVtcyBDRSBhbmQgUjcgYXJlIGhpZGRlblxcblI4IGlzIGVtcHR5ID0+IGU3IGlzIGJhY2t0cmFja2VkJ1xyXG5leHBsYW5hdGlvbnMucHVzaCBcImQyIGlzIGJhY2t0cmFja2VkIGFuZCByZXBsYWNlZCBieSBkOFwiXHJcblxyXG5zZXRDb2xvciA9IChpdGVtLCBvcHRpb25zKSAtPiBmaWxsIGlmIG9wdGlvbnMuaW5jbHVkZXMgaXRlbSB0aGVuICdibGFjaycgZWxzZSAncmVkJ1xyXG5cclxuZHJhd0NoZXNzQm9hcmQgPSAoKSAtPlxyXG5cdFIgPSA1MFxyXG5cdHggPSB3aWR0aC8yLTQqUlxyXG5cdHkgPSAzMDBcclxuXHJcblx0Zm9yIGkgaW4gcmFuZ2UgOFxyXG5cdFx0Zm9yIGogaW4gcmFuZ2UgOFxyXG5cdFx0XHRmaWxsIGlmIChpK2opJTI9PTAgdGhlbiAnd2hpdGUnIGVsc2UgJ2JsYWNrJ1xyXG5cdFx0XHRyZWN0IHgrUippLHkrUipqLFIsUlxyXG5cclxuXHRmaWxsICdibGFjaydcclxuXHRmb3IgaSBpbiByYW5nZSA4XHJcblx0XHR0ZXh0IDgtaSx4LVIqMC4yLHkrUiooaSswLjUpXHJcblx0XHR0ZXh0ICdhYmNkZWZnaCdbaV0seCtSKihpKzAuNSkseSs4LjMqUlxyXG5cclxuXHRmaWxsICdncmVlbidcclxuXHR0ZXh0U2l6ZSAyNFxyXG5cdGNob2ljZXMgPSBzbmFwc2hvdHNbY3VycmVudF0uY2hvaWNlcy50cmltKCkuc3BsaXQgJyAnXHJcblx0Zm9yIGMsaW5kZXggaW4gY2hvaWNlc1xyXG5cdFx0aWYgYz09JycgdGhlbiBjb250aW51ZVxyXG5cdFx0aSA9IDAuNSArICdhYmNkZWZnaCcuaW5kZXhPZiBjWzBdXHJcblx0XHRqID0gOCAtIDAuNSAtICcxMjM0NTY3OCcuaW5kZXhPZiBjWzFdXHJcblx0XHRzdHJva2UgJ2JsYWNrJ1xyXG5cdFx0ZmlsbCBpZiBpbmRleCA9PSBjaG9pY2VzLmxlbmd0aC0xIHRoZW4gJ3llbGxvdycgZWxzZSAnZ3JlZW4nXHJcblx0XHRjaXJjbGUgeCtSKmkseStSKmosMC40KlJcclxuXHRcdG5vU3Ryb2tlKClcclxuXHRcdGZpbGwgaWYgaW5kZXggPT0gY2hvaWNlcy5sZW5ndGgtMSB0aGVuICdncmVlbicgZWxzZSAneWVsbG93J1xyXG5cdFx0dGV4dCBjLHgrUippLHkrUipqXHJcblxyXG5cdGRyYXdZZWxsb3dMaW5lKClcclxuXHJcbnByZWxvYWQgPSAtPlxyXG5cdGZldGNoIFwiOHF1ZWVucy5qc29uXCJcclxuXHRcdC50aGVuIChyZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpIFxyXG5cdFx0LnRoZW4gKGpzb24pID0+IFxyXG5cdFx0XHR7Y29uc3RyYWludHMsc25hcHNob3RzfSA9IGpzb25cclxuXHRcdFx0Y29uc29sZS5sb2cganNvblxyXG5cclxuc2V0dXAgPSAtPlxyXG5cdGNyZWF0ZUNhbnZhcyAxMTgwLDEwODBcclxuXHJcbmRyYXdPcHRpb25zID0gKHByb21wdCwgb2Zmc2V0LCB3LCBjb25zdHJhaW50cywgaXRlbXMpIC0+XHJcblxyXG5cdHRleHRBbGlnbiBMRUZULENFTlRFUlxyXG5cdGZpbGwgJ3llbGxvdydcclxuXHRub1N0cm9rZSgpXHJcblx0dGV4dCBwcm9tcHQsIG9mZnNldCsyNSowLjcsNTBcclxuXHJcblx0aWYgcHJvbXB0ID09ICdwcmltYXJ5IGl0ZW1zJ1xyXG5cdFx0biA9IF8uc2l6ZSBpdGVtc1xyXG5cdFx0Y2hvaWNlcyA9IHNuYXBzaG90c1tjdXJyZW50XS5jaG9pY2VzXHJcblx0XHRjaG9pY2VzID0gaWYgY2hvaWNlcyA9PSAnJyB0aGVuIFtdIGVsc2UgY2hvaWNlcy5zcGxpdCAnICdcclxuXHRcdGZpbGwgaWYgbiArIDIgKiBjaG9pY2VzLmxlbmd0aCA9PSAxNiB0aGVuICd5ZWxsb3cnIGVsc2UgJ3JlZCdcclxuXHRcdHRleHQgbiwgb2Zmc2V0KzEyMCw1MFxyXG5cclxuXHRzdHJva2UgJ3llbGxvdydcclxuXHRzdHJva2VXZWlnaHQgMVxyXG5cdGxpbmUgb2Zmc2V0KzI1KjAuNyw2MCxvZmZzZXQrdysxMCw2MFxyXG5cdGxpbmUgb2Zmc2V0KzI1KjAuNyw2MCxvZmZzZXQrdysxMCw2MFxyXG5cdG5vU3Ryb2tlKClcclxuXHJcblx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcclxuXHJcblx0Zm9yIGtleSxpIGluIGNvbnN0cmFpbnRzXHJcblx0XHRmaWxsICd5ZWxsb3cnXHJcblx0XHR0ZXh0IGtleSxvZmZzZXQrMjUrMjUqaSw1MCsyNVx0XHJcblx0XHRpZiBNT0RFID09IDBcclxuXHRcdFx0aWYgaXRlbXNba2V5XVxyXG5cdFx0XHRcdG9wdGlvbiA9IGl0ZW1zW2tleV0uc3BsaXQgJyAnXHJcblx0XHRcdFx0Zm9yIGl0ZW0saiBpbiBvcHRpb25cclxuXHRcdFx0XHRcdGZpbGwgJ2JsYWNrJ1xyXG5cdFx0XHRcdFx0dGV4dCBpdGVtLG9mZnNldCsyNSsyNSppLDEwMCsyNSpqXHJcblxyXG5zaG93Q2hvaWNlcyA9IC0+XHJcblx0ZmlsbCAnd2hpdGUnXHJcblx0c3Ryb2tlICdibGFjaydcclxuXHRmb3IgaSBpbiByYW5nZSA4XHJcblx0XHRyZWN0IDIwKzQwKmksMTAsNDAsMzBcclxuXHRub1N0cm9rZSgpXHJcblx0ZmlsbCAnYmxhY2snXHJcblx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcclxuXHRmb3IgYyxpIGluIHNuYXBzaG90c1tjdXJyZW50XS5jaG9pY2VzLnRyaW0oKS5zcGxpdCAnICdcclxuXHRcdHRleHQgYyw0MCs0MCppLDI4XHJcblxyXG5kcmF3TGlua3MgPSAob2Zmc2V0LCBlbnRyaWVzLCBjb25zdHJhaW50cywgaXRlbXMpIC0+XHJcblx0ZmlsbCAnYmxhY2snXHJcblx0dGV4dFNpemUgMTJcclxuXHRrZXlzID0gXy5rZXlzIGVudHJpZXNcclxuXHRzdHJva2UgJ2JsYWNrJ1xyXG5cclxuXHRmb3Iga2V5LGkgaW4ga2V5c1xyXG5cdFx0eSA9IDEwMCsxNSppXHJcblx0XHRsaW5lIDAseSx3aWR0aCx5XHJcblxyXG5cdGZvciBrZXksaSBpbiBjb25zdHJhaW50c1xyXG5cdFx0eCA9IG9mZnNldCArIDI1ICsgMjUgKiBpXHJcblx0XHRzdHJva2UgJ2JsYWNrJ1xyXG5cdFx0bGluZSB4LDEwMCx4LGhlaWdodFxyXG5cclxuZHJhd0V4cGFuZGVkID0gKG9mZnNldCwgZW50cmllcywgY29uc3RyYWludHMsIGl0ZW1zKSAtPlxyXG5cdGZpbGwgJ2JsYWNrJ1xyXG5cdHRleHRTaXplIDEyXHJcblx0a2V5cyA9IF8ua2V5cyBlbnRyaWVzXHJcblx0c3Ryb2tlICdibGFjaydcclxuXHRmb3Iga2V5LGkgaW4ga2V5c1xyXG5cdFx0eSA9IDEwMCsxNSppXHJcblxyXG5cdGZvciBrZXksaSBpbiBjb25zdHJhaW50c1xyXG5cdFx0eCA9IG9mZnNldCArIDI1ICsgMjUgKiBpXHJcblx0XHRzdHJva2UgJ2JsYWNrJ1xyXG5cdFx0aWYgaXRlbXNba2V5XVxyXG5cdFx0XHRvcHRpb24gPSBpdGVtc1trZXldLnNwbGl0ICcgJ1xyXG5cdFx0XHRmb3IgaXRlbSBpbiBvcHRpb25cclxuXHRcdFx0XHRqID0ga2V5cy5pbmRleE9mIGl0ZW1cclxuXHRcdFx0XHR5ID0gMTAwKzE1KmpcclxuXHRcdFx0XHRzdHJva2UgMTI4XHJcblx0XHRcdFx0bGluZSB4LHktOCx4LHkrOFxyXG5cdFx0XHRcdGxpbmUgeC04LHkseCs4LHlcclxuXHRcdFx0XHRub1N0cm9rZSgpXHJcblx0XHRcdFx0dGV4dCBpdGVtLHgseVxyXG5cclxuZHJhdyA9IC0+XHJcblx0YmcgMC41XHJcblx0aWYgbm90IGNvbnN0cmFpbnRzIHRoZW4gcmV0dXJuXHJcblxyXG5cdHRleHRTaXplIDE0XHJcblx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcclxuXHRmaWxsICd5ZWxsb3cnXHJcblxyXG5cdHNuYXBzaG90ID0gc25hcHNob3RzW2N1cnJlbnRdXHRcclxuXHRkcmF3T3B0aW9ucyAncHJpbWFyeSBpdGVtcycsICAwKjI1LCAgMTYqMjUsIGNvbnN0cmFpbnRzLnByaW1hcmllcy5zcGxpdCgnICcpLCAgIHNuYXBzaG90LnByaW1hcmllc1xyXG5cdGRyYXdPcHRpb25zICdzZWNvbmRhcnkgaXRlbXMnLDE2KjI1LCAzMCoyNSwgY29uc3RyYWludHMuc2Vjb25kYXJpZXMuc3BsaXQoJyAnKSwgc25hcHNob3Quc2Vjb25kYXJpZXNcclxuXHJcblx0aWYgTU9ERSA9PSAwIHRoZW4gZHJhd0NoZXNzQm9hcmQoKVxyXG5cclxuXHRmaWxsICdibGFjaydcclxuXHR0ZXh0U2l6ZSAzMlxyXG5cdHNob3dDaG9pY2VzKClcclxuXHR0ZXh0QWxpZ24gUklHSFQsQ0VOVEVSXHJcblx0dGV4dCBcInNuYXBzaG90ICN7Y3VycmVudH0gb2YgI3tzbmFwc2hvdHMubGVuZ3RoLTF9XCIsd2lkdGgtNDAsMjVcclxuXHR0ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxyXG5cdHRleHQgJ0RhbmNpbmcgTGlua3MnLHdpZHRoLzIsMjVcclxuXHJcblx0aWYgTU9ERSA9PSAwXHJcblx0XHR0ZXh0QWxpZ24gTEVGVCxUT1BcclxuXHRcdHRleHRTaXplIDE0XHJcblx0XHRmaWxsICd3aGl0ZSdcclxuXHRcdHRleHQgZXhwbGFuYXRpb25zW2N1cnJlbnRdLDE1LDEwMCs4KjI1XHJcblxyXG5cdGlmIE1PREUgPT0gMVxyXG5cdFx0ZHJhd0xpbmtzICAgIDAqMjUsICBjb25zdHJhaW50cy5lbnRyaWVzLCBjb25zdHJhaW50cy5wcmltYXJpZXMuc3BsaXQoJyAnKSwgICBzbmFwc2hvdC5wcmltYXJpZXNcclxuXHRcdGRyYXdMaW5rcyAgICAxNioyNSwgY29uc3RyYWludHMuZW50cmllcywgY29uc3RyYWludHMuc2Vjb25kYXJpZXMuc3BsaXQoJyAnKSwgc25hcHNob3Quc2Vjb25kYXJpZXNcclxuXHRcdGRyYXdFeHBhbmRlZCAwKjI1LCAgY29uc3RyYWludHMuZW50cmllcywgY29uc3RyYWludHMucHJpbWFyaWVzLnNwbGl0KCcgJyksICAgc25hcHNob3QucHJpbWFyaWVzXHJcblx0XHRkcmF3RXhwYW5kZWQgMTYqMjUsIGNvbnN0cmFpbnRzLmVudHJpZXMsIGNvbnN0cmFpbnRzLnNlY29uZGFyaWVzLnNwbGl0KCcgJyksIHNuYXBzaG90LnNlY29uZGFyaWVzXHJcblxyXG5rZXlQcmVzc2VkID0gLT5cclxuXHRpZiBrZXk9PScgJ1xyXG5cdFx0TU9ERSA9IDEgLSBNT0RFXHJcblx0XHRyZXR1cm5cclxuXHRpZiBrZXk9PSdBcnJvd0xlZnQnIHRoZW4gY3VycmVudC0tXHJcblx0aWYga2V5PT0nQXJyb3dSaWdodCcgdGhlbiBjdXJyZW50KytcclxuXHRpZiBjdXJyZW50IDwgMCB0aGVuIGN1cnJlbnQgPSAwXHJcblx0aWYgY3VycmVudCA+PSBzbmFwc2hvdHMubGVuZ3RoIHRoZW4gY3VycmVudCA9IHNuYXBzaG90cy5sZW5ndGgtMVxyXG5cdGRyYXcoKVxyXG5cclxuZHJhd0xpbmUgPSAoaTEsajEsaTIsajIpIC0+XHJcblx0UiA9IDUwXHJcblx0eCA9IHdpZHRoLzItNCpSXHJcblx0eSA9IDMwMCBcclxuXHRsaW5lIHgrUiooaTErMC41KSx5K1IqKGoxKzAuNSkseCtSKihpMiswLjUpLHkrUiooajIrMC41KVxyXG5cclxubW91c2VNb3ZlZCA9IC0+XHJcblx0eWVsbG93S2V5ID0gJydcclxuXHRpZiA1MCA8IG1vdXNlWSA8IDMwMFxyXG5cdFx0Zm9yIGtleSxpbmRleCBpbiBjb25zdHJhaW50cy5wcmltYXJpZXMuc3BsaXQgJyAnXHJcblx0XHRcdGlmIDI1KihpbmRleCswLjUpIDwgbW91c2VYIDwgMjUqKGluZGV4KzEuNSkgdGhlbiB5ZWxsb3dLZXkgPSBrZXlcclxuXHRcdGZvciBrZXksaW5kZXggaW4gY29uc3RyYWludHMuc2Vjb25kYXJpZXMuc3BsaXQgJyAnXHJcblx0XHRcdGlmIDI1KihpbmRleCsxNi41KSA8IG1vdXNlWCA8IDI1KihpbmRleCsxNy41KSB0aGVuIHllbGxvd0tleSA9IGtleVxyXG5cclxuZHJhd1llbGxvd0xpbmUgPSAtPlxyXG5cdGtleSA9IHllbGxvd0tleVxyXG5cdGlmIGtleSA9PSAnJyB0aGVuIHJldHVyblxyXG5cdHN0cm9rZSAyNTUsMjU1LDAsMTI4XHJcblx0c3Ryb2tlV2VpZ2h0IDI1XHJcblx0aWYga2V5WzBdIGluIFwiQ1JcIlxyXG5cdFx0aSA9ICdBQkNERUZHSCcuaW5kZXhPZiBrZXlbMV1cclxuXHRcdGogPSAnMTIzNDU2NzgnLmluZGV4T2Yga2V5WzFdXHJcblx0XHRpZiBrZXlbMF0gPT0gJ0MnIHRoZW4gZHJhd0xpbmUgaSwwLGksN1xyXG5cdFx0aWYga2V5WzBdID09ICdSJyB0aGVuIGRyYXdMaW5lIDAsNy1qLDcsNy1qXHJcblx0aWYga2V5WzBdIGluIFwiQUJcIlxyXG5cdFx0aSA9ICdBQkNERUZHSElKS0xNTk8nLmluZGV4T2Yga2V5WzFdXHJcblx0XHRpZiBrZXlbMF0gPT0gJ0EnXHJcblx0XHRcdGlmIGkgPCA3IHRoZW4gZHJhd0xpbmUgMCw3LWksaSw3IGVsc2UgZHJhd0xpbmUgaS03LDAsIDcsMTQtaVxyXG5cdFx0aWYga2V5WzBdID09ICdCJ1xyXG5cdFx0XHRpZiBpIDwgNyB0aGVuIGRyYXdMaW5lIDcsNy1pLDctaSw3IGVsc2UgZHJhd0xpbmUgMCwxNC1pLDE0LWksMFxyXG5cdG5vU3Ryb2tlKClcclxuXHRzdHJva2VXZWlnaHQgMSJdfQ==
//# sourceURL=c:\github\2020\040-QueensViewer\coffee\sketch.coffee