// Generated by CoffeeScript 2.4.1
var constraints, current, drawChessBoard, drawOptions, explanations, keyPressed, preload, setColor, setup, showChoices, snapshots, xdraw;

constraints = null;

snapshots = null;

current = 0;

explanations = [];

explanations.push('There are 16 primary items, 8 columns and 8 rows\nItem CA is chosen\nOption a1 is first\nPress Right Arrow');

explanations.push('Items CA and R1 are hidden\nItem CB is chosen\nOption b3 is selected');

explanations.push('Items CB and R3 are hidden\nShortest item is CC\nOption c5 is selected');

explanations.push('Items CC and R5 are hidden\nShortest item is CF\nOption f4 is selected');

explanations.push('Items CF and R4 are hidden\nShortest item is CH\nOption h7 is selected');

explanations.push('Items CH and R7 are hidden\nThe red five indicates backtracking needed\nR6 is missing => h7 backtracked\nf4 is also backtracked as CF has no options left');

explanations.push('c5 is backtracked and replaced by c6\nd2 is selected');

explanations.push('Items CD and R2 are hidden\ne7 is selected');

explanations.push('Items CE and R7 are hidden\nR8 is empty => e7 is backtracked');

explanations.push("d2 is backtracked and replaced by d8");

setColor = function(item, options) {
  return fill(options.includes(item) ? 'black' : 'red');
};

drawChessBoard = function() {
  var R, c, choices, i, index, j, k, l, len, len1, len2, m, ref, ref1, results, x, y;
  R = 50;
  x = width / 2 - 4 * R;
  y = height / 2 - R;
  ref = range(8);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    ref1 = range(8);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j = ref1[l];
      fill((i + j) % 2 === 0 ? 'white' : 'black');
      rect(x + R * i, y + R * j, R, R);
    }
  }
  fill('green');
  textSize(24);
  choices = snapshots[current].choices.trim().split(' ');
  results = [];
  for (index = m = 0, len2 = choices.length; m < len2; index = ++m) {
    c = choices[index];
    if (c === '') {
      continue;
    }
    i = 0.5 + 'abcdefgh'.indexOf(c[0]);
    j = 8 - 0.5 - '12345678'.indexOf(c[1]);
    stroke('black');
    fill(index === choices.length - 1 ? 'yellow' : 'green');
    circle(x + R * i, y + R * j, 0.4 * R);
    noStroke();
    fill(index === choices.length - 1 ? 'green' : 'yellow');
    results.push(text(c, x + R * i, y + R * j));
  }
  return results;
};

preload = function() {
  return fetch("8queens.json").then((response) => {
    return response.json();
  }).then((json) => {
    ({constraints, snapshots} = json);
    console.log(json);
    return xdraw();
  });
};

setup = function() {
  return createCanvas(1200, 750);
};

drawOptions = function(prompt, offset, w, items) {
  var choices, i, item, j, k, key, len, n, option, results;
  textAlign(LEFT, CENTER);
  fill('yellow');
  noStroke();
  text(prompt, offset + 25 * 0.7, 50);
  if (prompt === 'primary items') {
    n = _.size(items);
    choices = snapshots[current].choices;
    choices = choices === '' ? [] : choices.split(' ');
    fill(n + 2 * choices.length === 16 ? 'yellow' : 'red');
    text(n, offset + 120, 50);
  }
  stroke('yellow');
  line(offset + 25 * 0.7, 60, offset + w + 10, 60);
  line(offset + 25 * 0.7, 60, offset + w + 10, 60);
  noStroke();
  i = 0;
  textAlign(CENTER, CENTER);
  results = [];
  for (key in items) {
    option = items[key];
    option = option.split(' ');
    fill('yellow');
    text(key, offset + 25 + 25 * i, 50 + 25);
    for (j = k = 0, len = option.length; k < len; j = ++k) {
      item = option[j];
      fill('black');
      text(item, offset + 25 + 25 * i, 100 + 25 * j);
    }
    results.push(i++);
  }
  return results;
};

showChoices = function() {
  var c, i, k, l, len, len1, ref, ref1, results;
  fill('white');
  stroke('black');
  ref = range(8);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    rect(20 + 40 * i, 10, 40, 30);
  }
  noStroke();
  fill('black');
  textAlign(CENTER, CENTER);
  ref1 = snapshots[current].choices.trim().split(' ');
  results = [];
  for (i = l = 0, len1 = ref1.length; l < len1; i = ++l) {
    c = ref1[i];
    results.push(text(c, 40 + 40 * i, 28));
  }
  return results;
};

xdraw = function() {
  var snapshot;
  bg(0.5);
  if (!constraints) {
    return;
  }
  textSize(14);
  textAlign(CENTER, CENTER);
  fill('yellow');
  snapshot = snapshots[current];
  drawOptions('primary items', 0 * 25, 16 * 25, snapshot.primaries);
  drawOptions('secondary items', 16 * 25, 30 * 25, snapshot.secondaries);
  drawChessBoard();
  fill('black');
  textSize(32);
  showChoices();
  textAlign(RIGHT, CENTER);
  text(`snapshot ${current} of ${snapshots.length - 1}`, width - 40, 25);
  textAlign(LEFT, TOP);
  textSize(14);
  fill('white');
  return text(explanations[current], 15, 100 + 8 * 25);
};

keyPressed = function() {
  if (key === 'ArrowLeft') {
    current--;
  }
  if (key === 'ArrowRight') {
    current++;
  }
  if (current < 0) {
    current = 0;
  }
  if (current >= snapshots.length) {
    current = snapshots.length - 1;
  }
  return xdraw();
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2020\040-QueensViewer\coffee\sketch.coffee