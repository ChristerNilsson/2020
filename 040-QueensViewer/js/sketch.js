// Generated by CoffeeScript 2.4.1
var constraints, current, drawChessBoard, drawOptions, explanations, keyPressed, preload, setColor, setup, showChoices, snapshots, xdraw;

constraints = null;

snapshots = null;

current = 1;

explanations = [];

explanations.push('All primary columns and rows have 8 options. Item CA is chosen. Option a1 is first');

explanations.push('Items CA and R1 is hidden. All remaining columns and rows have 6 legal options. Item CB is chosen. Option b3 is selected');

explanations.push('Items CB and R3 is hidden. Shortest item is CC. Option c5 is selected');

explanations.push('Items CC and R5 is hidden. Shortest item is CF. Option f4 is selected');

explanations.push('Items CF and R4 is hidden. Shortest item is CH. Option h7 is selected');

explanations.push('Items CH and R7 is hidden. Shortest item is CH. R6 is empty, h7 is backtracked');

explanations.push('Continue');

explanations.push("Option f4 can't be replaced. f4 is backtracked");

explanations.push('Continue');

explanations.push("Option c5 replaced by c6");

setColor = function(item, options) {
  
  //console.log item,'x',options
  return fill(options.includes(item) ? 'black' : 'red');
};

drawChessBoard = function() {
  var R, c, choices, i, index, j, k, l, len, len1, len2, m, ref, ref1, results, x, y;
  R = 50;
  x = width / 2 - 4 * R;
  y = height / 2 - R;
  ref = range(8);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    ref1 = range(8);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j = ref1[l];
      fill((i + j) % 2 === 0 ? 'white' : 'black');
      rect(x + R * i, y + R * j, R, R);
    }
  }
  fill('green');
  textSize(24);
  choices = snapshots[current].choices.trim().split(' ');
  results = [];
  for (index = m = 0, len2 = choices.length; m < len2; index = ++m) {
    c = choices[index];
    if (c === '') {
      continue;
    }
    //console.log c
    i = 0.5 + 'abcdefgh'.indexOf(c[0]);
    j = 8 - 0.5 - '12345678'.indexOf(c[1]);
    //console.log i,j
    //fill 'green'
    stroke('black');
    fill(index === choices.length - 1 ? 'yellow' : 'green');
    circle(x + R * i, y + R * j, 0.4 * R);
    noStroke();
    fill(index === choices.length - 1 ? 'green' : 'yellow');
    results.push(text(c, x + R * i, y + R * j));
  }
  return results;
};

preload = function() {
  return fetch("8queens.json").then((response) => {
    return response.json();
  }).then((json) => {
    ({constraints, snapshots} = json);
    console.log(json);
    return xdraw();
  });
};

setup = function() {
  return createCanvas(1200, 750);
};

drawOptions = function(prompt, offset, w, a, b) {
  var i, item, j, k, key, l, len, len1, option, results;
  textAlign(LEFT, CENTER);
  fill('yellow');
  noStroke();
  text(prompt, offset + 25 * 0.7, 50);
  stroke('yellow');
  line(offset + 25 * 0.7, 60, offset + w + 10, 60);
  line(offset + 25 * 0.7, 60, offset + w + 10, 60);
  noStroke();
  i = 0;
  textAlign(CENTER, CENTER);
  results = [];
  for (key in a) {
    option = a[key];
    option = option.split(' ');
    fill('yellow');
    text(key, offset + 25 + 25 * i, 50 + 25);
    //fill 'black'
    //text option.length,offset+25+25*i,50+25+25
    if (key in b) {
      for (j = k = 0, len = option.length; k < len; j = ++k) {
        item = option[j];
        if (b) {
          setColor(item, b[key]);
        } else {
          fill('black');
        }
        text(item, offset + 25 + 25 * i, 100 + 25 * j);
      }
    } else {
      fill('red');
      for (j = l = 0, len1 = option.length; l < len1; j = ++l) {
        item = option[j];
        text(item, offset + 25 + 25 * i, 100 + 25 * j);
      }
    }
    results.push(i++);
  }
  return results;
};

showChoices = function(snapshot) {
  var c, i, k, l, len, len1, ref, ref1, results;
  fill('white');
  stroke('black');
  ref = range(8);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    rect(20 + 40 * i, 10, 40, 30);
  }
  noStroke();
  fill('black');
  textAlign(CENTER, CENTER);
  ref1 = snapshots[current].choices.trim().split(' ');
  results = [];
  for (i = l = 0, len1 = ref1.length; l < len1; i = ++l) {
    c = ref1[i];
    results.push(text(c, 40 + 40 * i, 28));
  }
  return results;
};

xdraw = function() {
  var a, ap, ax, b, bp, bx, items, snapshot;
  bg(0.5);
  if (!constraints) {
    return;
  }
  items = constraints.primaries.concat(constraints.secondaries);
  textSize(14);
  textAlign(CENTER, CENTER);
  fill('yellow');
  a = snapshots[current - 1];
  b = snapshots[current];
  ap = a ? a.primaries : {};
  ax = a ? a.secondaries : {};
  bp = b ? b.primaries : {};
  bx = b ? b.secondaries : {};
  drawOptions('primary items', 0 * 25, 16 * 25, ap, bp);
  drawOptions('secondary items', 16 * 25, 30 * 25, ax, bx);
  drawChessBoard();
  snapshot = b;
  fill('black');
  textSize(32);
  if (snapshot) {
    showChoices();
    textAlign(CENTER, CENTER);
    text(snapshot.action, width / 2, 25);
  }
  textAlign(RIGHT, CENTER);
  text(`${current - 1} of ${snapshots.length - 2} snapshots`, width - 40, 25);
  textAlign(LEFT, CENTER);
  textSize(14);
  fill('white');
  return text(explanations[current], 15, 100 + 8 * 25);
};

keyPressed = function() {
  if (key === 'ArrowLeft') {
    current--;
  }
  if (key === 'ArrowRight') {
    current++;
  }
  if (current < 1) {
    current = 1;
  }
  if (current >= snapshots.length) {
    current = snapshots.length - 1;
  }
  return xdraw();
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2020\040-QueensViewer\coffee\sketch.coffee